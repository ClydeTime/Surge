// @generated by protobuf-ts 2.9.0 with parameter output_javascript
// @generated from protobuf file "bilibili/app/view/v1/view.proto" (package "bilibili.app.view.v1", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.0 with parameter output_javascript
// @generated from protobuf file "bilibili/app/view/v1/view.proto" (package "bilibili.app.view.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Pagination } from "../../../pagination/pagination";
import { PaginationReply } from "../../../pagination/pagination";
import { Dimension } from "../../archive/v1/archive";
import { Page } from "../../archive/v1/archive";
import { PlayerArgs } from "../../archive/middleware/v1/preload";
import { Stat } from "../../archive/v1/archive";
import { Author } from "../../archive/v1/archive";
import { Any } from "../../../../google/protobuf/any";
import { Arc } from "../../archive/v1/archive";
/**
 * 业务类型
 *
 * @generated from protobuf enum bilibili.app.view.v1.BizType
 */
export var BizType;
(function (BizType) {
    /**
     * @generated from protobuf enum value: BizTypeNone = 0;
     */
    BizType[BizType["BizTypeNone"] = 0] = "BizTypeNone";
    /**
     * 追番追剧
     *
     * @generated from protobuf enum value: BizTypeFollowVideo = 1;
     */
    BizType[BizType["BizTypeFollowVideo"] = 1] = "BizTypeFollowVideo";
    /**
     * 预约活动
     *
     * @generated from protobuf enum value: BizTypeReserveActivity = 2;
     */
    BizType[BizType["BizTypeReserveActivity"] = 2] = "BizTypeReserveActivity";
    /**
     * 跳转链接
     *
     * @generated from protobuf enum value: BizTypeJumpLink = 3;
     */
    BizType[BizType["BizTypeJumpLink"] = 3] = "BizTypeJumpLink";
    /**
     * 收藏合集
     *
     * @generated from protobuf enum value: BizTypeFavSeason = 4;
     */
    BizType[BizType["BizTypeFavSeason"] = 4] = "BizTypeFavSeason";
    /**
     * 预约游戏
     *
     * @generated from protobuf enum value: BizTypeReserveGame = 5;
     */
    BizType[BizType["BizTypeReserveGame"] = 5] = "BizTypeReserveGame";
})(BizType || (BizType = {}));
/**
 * @generated from protobuf enum bilibili.app.view.v1.Category
 */
export var Category;
(function (Category) {
    /**
     * @generated from protobuf enum value: CategoryUnknown = 0;
     */
    Category[Category["CategoryUnknown"] = 0] = "CategoryUnknown";
    /**
     * @generated from protobuf enum value: CategorySeason = 1;
     */
    Category[Category["CategorySeason"] = 1] = "CategorySeason";
})(Category || (Category = {}));
/**
 * 枚举-文本类型
 *
 * @generated from protobuf enum bilibili.app.view.v1.DescType
 */
export var DescType;
(function (DescType) {
    /**
     * 占位
     *
     * @generated from protobuf enum value: DescTypeUnknown = 0;
     */
    DescType[DescType["DescTypeUnknown"] = 0] = "DescTypeUnknown";
    /**
     * 文本
     *
     * @generated from protobuf enum value: DescTypeText = 1;
     */
    DescType[DescType["DescTypeText"] = 1] = "DescTypeText";
    /**
     * @
     *
     * @generated from protobuf enum value: DescTypeAt = 2;
     */
    DescType[DescType["DescTypeAt"] = 2] = "DescTypeAt";
})(DescType || (DescType = {}));
/**
 * 错误代码
 *
 * @generated from protobuf enum bilibili.app.view.v1.ECode
 */
export var ECode;
(function (ECode) {
    /**
     * 正常
     *
     * @generated from protobuf enum value: DEFAULT = 0;
     */
    ECode[ECode["DEFAULT"] = 0] = "DEFAULT";
    /**
     * 稿件被UP主删除
     *
     * @generated from protobuf enum value: CODE404 = 1;
     */
    ECode[ECode["CODE404"] = 1] = "CODE404";
})(ECode || (ECode = {}));
/**
 * @generated from protobuf enum bilibili.app.view.v1.MaterialSource
 */
export var MaterialSource;
(function (MaterialSource) {
    /**
     * @generated from protobuf enum value: Default = 0;
     */
    MaterialSource[MaterialSource["Default"] = 0] = "Default";
    /**
     * 必剪
     *
     * @generated from protobuf enum value: BiJian = 1;
     */
    MaterialSource[MaterialSource["BiJian"] = 1] = "BiJian";
})(MaterialSource || (MaterialSource = {}));
/**
 * 卡片样式
 *
 * @generated from protobuf enum bilibili.app.view.v1.OperationCardType
 */
export var OperationCardType;
(function (OperationCardType) {
    /**
     * @generated from protobuf enum value: CardTypeNone = 0;
     */
    OperationCardType[OperationCardType["CardTypeNone"] = 0] = "CardTypeNone";
    /**
     * 标准卡
     *
     * @generated from protobuf enum value: CardTypeStandard = 1;
     */
    OperationCardType[OperationCardType["CardTypeStandard"] = 1] = "CardTypeStandard";
    /**
     * 原跳转卡
     *
     * @generated from protobuf enum value: CardTypeSkip = 2;
     */
    OperationCardType[OperationCardType["CardTypeSkip"] = 2] = "CardTypeSkip";
})(OperationCardType || (OperationCardType = {}));
/**
 * @generated from protobuf enum bilibili.app.view.v1.PayState
 */
export var PayState;
(function (PayState) {
    /**
     * @generated from protobuf enum value: PayStateUnknown = 0;
     */
    PayState[PayState["PayStateUnknown"] = 0] = "PayStateUnknown";
    /**
     * @generated from protobuf enum value: PayStateActive = 1;
     */
    PayState[PayState["PayStateActive"] = 1] = "PayStateActive";
})(PayState || (PayState = {}));
/**
 * 卡片类型
 *
 * @generated from protobuf enum bilibili.app.view.v1.PlayerCardType
 */
export var PlayerCardType;
(function (PlayerCardType) {
    /**
     * @generated from protobuf enum value: PlayerCardTypeNone_VALUE = 0;
     */
    PlayerCardType[PlayerCardType["PlayerCardTypeNone_VALUE"] = 0] = "PlayerCardTypeNone_VALUE";
    /**
     * 关注卡
     *
     * @generated from protobuf enum value: PlayerCardTypeAttention_VALUE = 1;
     */
    PlayerCardType[PlayerCardType["PlayerCardTypeAttention_VALUE"] = 1] = "PlayerCardTypeAttention_VALUE";
    /**
     * 运营卡
     *
     * @generated from protobuf enum value: PlayerCardTypeOperation_VALUE = 2;
     */
    PlayerCardType[PlayerCardType["PlayerCardTypeOperation_VALUE"] = 2] = "PlayerCardTypeOperation_VALUE";
    /**
     * 契约卡
     *
     * @generated from protobuf enum value: PlayerCardTypeContract_VALUE = 3;
     */
    PlayerCardType[PlayerCardType["PlayerCardTypeContract_VALUE"] = 3] = "PlayerCardTypeContract_VALUE";
})(PlayerCardType || (PlayerCardType = {}));
/**
 * @generated from protobuf enum bilibili.app.view.v1.PremiereState
 */
export var PremiereState;
(function (PremiereState) {
    /**
     * @generated from protobuf enum value: premiere_none = 0;
     */
    PremiereState[PremiereState["premiere_none"] = 0] = "premiere_none";
    /**
     * @generated from protobuf enum value: premiere_before = 1;
     */
    PremiereState[PremiereState["premiere_before"] = 1] = "premiere_before";
    /**
     * @generated from protobuf enum value: premiere_in = 2;
     */
    PremiereState[PremiereState["premiere_in"] = 2] = "premiere_in";
    /**
     * @generated from protobuf enum value: premiere_after = 3;
     */
    PremiereState[PremiereState["premiere_after"] = 3] = "premiere_after";
})(PremiereState || (PremiereState = {}));
/**
 * @generated from protobuf enum bilibili.app.view.v1.SeasonType
 */
export var SeasonType;
(function (SeasonType) {
    /**
     * @generated from protobuf enum value: Unknown = 0;
     */
    SeasonType[SeasonType["Unknown"] = 0] = "Unknown";
    /**
     * @generated from protobuf enum value: Base = 1;
     */
    SeasonType[SeasonType["Base"] = 1] = "Base";
    /**
     * @generated from protobuf enum value: Good = 2;
     */
    SeasonType[SeasonType["Good"] = 2] = "Good";
})(SeasonType || (SeasonType = {}));
/**
 * TAB跳转类型
 *
 * @generated from protobuf enum bilibili.app.view.v1.TabOtype
 */
export var TabOtype;
(function (TabOtype) {
    /**
     * 未知类型
     *
     * @generated from protobuf enum value: UnknownOtype = 0;
     */
    TabOtype[TabOtype["UnknownOtype"] = 0] = "UnknownOtype";
    /**
     * url链接
     *
     * @generated from protobuf enum value: URL = 1;
     */
    TabOtype[TabOtype["URL"] = 1] = "URL";
    /**
     * native话题活动
     *
     * @generated from protobuf enum value: TopicNA = 2;
     */
    TabOtype[TabOtype["TopicNA"] = 2] = "TopicNA";
    /**
     * 广告url
     *
     * @generated from protobuf enum value: CmURI = 3;
     */
    TabOtype[TabOtype["CmURI"] = 3] = "CmURI";
})(TabOtype || (TabOtype = {}));
/**
 * TAB样式
 *
 * @generated from protobuf enum bilibili.app.view.v1.TabStyle
 */
export var TabStyle;
(function (TabStyle) {
    /**
     * 未知样式
     *
     * @generated from protobuf enum value: UnknownStyle = 0;
     */
    TabStyle[TabStyle["UnknownStyle"] = 0] = "UnknownStyle";
    /**
     * 文字样式
     *
     * @generated from protobuf enum value: Text = 1;
     */
    TabStyle[TabStyle["Text"] = 1] = "Text";
    /**
     * 图片样式
     *
     * @generated from protobuf enum value: Pic = 2;
     */
    TabStyle[TabStyle["Pic"] = 2] = "Pic";
})(TabStyle || (TabStyle = {}));
// @generated message type with reflection information, may provide speed optimized methods
class ActivityResource$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ActivityResource", [
            { no: 1, name: "mod_pool_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "mod_resource_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "selected_bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "light_text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "dark_text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "divider_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { modPoolName: "", modResourceName: "", bgColor: "", selectedBgColor: "", textColor: "", lightTextColor: "", darkTextColor: "", dividerColor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string mod_pool_name */ 1:
                    message.modPoolName = reader.string();
                    break;
                case /* string mod_resource_name */ 2:
                    message.modResourceName = reader.string();
                    break;
                case /* string bg_color */ 3:
                    message.bgColor = reader.string();
                    break;
                case /* string selected_bg_color */ 4:
                    message.selectedBgColor = reader.string();
                    break;
                case /* string text_color */ 5:
                    message.textColor = reader.string();
                    break;
                case /* string light_text_color */ 6:
                    message.lightTextColor = reader.string();
                    break;
                case /* string dark_text_color */ 7:
                    message.darkTextColor = reader.string();
                    break;
                case /* string divider_color */ 8:
                    message.dividerColor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string mod_pool_name = 1; */
        if (message.modPoolName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.modPoolName);
        /* string mod_resource_name = 2; */
        if (message.modResourceName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.modResourceName);
        /* string bg_color = 3; */
        if (message.bgColor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.bgColor);
        /* string selected_bg_color = 4; */
        if (message.selectedBgColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.selectedBgColor);
        /* string text_color = 5; */
        if (message.textColor !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.textColor);
        /* string light_text_color = 6; */
        if (message.lightTextColor !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.lightTextColor);
        /* string dark_text_color = 7; */
        if (message.darkTextColor !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.darkTextColor);
        /* string divider_color = 8; */
        if (message.dividerColor !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.dividerColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ActivityResource
 */
export const ActivityResource = new ActivityResource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivitySeason$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ActivitySeason", [
            { no: 1, name: "arc", kind: "message", T: () => Arc },
            { no: 2, name: "pages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ViewPage },
            { no: 3, name: "owner_ext", kind: "message", T: () => OnwerExt },
            { no: 4, name: "req_user", kind: "message", T: () => ReqUser },
            { no: 5, name: "elec_rank", kind: "message", T: () => ElecRank },
            { no: 6, name: "history", kind: "message", T: () => History },
            { no: 7, name: "bvid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "honor", kind: "message", T: () => Honor },
            { no: 9, name: "staff", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Staff },
            { no: 10, name: "ugc_season", kind: "message", T: () => UgcSeason },
            { no: 11, name: "tab", kind: "message", T: () => Tab },
            { no: 12, name: "rank", kind: "message", T: () => Rank },
            { no: 13, name: "order", kind: "message", T: () => Order },
            { no: 14, name: "support_dislike", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "operation_relate", kind: "message", T: () => OperationRelate },
            { no: 16, name: "activity_resource", kind: "message", T: () => ActivityResource },
            { no: 17, name: "short_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "label", kind: "message", T: () => Label },
            { no: 19, name: "dislike", kind: "message", T: () => Dislike },
            { no: 20, name: "player_icon", kind: "message", T: () => PlayerIcon },
            { no: 21, name: "share_subtitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "cm_config", kind: "message", T: () => CMConfig },
            { no: 23, name: "tf_panel_customized", kind: "message", T: () => TFPanelCustomized },
            { no: 24, name: "argue_msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "ecode", kind: "enum", T: () => ["bilibili.app.view.v1.ECode", ECode] },
            { no: 26, name: "custom_config", kind: "message", T: () => CustomConfig },
            { no: 27, name: "badge_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 28, name: "desc_v2", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DescV2 },
            { no: 29, name: "config", kind: "message", T: () => Config },
            { no: 30, name: "online", kind: "message", T: () => Online },
            { no: 31, name: "arc_extra", kind: "message", T: () => ArcExtra },
            { no: 32, name: "reply_preface", kind: "message", T: () => ReplyStyle }
        ]);
    }
    create(value) {
        const message = { pages: [], bvid: "", staff: [], supportDislike: false, shortLink: "", shareSubtitle: "", argueMsg: "", ecode: 0, badgeUrl: "", descV2: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.archive.v1.Arc arc */ 1:
                    message.arc = Arc.internalBinaryRead(reader, reader.uint32(), options, message.arc);
                    break;
                case /* repeated bilibili.app.view.v1.ViewPage pages */ 2:
                    message.pages.push(ViewPage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.view.v1.OnwerExt owner_ext */ 3:
                    message.ownerExt = OnwerExt.internalBinaryRead(reader, reader.uint32(), options, message.ownerExt);
                    break;
                case /* bilibili.app.view.v1.ReqUser req_user */ 4:
                    message.reqUser = ReqUser.internalBinaryRead(reader, reader.uint32(), options, message.reqUser);
                    break;
                case /* bilibili.app.view.v1.ElecRank elec_rank */ 5:
                    message.elecRank = ElecRank.internalBinaryRead(reader, reader.uint32(), options, message.elecRank);
                    break;
                case /* bilibili.app.view.v1.History history */ 6:
                    message.history = History.internalBinaryRead(reader, reader.uint32(), options, message.history);
                    break;
                case /* string bvid */ 7:
                    message.bvid = reader.string();
                    break;
                case /* bilibili.app.view.v1.Honor honor */ 8:
                    message.honor = Honor.internalBinaryRead(reader, reader.uint32(), options, message.honor);
                    break;
                case /* repeated bilibili.app.view.v1.Staff staff */ 9:
                    message.staff.push(Staff.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.view.v1.UgcSeason ugc_season */ 10:
                    message.ugcSeason = UgcSeason.internalBinaryRead(reader, reader.uint32(), options, message.ugcSeason);
                    break;
                case /* bilibili.app.view.v1.Tab tab */ 11:
                    message.tab = Tab.internalBinaryRead(reader, reader.uint32(), options, message.tab);
                    break;
                case /* bilibili.app.view.v1.Rank rank */ 12:
                    message.rank = Rank.internalBinaryRead(reader, reader.uint32(), options, message.rank);
                    break;
                case /* bilibili.app.view.v1.Order order */ 13:
                    message.order = Order.internalBinaryRead(reader, reader.uint32(), options, message.order);
                    break;
                case /* bool support_dislike */ 14:
                    message.supportDislike = reader.bool();
                    break;
                case /* bilibili.app.view.v1.OperationRelate operation_relate */ 15:
                    message.operationRelate = OperationRelate.internalBinaryRead(reader, reader.uint32(), options, message.operationRelate);
                    break;
                case /* bilibili.app.view.v1.ActivityResource activity_resource */ 16:
                    message.activityResource = ActivityResource.internalBinaryRead(reader, reader.uint32(), options, message.activityResource);
                    break;
                case /* string short_link */ 17:
                    message.shortLink = reader.string();
                    break;
                case /* bilibili.app.view.v1.Label label */ 18:
                    message.label = Label.internalBinaryRead(reader, reader.uint32(), options, message.label);
                    break;
                case /* bilibili.app.view.v1.Dislike dislike */ 19:
                    message.dislike = Dislike.internalBinaryRead(reader, reader.uint32(), options, message.dislike);
                    break;
                case /* bilibili.app.view.v1.PlayerIcon player_icon */ 20:
                    message.playerIcon = PlayerIcon.internalBinaryRead(reader, reader.uint32(), options, message.playerIcon);
                    break;
                case /* string share_subtitle */ 21:
                    message.shareSubtitle = reader.string();
                    break;
                case /* bilibili.app.view.v1.CMConfig cm_config */ 22:
                    message.cmConfig = CMConfig.internalBinaryRead(reader, reader.uint32(), options, message.cmConfig);
                    break;
                case /* bilibili.app.view.v1.TFPanelCustomized tf_panel_customized */ 23:
                    message.tfPanelCustomized = TFPanelCustomized.internalBinaryRead(reader, reader.uint32(), options, message.tfPanelCustomized);
                    break;
                case /* string argue_msg */ 24:
                    message.argueMsg = reader.string();
                    break;
                case /* bilibili.app.view.v1.ECode ecode */ 25:
                    message.ecode = reader.int32();
                    break;
                case /* bilibili.app.view.v1.CustomConfig custom_config */ 26:
                    message.customConfig = CustomConfig.internalBinaryRead(reader, reader.uint32(), options, message.customConfig);
                    break;
                case /* string badge_url */ 27:
                    message.badgeUrl = reader.string();
                    break;
                case /* repeated bilibili.app.view.v1.DescV2 desc_v2 */ 28:
                    message.descV2.push(DescV2.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.view.v1.Config config */ 29:
                    message.config = Config.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                case /* bilibili.app.view.v1.Online online */ 30:
                    message.online = Online.internalBinaryRead(reader, reader.uint32(), options, message.online);
                    break;
                case /* bilibili.app.view.v1.ArcExtra arc_extra */ 31:
                    message.arcExtra = ArcExtra.internalBinaryRead(reader, reader.uint32(), options, message.arcExtra);
                    break;
                case /* bilibili.app.view.v1.ReplyStyle reply_preface */ 32:
                    message.replyPreface = ReplyStyle.internalBinaryRead(reader, reader.uint32(), options, message.replyPreface);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.archive.v1.Arc arc = 1; */
        if (message.arc)
            Arc.internalBinaryWrite(message.arc, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.view.v1.ViewPage pages = 2; */
        for (let i = 0; i < message.pages.length; i++)
            ViewPage.internalBinaryWrite(message.pages[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.OnwerExt owner_ext = 3; */
        if (message.ownerExt)
            OnwerExt.internalBinaryWrite(message.ownerExt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.ReqUser req_user = 4; */
        if (message.reqUser)
            ReqUser.internalBinaryWrite(message.reqUser, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.ElecRank elec_rank = 5; */
        if (message.elecRank)
            ElecRank.internalBinaryWrite(message.elecRank, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.History history = 6; */
        if (message.history)
            History.internalBinaryWrite(message.history, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string bvid = 7; */
        if (message.bvid !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.bvid);
        /* bilibili.app.view.v1.Honor honor = 8; */
        if (message.honor)
            Honor.internalBinaryWrite(message.honor, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.view.v1.Staff staff = 9; */
        for (let i = 0; i < message.staff.length; i++)
            Staff.internalBinaryWrite(message.staff[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.UgcSeason ugc_season = 10; */
        if (message.ugcSeason)
            UgcSeason.internalBinaryWrite(message.ugcSeason, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.Tab tab = 11; */
        if (message.tab)
            Tab.internalBinaryWrite(message.tab, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.Rank rank = 12; */
        if (message.rank)
            Rank.internalBinaryWrite(message.rank, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.Order order = 13; */
        if (message.order)
            Order.internalBinaryWrite(message.order, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* bool support_dislike = 14; */
        if (message.supportDislike !== false)
            writer.tag(14, WireType.Varint).bool(message.supportDislike);
        /* bilibili.app.view.v1.OperationRelate operation_relate = 15; */
        if (message.operationRelate)
            OperationRelate.internalBinaryWrite(message.operationRelate, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.ActivityResource activity_resource = 16; */
        if (message.activityResource)
            ActivityResource.internalBinaryWrite(message.activityResource, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* string short_link = 17; */
        if (message.shortLink !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.shortLink);
        /* bilibili.app.view.v1.Label label = 18; */
        if (message.label)
            Label.internalBinaryWrite(message.label, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.Dislike dislike = 19; */
        if (message.dislike)
            Dislike.internalBinaryWrite(message.dislike, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.PlayerIcon player_icon = 20; */
        if (message.playerIcon)
            PlayerIcon.internalBinaryWrite(message.playerIcon, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* string share_subtitle = 21; */
        if (message.shareSubtitle !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.shareSubtitle);
        /* bilibili.app.view.v1.CMConfig cm_config = 22; */
        if (message.cmConfig)
            CMConfig.internalBinaryWrite(message.cmConfig, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.TFPanelCustomized tf_panel_customized = 23; */
        if (message.tfPanelCustomized)
            TFPanelCustomized.internalBinaryWrite(message.tfPanelCustomized, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* string argue_msg = 24; */
        if (message.argueMsg !== "")
            writer.tag(24, WireType.LengthDelimited).string(message.argueMsg);
        /* bilibili.app.view.v1.ECode ecode = 25; */
        if (message.ecode !== 0)
            writer.tag(25, WireType.Varint).int32(message.ecode);
        /* bilibili.app.view.v1.CustomConfig custom_config = 26; */
        if (message.customConfig)
            CustomConfig.internalBinaryWrite(message.customConfig, writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        /* string badge_url = 27; */
        if (message.badgeUrl !== "")
            writer.tag(27, WireType.LengthDelimited).string(message.badgeUrl);
        /* repeated bilibili.app.view.v1.DescV2 desc_v2 = 28; */
        for (let i = 0; i < message.descV2.length; i++)
            DescV2.internalBinaryWrite(message.descV2[i], writer.tag(28, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.Config config = 29; */
        if (message.config)
            Config.internalBinaryWrite(message.config, writer.tag(29, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.Online online = 30; */
        if (message.online)
            Online.internalBinaryWrite(message.online, writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.ArcExtra arc_extra = 31; */
        if (message.arcExtra)
            ArcExtra.internalBinaryWrite(message.arcExtra, writer.tag(31, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.ReplyStyle reply_preface = 32; */
        if (message.replyPreface)
            ReplyStyle.internalBinaryWrite(message.replyPreface, writer.tag(32, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ActivitySeason
 */
export const ActivitySeason = new ActivitySeason$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddContractReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.AddContractReq", [
            { no: 1, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "up_mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { aid: 0n, upMid: 0n, spmid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid */ 1:
                    message.aid = reader.int64().toBigInt();
                    break;
                case /* int64 up_mid */ 2:
                    message.upMid = reader.int64().toBigInt();
                    break;
                case /* string spmid */ 3:
                    message.spmid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 1; */
        if (message.aid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.aid);
        /* int64 up_mid = 2; */
        if (message.upMid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.upMid);
        /* string spmid = 3; */
        if (message.spmid !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.spmid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.AddContractReq
 */
export const AddContractReq = new AddContractReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AdInfo$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.AdInfo", [
            { no: 1, name: "creative_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "creative_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "creative_content", kind: "message", T: () => CreativeContent },
            { no: 4, name: "ad_cb", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "card_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "extra", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = { creativeId: 0n, creativeType: 0n, adCb: "", cardType: 0, extra: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 creative_id */ 1:
                    message.creativeId = reader.int64().toBigInt();
                    break;
                case /* int64 creative_type */ 2:
                    message.creativeType = reader.int64().toBigInt();
                    break;
                case /* bilibili.app.view.v1.CreativeContent creative_content */ 3:
                    message.creativeContent = CreativeContent.internalBinaryRead(reader, reader.uint32(), options, message.creativeContent);
                    break;
                case /* string ad_cb */ 4:
                    message.adCb = reader.string();
                    break;
                case /* int32 card_type */ 5:
                    message.cardType = reader.int32();
                    break;
                case /* bytes extra */ 6:
                    message.extra = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 creative_id = 1; */
        if (message.creativeId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.creativeId);
        /* int64 creative_type = 2; */
        if (message.creativeType !== 0n)
            writer.tag(2, WireType.Varint).int64(message.creativeType);
        /* bilibili.app.view.v1.CreativeContent creative_content = 3; */
        if (message.creativeContent)
            CreativeContent.internalBinaryWrite(message.creativeContent, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string ad_cb = 4; */
        if (message.adCb !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.adCb);
        /* int32 card_type = 5; */
        if (message.cardType !== 0)
            writer.tag(5, WireType.Varint).int32(message.cardType);
        /* bytes extra = 6; */
        if (message.extra.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.extra);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.AdInfo
 */
export const AdInfo = new AdInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArcExtra$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ArcExtra", [
            { no: 1, name: "arc_pub_location", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { arcPubLocation: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string arc_pub_location */ 1:
                    message.arcPubLocation = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string arc_pub_location = 1; */
        if (message.arcPubLocation !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.arcPubLocation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ArcExtra
 */
export const ArcExtra = new ArcExtra$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArcsPlayer$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ArcsPlayer", [
            { no: 1, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "player_info", kind: "map", K: 3 /*ScalarType.INT64*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value) {
        const message = { aid: 0n, playerInfo: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid */ 1:
                    message.aid = reader.int64().toBigInt();
                    break;
                case /* map<int64, string> player_info */ 2:
                    this.binaryReadMap2(message.playerInfo, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap2(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.int64().toString();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.view.v1.ArcsPlayer.player_info");
            }
        }
        map[key ?? "0"] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 1; */
        if (message.aid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.aid);
        /* map<int64, string> player_info = 2; */
        for (let k of Object.keys(message.playerInfo))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int64(k).tag(2, WireType.LengthDelimited).string(message.playerInfo[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ArcsPlayer
 */
export const ArcsPlayer = new ArcsPlayer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Asset$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Asset", [
            { no: 1, name: "paid", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "msg", kind: "message", T: () => AssetMsg },
            { no: 4, name: "preview_msg", kind: "message", T: () => AssetMsg }
        ]);
    }
    create(value) {
        const message = { paid: 0, price: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 paid */ 1:
                    message.paid = reader.int32();
                    break;
                case /* int64 price */ 2:
                    message.price = reader.int64().toBigInt();
                    break;
                case /* bilibili.app.view.v1.AssetMsg msg */ 3:
                    message.msg = AssetMsg.internalBinaryRead(reader, reader.uint32(), options, message.msg);
                    break;
                case /* bilibili.app.view.v1.AssetMsg preview_msg */ 4:
                    message.previewMsg = AssetMsg.internalBinaryRead(reader, reader.uint32(), options, message.previewMsg);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 paid = 1; */
        if (message.paid !== 0)
            writer.tag(1, WireType.Varint).int32(message.paid);
        /* int64 price = 2; */
        if (message.price !== 0n)
            writer.tag(2, WireType.Varint).int64(message.price);
        /* bilibili.app.view.v1.AssetMsg msg = 3; */
        if (message.msg)
            AssetMsg.internalBinaryWrite(message.msg, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.AssetMsg preview_msg = 4; */
        if (message.previewMsg)
            AssetMsg.internalBinaryWrite(message.previewMsg, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Asset
 */
export const Asset = new Asset$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssetMsg$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.AssetMsg", [
            { no: 1, name: "desc1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "desc2", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { desc1: "", desc2: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string desc1 */ 1:
                    message.desc1 = reader.string();
                    break;
                case /* string desc2 */ 2:
                    message.desc2 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string desc1 = 1; */
        if (message.desc1 !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.desc1);
        /* string desc2 = 2; */
        if (message.desc2 !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.desc2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.AssetMsg
 */
export const AssetMsg = new AssetMsg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Attention$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Attention", [
            { no: 1, name: "start_time", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "end_time", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "pos_x", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "pos_y", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value) {
        const message = { startTime: 0, endTime: 0, posX: 0, posY: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 start_time */ 1:
                    message.startTime = reader.int32();
                    break;
                case /* int32 end_time */ 2:
                    message.endTime = reader.int32();
                    break;
                case /* double pos_x */ 3:
                    message.posX = reader.double();
                    break;
                case /* double pos_y */ 4:
                    message.posY = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 start_time = 1; */
        if (message.startTime !== 0)
            writer.tag(1, WireType.Varint).int32(message.startTime);
        /* int32 end_time = 2; */
        if (message.endTime !== 0)
            writer.tag(2, WireType.Varint).int32(message.endTime);
        /* double pos_x = 3; */
        if (message.posX !== 0)
            writer.tag(3, WireType.Bit64).double(message.posX);
        /* double pos_y = 4; */
        if (message.posY !== 0)
            writer.tag(4, WireType.Bit64).double(message.posY);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Attention
 */
export const Attention = new Attention$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Audio$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Audio", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "cover_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "song_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "play_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "reply_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "upper_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "entrance", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "song_attr", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { title: "", coverUrl: "", songId: 0n, playCount: 0n, replyCount: 0n, upperId: 0n, entrance: "", songAttr: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string cover_url */ 2:
                    message.coverUrl = reader.string();
                    break;
                case /* int64 song_id */ 3:
                    message.songId = reader.int64().toBigInt();
                    break;
                case /* int64 play_count */ 4:
                    message.playCount = reader.int64().toBigInt();
                    break;
                case /* int64 reply_count */ 5:
                    message.replyCount = reader.int64().toBigInt();
                    break;
                case /* int64 upper_id */ 6:
                    message.upperId = reader.int64().toBigInt();
                    break;
                case /* string entrance */ 7:
                    message.entrance = reader.string();
                    break;
                case /* int64 song_attr */ 8:
                    message.songAttr = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string cover_url = 2; */
        if (message.coverUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.coverUrl);
        /* int64 song_id = 3; */
        if (message.songId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.songId);
        /* int64 play_count = 4; */
        if (message.playCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.playCount);
        /* int64 reply_count = 5; */
        if (message.replyCount !== 0n)
            writer.tag(5, WireType.Varint).int64(message.replyCount);
        /* int64 upper_id = 6; */
        if (message.upperId !== 0n)
            writer.tag(6, WireType.Varint).int64(message.upperId);
        /* string entrance = 7; */
        if (message.entrance !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.entrance);
        /* int64 song_attr = 8; */
        if (message.songAttr !== 0n)
            writer.tag(8, WireType.Varint).int64(message.songAttr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Audio
 */
export const Audio = new Audio$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BadgeStyle$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.BadgeStyle", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "bg_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "border_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "border_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "bg_style", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { text: "", textColor: "", textColorNight: "", bgColor: "", bgColorNight: "", borderColor: "", borderColorNight: "", bgStyle: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string text_color */ 2:
                    message.textColor = reader.string();
                    break;
                case /* string text_color_night */ 3:
                    message.textColorNight = reader.string();
                    break;
                case /* string bg_color */ 4:
                    message.bgColor = reader.string();
                    break;
                case /* string bg_color_night */ 5:
                    message.bgColorNight = reader.string();
                    break;
                case /* string border_color */ 6:
                    message.borderColor = reader.string();
                    break;
                case /* string border_color_night */ 7:
                    message.borderColorNight = reader.string();
                    break;
                case /* int32 bg_style */ 8:
                    message.bgStyle = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string text_color = 2; */
        if (message.textColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.textColor);
        /* string text_color_night = 3; */
        if (message.textColorNight !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.textColorNight);
        /* string bg_color = 4; */
        if (message.bgColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.bgColor);
        /* string bg_color_night = 5; */
        if (message.bgColorNight !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.bgColorNight);
        /* string border_color = 6; */
        if (message.borderColor !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.borderColor);
        /* string border_color_night = 7; */
        if (message.borderColorNight !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.borderColorNight);
        /* int32 bg_style = 8; */
        if (message.bgStyle !== 0)
            writer.tag(8, WireType.Varint).int32(message.bgStyle);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.BadgeStyle
 */
export const BadgeStyle = new BadgeStyle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Bgm$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Bgm", [
            { no: 1, name: "sid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "author", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "jumpUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { sid: 0n, mid: 0n, title: "", author: "", jumpUrl: "", cover: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 sid */ 1:
                    message.sid = reader.int64().toBigInt();
                    break;
                case /* int64 mid */ 2:
                    message.mid = reader.int64().toBigInt();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string author */ 4:
                    message.author = reader.string();
                    break;
                case /* string jumpUrl */ 5:
                    message.jumpUrl = reader.string();
                    break;
                case /* string cover */ 6:
                    message.cover = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 sid = 1; */
        if (message.sid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.sid);
        /* int64 mid = 2; */
        if (message.mid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.mid);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string author = 4; */
        if (message.author !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.author);
        /* string jumpUrl = 5; */
        if (message.jumpUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.jumpUrl);
        /* string cover = 6; */
        if (message.cover !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.cover);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Bgm
 */
export const Bgm = new Bgm$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BizFavSeasonParam$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.BizFavSeasonParam", [
            { no: 1, name: "season_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { seasonId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 season_id */ 1:
                    message.seasonId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 season_id = 1; */
        if (message.seasonId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.seasonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.BizFavSeasonParam
 */
export const BizFavSeasonParam = new BizFavSeasonParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BizFollowVideoParam$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.BizFollowVideoParam", [
            { no: 1, name: "season_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { seasonId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 season_id */ 1:
                    message.seasonId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 season_id = 1; */
        if (message.seasonId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.seasonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.BizFollowVideoParam
 */
export const BizFollowVideoParam = new BizFollowVideoParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BizJumpLinkParam$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.BizJumpLinkParam", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { url: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.BizJumpLinkParam
 */
export const BizJumpLinkParam = new BizJumpLinkParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BizReserveActivityParam$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.BizReserveActivityParam", [
            { no: 1, name: "activity_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "from", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "reserve_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { activityId: 0n, from: "", type: "", oid: 0n, reserveId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 activity_id */ 1:
                    message.activityId = reader.int64().toBigInt();
                    break;
                case /* string from */ 2:
                    message.from = reader.string();
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                case /* int64 oid */ 4:
                    message.oid = reader.int64().toBigInt();
                    break;
                case /* int64 reserve_id */ 5:
                    message.reserveId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 activity_id = 1; */
        if (message.activityId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.activityId);
        /* string from = 2; */
        if (message.from !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.from);
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        /* int64 oid = 4; */
        if (message.oid !== 0n)
            writer.tag(4, WireType.Varint).int64(message.oid);
        /* int64 reserve_id = 5; */
        if (message.reserveId !== 0n)
            writer.tag(5, WireType.Varint).int64(message.reserveId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.BizReserveActivityParam
 */
export const BizReserveActivityParam = new BizReserveActivityParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BizReserveGameParam$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.BizReserveGameParam", [
            { no: 1, name: "game_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { gameId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 game_id */ 1:
                    message.gameId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 game_id = 1; */
        if (message.gameId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.gameId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.BizReserveGameParam
 */
export const BizReserveGameParam = new BizReserveGameParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Button$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Button", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { title: "", uri: "", icon: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string uri */ 2:
                    message.uri = reader.string();
                    break;
                case /* string icon */ 3:
                    message.icon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string uri = 2; */
        if (message.uri !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uri);
        /* string icon = 3; */
        if (message.icon !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Button
 */
export const Button = new Button$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ButtonStyle$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ButtonStyle", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "bg_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "jump_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { text: "", textColor: "", textColorNight: "", bgColor: "", bgColorNight: "", jumpLink: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string text_color */ 2:
                    message.textColor = reader.string();
                    break;
                case /* string text_color_night */ 3:
                    message.textColorNight = reader.string();
                    break;
                case /* string bg_color */ 4:
                    message.bgColor = reader.string();
                    break;
                case /* string bg_color_night */ 5:
                    message.bgColorNight = reader.string();
                    break;
                case /* string jump_link */ 6:
                    message.jumpLink = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string text_color = 2; */
        if (message.textColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.textColor);
        /* string text_color_night = 3; */
        if (message.textColorNight !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.textColorNight);
        /* string bg_color = 4; */
        if (message.bgColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.bgColor);
        /* string bg_color_night = 5; */
        if (message.bgColorNight !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.bgColorNight);
        /* string jump_link = 6; */
        if (message.jumpLink !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.jumpLink);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ButtonStyle
 */
export const ButtonStyle = new ButtonStyle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BuzzwordConfig$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.BuzzwordConfig", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "source", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "start", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "end", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "follow_control", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "buzzword_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "schema_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "picture", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { name: "", schema: "", source: 0, start: 0n, end: 0n, followControl: false, id: 0n, buzzwordId: 0n, schemaType: 0, picture: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string schema */ 2:
                    message.schema = reader.string();
                    break;
                case /* int32 source */ 3:
                    message.source = reader.int32();
                    break;
                case /* int64 start */ 4:
                    message.start = reader.int64().toBigInt();
                    break;
                case /* int64 end */ 5:
                    message.end = reader.int64().toBigInt();
                    break;
                case /* bool follow_control */ 6:
                    message.followControl = reader.bool();
                    break;
                case /* int64 id */ 7:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 buzzword_id */ 8:
                    message.buzzwordId = reader.int64().toBigInt();
                    break;
                case /* int32 schema_type */ 9:
                    message.schemaType = reader.int32();
                    break;
                case /* string picture */ 10:
                    message.picture = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string schema = 2; */
        if (message.schema !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.schema);
        /* int32 source = 3; */
        if (message.source !== 0)
            writer.tag(3, WireType.Varint).int32(message.source);
        /* int64 start = 4; */
        if (message.start !== 0n)
            writer.tag(4, WireType.Varint).int64(message.start);
        /* int64 end = 5; */
        if (message.end !== 0n)
            writer.tag(5, WireType.Varint).int64(message.end);
        /* bool follow_control = 6; */
        if (message.followControl !== false)
            writer.tag(6, WireType.Varint).bool(message.followControl);
        /* int64 id = 7; */
        if (message.id !== 0n)
            writer.tag(7, WireType.Varint).int64(message.id);
        /* int64 buzzword_id = 8; */
        if (message.buzzwordId !== 0n)
            writer.tag(8, WireType.Varint).int64(message.buzzwordId);
        /* int32 schema_type = 9; */
        if (message.schemaType !== 0)
            writer.tag(9, WireType.Varint).int32(message.schemaType);
        /* string picture = 10; */
        if (message.picture !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.picture);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.BuzzwordConfig
 */
export const BuzzwordConfig = new BuzzwordConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CacheViewReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.CacheViewReply", [
            { no: 1, name: "arc", kind: "message", T: () => Arc },
            { no: 2, name: "pages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ViewPage },
            { no: 3, name: "owner_ext", kind: "message", T: () => OnwerExt },
            { no: 4, name: "req_user", kind: "message", T: () => ReqUser },
            { no: 5, name: "season", kind: "message", T: () => Season },
            { no: 6, name: "elec_rank", kind: "message", T: () => ElecRank },
            { no: 7, name: "history", kind: "message", T: () => History },
            { no: 8, name: "dislike", kind: "message", T: () => Dislike },
            { no: 9, name: "player_icon", kind: "message", T: () => PlayerIcon },
            { no: 10, name: "bvid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "short_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "share_subtitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "tf_panel_customized", kind: "message", T: () => TFPanelCustomized },
            { no: 14, name: "online", kind: "message", T: () => Online }
        ]);
    }
    create(value) {
        const message = { pages: [], bvid: "", shortLink: "", shareSubtitle: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.archive.v1.Arc arc */ 1:
                    message.arc = Arc.internalBinaryRead(reader, reader.uint32(), options, message.arc);
                    break;
                case /* repeated bilibili.app.view.v1.ViewPage pages */ 2:
                    message.pages.push(ViewPage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.view.v1.OnwerExt owner_ext */ 3:
                    message.ownerExt = OnwerExt.internalBinaryRead(reader, reader.uint32(), options, message.ownerExt);
                    break;
                case /* bilibili.app.view.v1.ReqUser req_user */ 4:
                    message.reqUser = ReqUser.internalBinaryRead(reader, reader.uint32(), options, message.reqUser);
                    break;
                case /* bilibili.app.view.v1.Season season */ 5:
                    message.season = Season.internalBinaryRead(reader, reader.uint32(), options, message.season);
                    break;
                case /* bilibili.app.view.v1.ElecRank elec_rank */ 6:
                    message.elecRank = ElecRank.internalBinaryRead(reader, reader.uint32(), options, message.elecRank);
                    break;
                case /* bilibili.app.view.v1.History history */ 7:
                    message.history = History.internalBinaryRead(reader, reader.uint32(), options, message.history);
                    break;
                case /* bilibili.app.view.v1.Dislike dislike */ 8:
                    message.dislike = Dislike.internalBinaryRead(reader, reader.uint32(), options, message.dislike);
                    break;
                case /* bilibili.app.view.v1.PlayerIcon player_icon */ 9:
                    message.playerIcon = PlayerIcon.internalBinaryRead(reader, reader.uint32(), options, message.playerIcon);
                    break;
                case /* string bvid */ 10:
                    message.bvid = reader.string();
                    break;
                case /* string short_link */ 11:
                    message.shortLink = reader.string();
                    break;
                case /* string share_subtitle */ 12:
                    message.shareSubtitle = reader.string();
                    break;
                case /* bilibili.app.view.v1.TFPanelCustomized tf_panel_customized */ 13:
                    message.tfPanelCustomized = TFPanelCustomized.internalBinaryRead(reader, reader.uint32(), options, message.tfPanelCustomized);
                    break;
                case /* bilibili.app.view.v1.Online online */ 14:
                    message.online = Online.internalBinaryRead(reader, reader.uint32(), options, message.online);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.archive.v1.Arc arc = 1; */
        if (message.arc)
            Arc.internalBinaryWrite(message.arc, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.view.v1.ViewPage pages = 2; */
        for (let i = 0; i < message.pages.length; i++)
            ViewPage.internalBinaryWrite(message.pages[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.OnwerExt owner_ext = 3; */
        if (message.ownerExt)
            OnwerExt.internalBinaryWrite(message.ownerExt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.ReqUser req_user = 4; */
        if (message.reqUser)
            ReqUser.internalBinaryWrite(message.reqUser, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.Season season = 5; */
        if (message.season)
            Season.internalBinaryWrite(message.season, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.ElecRank elec_rank = 6; */
        if (message.elecRank)
            ElecRank.internalBinaryWrite(message.elecRank, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.History history = 7; */
        if (message.history)
            History.internalBinaryWrite(message.history, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.Dislike dislike = 8; */
        if (message.dislike)
            Dislike.internalBinaryWrite(message.dislike, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.PlayerIcon player_icon = 9; */
        if (message.playerIcon)
            PlayerIcon.internalBinaryWrite(message.playerIcon, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string bvid = 10; */
        if (message.bvid !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.bvid);
        /* string short_link = 11; */
        if (message.shortLink !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.shortLink);
        /* string share_subtitle = 12; */
        if (message.shareSubtitle !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.shareSubtitle);
        /* bilibili.app.view.v1.TFPanelCustomized tf_panel_customized = 13; */
        if (message.tfPanelCustomized)
            TFPanelCustomized.internalBinaryWrite(message.tfPanelCustomized, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.Online online = 14; */
        if (message.online)
            Online.internalBinaryWrite(message.online, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.CacheViewReply
 */
export const CacheViewReply = new CacheViewReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CacheViewReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.CacheViewReq", [
            { no: 1, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "bvid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "from", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "trackid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "ad_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "from_spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { aid: 0n, bvid: "", from: "", trackid: "", adExtra: "", spmid: "", fromSpmid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid */ 1:
                    message.aid = reader.int64().toBigInt();
                    break;
                case /* string bvid */ 2:
                    message.bvid = reader.string();
                    break;
                case /* string from */ 3:
                    message.from = reader.string();
                    break;
                case /* string trackid */ 4:
                    message.trackid = reader.string();
                    break;
                case /* string ad_extra */ 5:
                    message.adExtra = reader.string();
                    break;
                case /* string spmid */ 6:
                    message.spmid = reader.string();
                    break;
                case /* string from_spmid */ 7:
                    message.fromSpmid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 1; */
        if (message.aid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.aid);
        /* string bvid = 2; */
        if (message.bvid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.bvid);
        /* string from = 3; */
        if (message.from !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.from);
        /* string trackid = 4; */
        if (message.trackid !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.trackid);
        /* string ad_extra = 5; */
        if (message.adExtra !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.adExtra);
        /* string spmid = 6; */
        if (message.spmid !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.spmid);
        /* string from_spmid = 7; */
        if (message.fromSpmid !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.fromSpmid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.CacheViewReq
 */
export const CacheViewReq = new CacheViewReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Chronos$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Chronos", [
            { no: 1, name: "md5", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "file", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sign", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { md5: "", file: "", sign: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string md5 */ 1:
                    message.md5 = reader.string();
                    break;
                case /* string file */ 2:
                    message.file = reader.string();
                    break;
                case /* string sign */ 3:
                    message.sign = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string md5 = 1; */
        if (message.md5 !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.md5);
        /* string file = 2; */
        if (message.file !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.file);
        /* string sign = 3; */
        if (message.sign !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sign);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Chronos
 */
export const Chronos = new Chronos$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChronosPkgReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ChronosPkgReq", [
            { no: 1, name: "service_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "engine_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "message_protocol", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { serviceKey: "", engineVersion: "", messageProtocol: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string service_key */ 1:
                    message.serviceKey = reader.string();
                    break;
                case /* string engine_version */ 2:
                    message.engineVersion = reader.string();
                    break;
                case /* string message_protocol */ 3:
                    message.messageProtocol = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string service_key = 1; */
        if (message.serviceKey !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.serviceKey);
        /* string engine_version = 2; */
        if (message.engineVersion !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.engineVersion);
        /* string message_protocol = 3; */
        if (message.messageProtocol !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.messageProtocol);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ChronosPkgReq
 */
export const ChronosPkgReq = new ChronosPkgReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClickActivitySeasonReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ClickActivitySeasonReq", [
            { no: 1, name: "order_type", kind: "enum", T: () => ["bilibili.app.view.v1.BizType", BizType] },
            { no: 2, name: "spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "reserve", kind: "message", oneof: "orderParam", T: () => BizReserveActivityParam },
            { no: 4, name: "fav_season", kind: "message", oneof: "orderParam", T: () => BizFavSeasonParam },
            { no: 5, name: "action", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { orderType: 0, spmid: "", orderParam: { oneofKind: undefined }, action: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.view.v1.BizType order_type */ 1:
                    message.orderType = reader.int32();
                    break;
                case /* string spmid */ 2:
                    message.spmid = reader.string();
                    break;
                case /* bilibili.app.view.v1.BizReserveActivityParam reserve */ 3:
                    message.orderParam = {
                        oneofKind: "reserve",
                        reserve: BizReserveActivityParam.internalBinaryRead(reader, reader.uint32(), options, message.orderParam.reserve)
                    };
                    break;
                case /* bilibili.app.view.v1.BizFavSeasonParam fav_season */ 4:
                    message.orderParam = {
                        oneofKind: "favSeason",
                        favSeason: BizFavSeasonParam.internalBinaryRead(reader, reader.uint32(), options, message.orderParam.favSeason)
                    };
                    break;
                case /* int64 action */ 5:
                    message.action = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.view.v1.BizType order_type = 1; */
        if (message.orderType !== 0)
            writer.tag(1, WireType.Varint).int32(message.orderType);
        /* string spmid = 2; */
        if (message.spmid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.spmid);
        /* bilibili.app.view.v1.BizReserveActivityParam reserve = 3; */
        if (message.orderParam.oneofKind === "reserve")
            BizReserveActivityParam.internalBinaryWrite(message.orderParam.reserve, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.BizFavSeasonParam fav_season = 4; */
        if (message.orderParam.oneofKind === "favSeason")
            BizFavSeasonParam.internalBinaryWrite(message.orderParam.favSeason, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 action = 5; */
        if (message.action !== 0n)
            writer.tag(5, WireType.Varint).int64(message.action);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ClickActivitySeasonReq
 */
export const ClickActivitySeasonReq = new ClickActivitySeasonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClickPlayerCardReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ClickPlayerCardReply", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ClickPlayerCardReply
 */
export const ClickPlayerCardReply = new ClickPlayerCardReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClickPlayerCardReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ClickPlayerCardReq", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "action", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { id: 0n, aid: 0n, cid: 0n, action: 0n, spmid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 aid */ 2:
                    message.aid = reader.int64().toBigInt();
                    break;
                case /* int64 cid */ 3:
                    message.cid = reader.int64().toBigInt();
                    break;
                case /* int64 action */ 4:
                    message.action = reader.int64().toBigInt();
                    break;
                case /* string spmid */ 5:
                    message.spmid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 aid = 2; */
        if (message.aid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.aid);
        /* int64 cid = 3; */
        if (message.cid !== 0n)
            writer.tag(3, WireType.Varint).int64(message.cid);
        /* int64 action = 4; */
        if (message.action !== 0n)
            writer.tag(4, WireType.Varint).int64(message.action);
        /* string spmid = 5; */
        if (message.spmid !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.spmid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ClickPlayerCardReq
 */
export const ClickPlayerCardReq = new ClickPlayerCardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CM$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.CM", [
            { no: 1, name: "source_content", kind: "message", T: () => Any }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any source_content */ 1:
                    message.sourceContent = Any.internalBinaryRead(reader, reader.uint32(), options, message.sourceContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* google.protobuf.Any source_content = 1; */
        if (message.sourceContent)
            Any.internalBinaryWrite(message.sourceContent, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.CM
 */
export const CM = new CM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CMConfig$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.CMConfig", [
            { no: 1, name: "ads_control", kind: "message", T: () => Any }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any ads_control */ 1:
                    message.adsControl = Any.internalBinaryRead(reader, reader.uint32(), options, message.adsControl);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* google.protobuf.Any ads_control = 1; */
        if (message.adsControl)
            Any.internalBinaryWrite(message.adsControl, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.CMConfig
 */
export const CMConfig = new CMConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CmIpad$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.CmIpad", [
            { no: 1, name: "cm", kind: "message", T: () => CM },
            { no: 2, name: "author", kind: "message", T: () => Author },
            { no: 3, name: "stat", kind: "message", T: () => Stat },
            { no: 4, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { duration: 0n, aid: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.view.v1.CM cm */ 1:
                    message.cm = CM.internalBinaryRead(reader, reader.uint32(), options, message.cm);
                    break;
                case /* bilibili.app.archive.v1.Author author */ 2:
                    message.author = Author.internalBinaryRead(reader, reader.uint32(), options, message.author);
                    break;
                case /* bilibili.app.archive.v1.Stat stat */ 3:
                    message.stat = Stat.internalBinaryRead(reader, reader.uint32(), options, message.stat);
                    break;
                case /* int64 duration */ 4:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* int64 aid */ 5:
                    message.aid = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.view.v1.CM cm = 1; */
        if (message.cm)
            CM.internalBinaryWrite(message.cm, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.archive.v1.Author author = 2; */
        if (message.author)
            Author.internalBinaryWrite(message.author, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.archive.v1.Stat stat = 3; */
        if (message.stat)
            Stat.internalBinaryWrite(message.stat, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 duration = 4; */
        if (message.duration !== 0n)
            writer.tag(4, WireType.Varint).int64(message.duration);
        /* int64 aid = 5; */
        if (message.aid !== 0n)
            writer.tag(5, WireType.Varint).int64(message.aid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.CmIpad
 */
export const CmIpad = new CmIpad$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CoinCustom$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.CoinCustom", [
            { no: 1, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { toast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string toast */ 1:
                    message.toast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string toast = 1; */
        if (message.toast !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.toast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.CoinCustom
 */
export const CoinCustom = new CoinCustom$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandDm$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.CommandDm", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "command", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "progress", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "ctime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "mtime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "id_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { id: 0n, oid: 0n, mid: 0n, command: "", content: "", progress: 0, ctime: "", mtime: "", extra: "", idStr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 oid */ 2:
                    message.oid = reader.int64().toBigInt();
                    break;
                case /* int64 mid */ 3:
                    message.mid = reader.int64().toBigInt();
                    break;
                case /* string command */ 4:
                    message.command = reader.string();
                    break;
                case /* string content */ 5:
                    message.content = reader.string();
                    break;
                case /* int32 progress */ 6:
                    message.progress = reader.int32();
                    break;
                case /* string ctime */ 7:
                    message.ctime = reader.string();
                    break;
                case /* string mtime */ 8:
                    message.mtime = reader.string();
                    break;
                case /* string extra */ 9:
                    message.extra = reader.string();
                    break;
                case /* string id_str */ 10:
                    message.idStr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 oid = 2; */
        if (message.oid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.oid);
        /* int64 mid = 3; */
        if (message.mid !== 0n)
            writer.tag(3, WireType.Varint).int64(message.mid);
        /* string command = 4; */
        if (message.command !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.command);
        /* string content = 5; */
        if (message.content !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.content);
        /* int32 progress = 6; */
        if (message.progress !== 0)
            writer.tag(6, WireType.Varint).int32(message.progress);
        /* string ctime = 7; */
        if (message.ctime !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.ctime);
        /* string mtime = 8; */
        if (message.mtime !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.mtime);
        /* string extra = 9; */
        if (message.extra !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.extra);
        /* string id_str = 10; */
        if (message.idStr !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.idStr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.CommandDm
 */
export const CommandDm = new CommandDm$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Config$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Config", [
            { no: 1, name: "relates_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "relates_style", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "relate_gif_exp", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "end_page_half", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "end_page_full", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "auto_swindow", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "popup_info", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "abtest_small_window", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "rec_three_point_style", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "is_absolute_time", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "new_swindow", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "relates_biserial", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "listener_conf", kind: "message", T: () => ListenerConfig },
            { no: 14, name: "relates_feed_style", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "relates_feed_popup", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "relates_has_next", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "local_play", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 18, name: "play_story", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "arc_play_story", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 20, name: "story_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "landscape_story", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 22, name: "arc_landscape_story", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 23, name: "landscape_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "show_listen_button", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { relatesTitle: "", relatesStyle: 0, relateGifExp: 0, endPageHalf: 0, endPageFull: 0, autoSwindow: false, popupInfo: false, abtestSmallWindow: "", recThreePointStyle: 0, isAbsoluteTime: false, newSwindow: false, relatesBiserial: false, relatesFeedStyle: "", relatesFeedPopup: false, relatesHasNext: false, localPlay: 0, playStory: false, arcPlayStory: false, storyIcon: "", landscapeStory: false, arcLandscapeStory: false, landscapeIcon: "", showListenButton: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string relates_title */ 1:
                    message.relatesTitle = reader.string();
                    break;
                case /* int32 relates_style */ 2:
                    message.relatesStyle = reader.int32();
                    break;
                case /* int32 relate_gif_exp */ 3:
                    message.relateGifExp = reader.int32();
                    break;
                case /* int32 end_page_half */ 4:
                    message.endPageHalf = reader.int32();
                    break;
                case /* int32 end_page_full */ 5:
                    message.endPageFull = reader.int32();
                    break;
                case /* bool auto_swindow */ 6:
                    message.autoSwindow = reader.bool();
                    break;
                case /* bool popup_info */ 7:
                    message.popupInfo = reader.bool();
                    break;
                case /* string abtest_small_window */ 8:
                    message.abtestSmallWindow = reader.string();
                    break;
                case /* int32 rec_three_point_style */ 9:
                    message.recThreePointStyle = reader.int32();
                    break;
                case /* bool is_absolute_time */ 10:
                    message.isAbsoluteTime = reader.bool();
                    break;
                case /* bool new_swindow */ 11:
                    message.newSwindow = reader.bool();
                    break;
                case /* bool relates_biserial */ 12:
                    message.relatesBiserial = reader.bool();
                    break;
                case /* bilibili.app.view.v1.ListenerConfig listener_conf */ 13:
                    message.listenerConf = ListenerConfig.internalBinaryRead(reader, reader.uint32(), options, message.listenerConf);
                    break;
                case /* string relates_feed_style */ 14:
                    message.relatesFeedStyle = reader.string();
                    break;
                case /* bool relates_feed_popup */ 15:
                    message.relatesFeedPopup = reader.bool();
                    break;
                case /* bool relates_has_next */ 16:
                    message.relatesHasNext = reader.bool();
                    break;
                case /* int32 local_play */ 17:
                    message.localPlay = reader.int32();
                    break;
                case /* bool play_story */ 18:
                    message.playStory = reader.bool();
                    break;
                case /* bool arc_play_story */ 19:
                    message.arcPlayStory = reader.bool();
                    break;
                case /* string story_icon */ 20:
                    message.storyIcon = reader.string();
                    break;
                case /* bool landscape_story */ 21:
                    message.landscapeStory = reader.bool();
                    break;
                case /* bool arc_landscape_story */ 22:
                    message.arcLandscapeStory = reader.bool();
                    break;
                case /* string landscape_icon */ 23:
                    message.landscapeIcon = reader.string();
                    break;
                case /* bool show_listen_button */ 24:
                    message.showListenButton = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string relates_title = 1; */
        if (message.relatesTitle !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.relatesTitle);
        /* int32 relates_style = 2; */
        if (message.relatesStyle !== 0)
            writer.tag(2, WireType.Varint).int32(message.relatesStyle);
        /* int32 relate_gif_exp = 3; */
        if (message.relateGifExp !== 0)
            writer.tag(3, WireType.Varint).int32(message.relateGifExp);
        /* int32 end_page_half = 4; */
        if (message.endPageHalf !== 0)
            writer.tag(4, WireType.Varint).int32(message.endPageHalf);
        /* int32 end_page_full = 5; */
        if (message.endPageFull !== 0)
            writer.tag(5, WireType.Varint).int32(message.endPageFull);
        /* bool auto_swindow = 6; */
        if (message.autoSwindow !== false)
            writer.tag(6, WireType.Varint).bool(message.autoSwindow);
        /* bool popup_info = 7; */
        if (message.popupInfo !== false)
            writer.tag(7, WireType.Varint).bool(message.popupInfo);
        /* string abtest_small_window = 8; */
        if (message.abtestSmallWindow !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.abtestSmallWindow);
        /* int32 rec_three_point_style = 9; */
        if (message.recThreePointStyle !== 0)
            writer.tag(9, WireType.Varint).int32(message.recThreePointStyle);
        /* bool is_absolute_time = 10; */
        if (message.isAbsoluteTime !== false)
            writer.tag(10, WireType.Varint).bool(message.isAbsoluteTime);
        /* bool new_swindow = 11; */
        if (message.newSwindow !== false)
            writer.tag(11, WireType.Varint).bool(message.newSwindow);
        /* bool relates_biserial = 12; */
        if (message.relatesBiserial !== false)
            writer.tag(12, WireType.Varint).bool(message.relatesBiserial);
        /* bilibili.app.view.v1.ListenerConfig listener_conf = 13; */
        if (message.listenerConf)
            ListenerConfig.internalBinaryWrite(message.listenerConf, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* string relates_feed_style = 14; */
        if (message.relatesFeedStyle !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.relatesFeedStyle);
        /* bool relates_feed_popup = 15; */
        if (message.relatesFeedPopup !== false)
            writer.tag(15, WireType.Varint).bool(message.relatesFeedPopup);
        /* bool relates_has_next = 16; */
        if (message.relatesHasNext !== false)
            writer.tag(16, WireType.Varint).bool(message.relatesHasNext);
        /* int32 local_play = 17; */
        if (message.localPlay !== 0)
            writer.tag(17, WireType.Varint).int32(message.localPlay);
        /* bool play_story = 18; */
        if (message.playStory !== false)
            writer.tag(18, WireType.Varint).bool(message.playStory);
        /* bool arc_play_story = 19; */
        if (message.arcPlayStory !== false)
            writer.tag(19, WireType.Varint).bool(message.arcPlayStory);
        /* string story_icon = 20; */
        if (message.storyIcon !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.storyIcon);
        /* bool landscape_story = 21; */
        if (message.landscapeStory !== false)
            writer.tag(21, WireType.Varint).bool(message.landscapeStory);
        /* bool arc_landscape_story = 22; */
        if (message.arcLandscapeStory !== false)
            writer.tag(22, WireType.Varint).bool(message.arcLandscapeStory);
        /* string landscape_icon = 23; */
        if (message.landscapeIcon !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.landscapeIcon);
        /* bool show_listen_button = 24; */
        if (message.showListenButton !== false)
            writer.tag(24, WireType.Varint).bool(message.showListenButton);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Config
 */
export const Config = new Config$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContinuousPlayReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ContinuousPlayReply", [
            { no: 1, name: "relates", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Relate }
        ]);
    }
    create(value) {
        const message = { relates: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.view.v1.Relate relates */ 1:
                    message.relates.push(Relate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.app.view.v1.Relate relates = 1; */
        for (let i = 0; i < message.relates.length; i++)
            Relate.internalBinaryWrite(message.relates[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ContinuousPlayReply
 */
export const ContinuousPlayReply = new ContinuousPlayReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContinuousPlayReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ContinuousPlayReq", [
            { no: 1, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "from", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "trackid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "from_spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "autoplay", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "player_args", kind: "message", T: () => PlayerArgs },
            { no: 8, name: "device_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "display_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { aid: 0n, from: "", trackid: "", spmid: "", fromSpmid: "", autoplay: 0, deviceType: 0n, sessionId: "", displayId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid */ 1:
                    message.aid = reader.int64().toBigInt();
                    break;
                case /* string from */ 2:
                    message.from = reader.string();
                    break;
                case /* string trackid */ 3:
                    message.trackid = reader.string();
                    break;
                case /* string spmid */ 4:
                    message.spmid = reader.string();
                    break;
                case /* string from_spmid */ 5:
                    message.fromSpmid = reader.string();
                    break;
                case /* int32 autoplay */ 6:
                    message.autoplay = reader.int32();
                    break;
                case /* bilibili.app.archive.middleware.v1.PlayerArgs player_args */ 7:
                    message.playerArgs = PlayerArgs.internalBinaryRead(reader, reader.uint32(), options, message.playerArgs);
                    break;
                case /* int64 device_type */ 8:
                    message.deviceType = reader.int64().toBigInt();
                    break;
                case /* string session_id */ 9:
                    message.sessionId = reader.string();
                    break;
                case /* int64 display_id */ 10:
                    message.displayId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 1; */
        if (message.aid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.aid);
        /* string from = 2; */
        if (message.from !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.from);
        /* string trackid = 3; */
        if (message.trackid !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.trackid);
        /* string spmid = 4; */
        if (message.spmid !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.spmid);
        /* string from_spmid = 5; */
        if (message.fromSpmid !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.fromSpmid);
        /* int32 autoplay = 6; */
        if (message.autoplay !== 0)
            writer.tag(6, WireType.Varint).int32(message.autoplay);
        /* bilibili.app.archive.middleware.v1.PlayerArgs player_args = 7; */
        if (message.playerArgs)
            PlayerArgs.internalBinaryWrite(message.playerArgs, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int64 device_type = 8; */
        if (message.deviceType !== 0n)
            writer.tag(8, WireType.Varint).int64(message.deviceType);
        /* string session_id = 9; */
        if (message.sessionId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.sessionId);
        /* int64 display_id = 10; */
        if (message.displayId !== 0n)
            writer.tag(10, WireType.Varint).int64(message.displayId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ContinuousPlayReq
 */
export const ContinuousPlayReq = new ContinuousPlayReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractCard$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ContractCard", [
            { no: 1, name: "display_progress", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "display_accuracy", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "display_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "show_mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "page_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "upper", kind: "message", T: () => UpperInfos },
            { no: 7, name: "is_follow_display", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "text", kind: "message", T: () => ContractText },
            { no: 9, name: "follow_display_end_duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "is_play_display", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "is_interact_display", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "play_display_switch", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { displayProgress: 0, displayAccuracy: 0n, displayDuration: 0n, showMode: 0, pageType: 0, isFollowDisplay: 0, followDisplayEndDuration: 0n, isPlayDisplay: 0, isInteractDisplay: 0, playDisplaySwitch: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float display_progress */ 1:
                    message.displayProgress = reader.float();
                    break;
                case /* int64 display_accuracy */ 2:
                    message.displayAccuracy = reader.int64().toBigInt();
                    break;
                case /* int64 display_duration */ 3:
                    message.displayDuration = reader.int64().toBigInt();
                    break;
                case /* int32 show_mode */ 4:
                    message.showMode = reader.int32();
                    break;
                case /* int32 page_type */ 5:
                    message.pageType = reader.int32();
                    break;
                case /* bilibili.app.view.v1.UpperInfos upper */ 6:
                    message.upper = UpperInfos.internalBinaryRead(reader, reader.uint32(), options, message.upper);
                    break;
                case /* int32 is_follow_display */ 7:
                    message.isFollowDisplay = reader.int32();
                    break;
                case /* bilibili.app.view.v1.ContractText text */ 8:
                    message.text = ContractText.internalBinaryRead(reader, reader.uint32(), options, message.text);
                    break;
                case /* int64 follow_display_end_duration */ 9:
                    message.followDisplayEndDuration = reader.int64().toBigInt();
                    break;
                case /* int32 is_play_display */ 10:
                    message.isPlayDisplay = reader.int32();
                    break;
                case /* int32 is_interact_display */ 11:
                    message.isInteractDisplay = reader.int32();
                    break;
                case /* bool play_display_switch */ 12:
                    message.playDisplaySwitch = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* float display_progress = 1; */
        if (message.displayProgress !== 0)
            writer.tag(1, WireType.Bit32).float(message.displayProgress);
        /* int64 display_accuracy = 2; */
        if (message.displayAccuracy !== 0n)
            writer.tag(2, WireType.Varint).int64(message.displayAccuracy);
        /* int64 display_duration = 3; */
        if (message.displayDuration !== 0n)
            writer.tag(3, WireType.Varint).int64(message.displayDuration);
        /* int32 show_mode = 4; */
        if (message.showMode !== 0)
            writer.tag(4, WireType.Varint).int32(message.showMode);
        /* int32 page_type = 5; */
        if (message.pageType !== 0)
            writer.tag(5, WireType.Varint).int32(message.pageType);
        /* bilibili.app.view.v1.UpperInfos upper = 6; */
        if (message.upper)
            UpperInfos.internalBinaryWrite(message.upper, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* int32 is_follow_display = 7; */
        if (message.isFollowDisplay !== 0)
            writer.tag(7, WireType.Varint).int32(message.isFollowDisplay);
        /* bilibili.app.view.v1.ContractText text = 8; */
        if (message.text)
            ContractText.internalBinaryWrite(message.text, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* int64 follow_display_end_duration = 9; */
        if (message.followDisplayEndDuration !== 0n)
            writer.tag(9, WireType.Varint).int64(message.followDisplayEndDuration);
        /* int32 is_play_display = 10; */
        if (message.isPlayDisplay !== 0)
            writer.tag(10, WireType.Varint).int32(message.isPlayDisplay);
        /* int32 is_interact_display = 11; */
        if (message.isInteractDisplay !== 0)
            writer.tag(11, WireType.Varint).int32(message.isInteractDisplay);
        /* bool play_display_switch = 12; */
        if (message.playDisplaySwitch !== false)
            writer.tag(12, WireType.Varint).bool(message.playDisplaySwitch);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ContractCard
 */
export const ContractCard = new ContractCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContractText$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ContractText", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "subtitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "inline_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { title: "", subtitle: "", inlineTitle: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string subtitle */ 2:
                    message.subtitle = reader.string();
                    break;
                case /* string inline_title */ 3:
                    message.inlineTitle = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string subtitle = 2; */
        if (message.subtitle !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.subtitle);
        /* string inline_title = 3; */
        if (message.inlineTitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.inlineTitle);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ContractText
 */
export const ContractText = new ContractText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreativeContent$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.CreativeContent", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "button_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "video_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "image_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "image_md5", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "log_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "log_md5", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "click_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "show_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { title: "", description: "", buttonTitle: "", videoId: 0n, username: "", imageUrl: "", imageMd5: "", logUrl: "", logMd5: "", url: "", clickUrl: "", showUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* string button_title */ 3:
                    message.buttonTitle = reader.string();
                    break;
                case /* int64 video_id */ 4:
                    message.videoId = reader.int64().toBigInt();
                    break;
                case /* string username */ 5:
                    message.username = reader.string();
                    break;
                case /* string image_url */ 6:
                    message.imageUrl = reader.string();
                    break;
                case /* string image_md5 */ 7:
                    message.imageMd5 = reader.string();
                    break;
                case /* string log_url */ 8:
                    message.logUrl = reader.string();
                    break;
                case /* string log_md5 */ 9:
                    message.logMd5 = reader.string();
                    break;
                case /* string url */ 10:
                    message.url = reader.string();
                    break;
                case /* string click_url */ 11:
                    message.clickUrl = reader.string();
                    break;
                case /* string show_url */ 12:
                    message.showUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* string button_title = 3; */
        if (message.buttonTitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.buttonTitle);
        /* int64 video_id = 4; */
        if (message.videoId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.videoId);
        /* string username = 5; */
        if (message.username !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.username);
        /* string image_url = 6; */
        if (message.imageUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.imageUrl);
        /* string image_md5 = 7; */
        if (message.imageMd5 !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.imageMd5);
        /* string log_url = 8; */
        if (message.logUrl !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.logUrl);
        /* string log_md5 = 9; */
        if (message.logMd5 !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.logMd5);
        /* string url = 10; */
        if (message.url !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.url);
        /* string click_url = 11; */
        if (message.clickUrl !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.clickUrl);
        /* string show_url = 12; */
        if (message.showUrl !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.showUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.CreativeContent
 */
export const CreativeContent = new CreativeContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomConfig$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.CustomConfig", [
            { no: 1, name: "redirect_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { redirectUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string redirect_url */ 1:
                    message.redirectUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string redirect_url = 1; */
        if (message.redirectUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.redirectUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.CustomConfig
 */
export const CustomConfig = new CustomConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DescV2$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.DescV2", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["bilibili.app.view.v1.DescType", DescType] },
            { no: 3, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "rid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { text: "", type: 0, uri: "", rid: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* bilibili.app.view.v1.DescType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string uri */ 3:
                    message.uri = reader.string();
                    break;
                case /* int64 rid */ 4:
                    message.rid = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* bilibili.app.view.v1.DescType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* string uri = 3; */
        if (message.uri !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.uri);
        /* int64 rid = 4; */
        if (message.rid !== 0n)
            writer.tag(4, WireType.Varint).int64(message.rid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.DescV2
 */
export const DescV2 = new DescV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Dislike$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Dislike", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "subtitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "reasons", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DislikeReasons }
        ]);
    }
    create(value) {
        const message = { title: "", subtitle: "", reasons: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string subtitle */ 2:
                    message.subtitle = reader.string();
                    break;
                case /* repeated bilibili.app.view.v1.DislikeReasons reasons */ 3:
                    message.reasons.push(DislikeReasons.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string subtitle = 2; */
        if (message.subtitle !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.subtitle);
        /* repeated bilibili.app.view.v1.DislikeReasons reasons = 3; */
        for (let i = 0; i < message.reasons.length; i++)
            DislikeReasons.internalBinaryWrite(message.reasons[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Dislike
 */
export const Dislike = new Dislike$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DislikeReasons$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.DislikeReasons", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "rid", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "tag_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { id: 0n, mid: 0n, rid: 0, tagId: 0n, name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 mid */ 2:
                    message.mid = reader.int64().toBigInt();
                    break;
                case /* int32 rid */ 3:
                    message.rid = reader.int32();
                    break;
                case /* int64 tag_id */ 4:
                    message.tagId = reader.int64().toBigInt();
                    break;
                case /* string name */ 5:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 mid = 2; */
        if (message.mid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.mid);
        /* int32 rid = 3; */
        if (message.rid !== 0)
            writer.tag(3, WireType.Varint).int32(message.rid);
        /* int64 tag_id = 4; */
        if (message.tagId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.tagId);
        /* string name = 5; */
        if (message.name !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.DislikeReasons
 */
export const DislikeReasons = new DislikeReasons$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DM$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.DM", [
            { no: 1, name: "closed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "real_name", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { closed: false, realName: false, count: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool closed */ 1:
                    message.closed = reader.bool();
                    break;
                case /* bool real_name */ 2:
                    message.realName = reader.bool();
                    break;
                case /* int64 count */ 3:
                    message.count = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool closed = 1; */
        if (message.closed !== false)
            writer.tag(1, WireType.Varint).bool(message.closed);
        /* bool real_name = 2; */
        if (message.realName !== false)
            writer.tag(2, WireType.Varint).bool(message.realName);
        /* int64 count = 3; */
        if (message.count !== 0n)
            writer.tag(3, WireType.Varint).int64(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.DM
 */
export const DM = new DM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ElecRank$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ElecRank", [
            { no: 1, name: "list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ElecRankItem },
            { no: 2, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { list: [], count: 0n, text: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.view.v1.ElecRankItem list */ 1:
                    message.list.push(ElecRankItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 count */ 2:
                    message.count = reader.int64().toBigInt();
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.app.view.v1.ElecRankItem list = 1; */
        for (let i = 0; i < message.list.length; i++)
            ElecRankItem.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 count = 2; */
        if (message.count !== 0n)
            writer.tag(2, WireType.Varint).int64(message.count);
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ElecRank
 */
export const ElecRank = new ElecRank$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ElecRankItem$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ElecRankItem", [
            { no: 1, name: "avatar", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { avatar: "", nickname: "", message: "", mid: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string avatar */ 1:
                    message.avatar = reader.string();
                    break;
                case /* string nickname */ 2:
                    message.nickname = reader.string();
                    break;
                case /* string message */ 3:
                    message.message = reader.string();
                    break;
                case /* int64 mid */ 4:
                    message.mid = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string avatar = 1; */
        if (message.avatar !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.avatar);
        /* string nickname = 2; */
        if (message.nickname !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nickname);
        /* string message = 3; */
        if (message.message !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.message);
        /* int64 mid = 4; */
        if (message.mid !== 0n)
            writer.tag(4, WireType.Varint).int64(message.mid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ElecRankItem
 */
export const ElecRankItem = new ElecRankItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Episode$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Episode", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "coverRightText", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "page", kind: "message", T: () => Page },
            { no: 8, name: "stat", kind: "message", T: () => Stat },
            { no: 9, name: "bvid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "author", kind: "message", T: () => Author },
            { no: 11, name: "author_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "badge_style", kind: "message", T: () => BadgeStyle },
            { no: 13, name: "need_pay", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "episode_pay", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "free_watch", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "first_frame", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { id: 0n, aid: 0n, cid: 0n, title: "", cover: "", coverRightText: "", bvid: "", authorDesc: "", needPay: false, episodePay: false, freeWatch: false, firstFrame: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 aid */ 2:
                    message.aid = reader.int64().toBigInt();
                    break;
                case /* int64 cid */ 3:
                    message.cid = reader.int64().toBigInt();
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* string cover */ 5:
                    message.cover = reader.string();
                    break;
                case /* string coverRightText */ 6:
                    message.coverRightText = reader.string();
                    break;
                case /* bilibili.app.archive.v1.Page page */ 7:
                    message.page = Page.internalBinaryRead(reader, reader.uint32(), options, message.page);
                    break;
                case /* bilibili.app.archive.v1.Stat stat */ 8:
                    message.stat = Stat.internalBinaryRead(reader, reader.uint32(), options, message.stat);
                    break;
                case /* string bvid */ 9:
                    message.bvid = reader.string();
                    break;
                case /* bilibili.app.archive.v1.Author author */ 10:
                    message.author = Author.internalBinaryRead(reader, reader.uint32(), options, message.author);
                    break;
                case /* string author_desc */ 11:
                    message.authorDesc = reader.string();
                    break;
                case /* bilibili.app.view.v1.BadgeStyle badge_style */ 12:
                    message.badgeStyle = BadgeStyle.internalBinaryRead(reader, reader.uint32(), options, message.badgeStyle);
                    break;
                case /* bool need_pay */ 13:
                    message.needPay = reader.bool();
                    break;
                case /* bool episode_pay */ 14:
                    message.episodePay = reader.bool();
                    break;
                case /* bool free_watch */ 15:
                    message.freeWatch = reader.bool();
                    break;
                case /* string first_frame */ 16:
                    message.firstFrame = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 aid = 2; */
        if (message.aid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.aid);
        /* int64 cid = 3; */
        if (message.cid !== 0n)
            writer.tag(3, WireType.Varint).int64(message.cid);
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* string cover = 5; */
        if (message.cover !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.cover);
        /* string coverRightText = 6; */
        if (message.coverRightText !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.coverRightText);
        /* bilibili.app.archive.v1.Page page = 7; */
        if (message.page)
            Page.internalBinaryWrite(message.page, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.archive.v1.Stat stat = 8; */
        if (message.stat)
            Stat.internalBinaryWrite(message.stat, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* string bvid = 9; */
        if (message.bvid !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.bvid);
        /* bilibili.app.archive.v1.Author author = 10; */
        if (message.author)
            Author.internalBinaryWrite(message.author, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* string author_desc = 11; */
        if (message.authorDesc !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.authorDesc);
        /* bilibili.app.view.v1.BadgeStyle badge_style = 12; */
        if (message.badgeStyle)
            BadgeStyle.internalBinaryWrite(message.badgeStyle, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* bool need_pay = 13; */
        if (message.needPay !== false)
            writer.tag(13, WireType.Varint).bool(message.needPay);
        /* bool episode_pay = 14; */
        if (message.episodePay !== false)
            writer.tag(14, WireType.Varint).bool(message.episodePay);
        /* bool free_watch = 15; */
        if (message.freeWatch !== false)
            writer.tag(15, WireType.Varint).bool(message.freeWatch);
        /* string first_frame = 16; */
        if (message.firstFrame !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.firstFrame);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Episode
 */
export const Episode = new Episode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExposePlayerCardReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ExposePlayerCardReq", [
            { no: 1, name: "card_type", kind: "enum", T: () => ["bilibili.app.view.v1.PlayerCardType", PlayerCardType] },
            { no: 2, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { cardType: 0, aid: 0n, cid: 0n, spmid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.view.v1.PlayerCardType card_type */ 1:
                    message.cardType = reader.int32();
                    break;
                case /* int64 aid */ 2:
                    message.aid = reader.int64().toBigInt();
                    break;
                case /* int64 cid */ 3:
                    message.cid = reader.int64().toBigInt();
                    break;
                case /* string spmid */ 4:
                    message.spmid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.view.v1.PlayerCardType card_type = 1; */
        if (message.cardType !== 0)
            writer.tag(1, WireType.Varint).int32(message.cardType);
        /* int64 aid = 2; */
        if (message.aid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.aid);
        /* int64 cid = 3; */
        if (message.cid !== 0n)
            writer.tag(3, WireType.Varint).int64(message.cid);
        /* string spmid = 4; */
        if (message.spmid !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.spmid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ExposePlayerCardReq
 */
export const ExposePlayerCardReq = new ExposePlayerCardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FeedViewItem$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.FeedViewItem", [
            { no: 1, name: "view", kind: "message", T: () => ViewReply },
            { no: 2, name: "goto", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "track_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { goto: "", uri: "", trackId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.view.v1.ViewReply view */ 1:
                    message.view = ViewReply.internalBinaryRead(reader, reader.uint32(), options, message.view);
                    break;
                case /* string goto */ 2:
                    message.goto = reader.string();
                    break;
                case /* string uri */ 3:
                    message.uri = reader.string();
                    break;
                case /* string track_id */ 4:
                    message.trackId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.view.v1.ViewReply view = 1; */
        if (message.view)
            ViewReply.internalBinaryWrite(message.view, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string goto = 2; */
        if (message.goto !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.goto);
        /* string uri = 3; */
        if (message.uri !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.uri);
        /* string track_id = 4; */
        if (message.trackId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.trackId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.FeedViewItem
 */
export const FeedViewItem = new FeedViewItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FeedViewReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.FeedViewReply", [
            { no: 1, name: "list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FeedViewItem },
            { no: 2, name: "has_next", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { list: [], hasNext: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.view.v1.FeedViewItem list */ 1:
                    message.list.push(FeedViewItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool has_next */ 2:
                    message.hasNext = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.app.view.v1.FeedViewItem list = 1; */
        for (let i = 0; i < message.list.length; i++)
            FeedViewItem.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool has_next = 2; */
        if (message.hasNext !== false)
            writer.tag(2, WireType.Varint).bool(message.hasNext);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.FeedViewReply
 */
export const FeedViewReply = new FeedViewReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FeedViewReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.FeedViewReq", [
            { no: 1, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "bvid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "from", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "from_spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "player_args", kind: "message", T: () => PlayerArgs },
            { no: 7, name: "display_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "page_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "from_track_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { aid: 0n, bvid: "", from: "", spmid: "", fromSpmid: "", displayId: 0n, sessionId: "", pageVersion: "", fromTrackId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid */ 1:
                    message.aid = reader.int64().toBigInt();
                    break;
                case /* string bvid */ 2:
                    message.bvid = reader.string();
                    break;
                case /* string from */ 3:
                    message.from = reader.string();
                    break;
                case /* string spmid */ 4:
                    message.spmid = reader.string();
                    break;
                case /* string from_spmid */ 5:
                    message.fromSpmid = reader.string();
                    break;
                case /* bilibili.app.archive.middleware.v1.PlayerArgs player_args */ 6:
                    message.playerArgs = PlayerArgs.internalBinaryRead(reader, reader.uint32(), options, message.playerArgs);
                    break;
                case /* int64 display_id */ 7:
                    message.displayId = reader.int64().toBigInt();
                    break;
                case /* string session_id */ 8:
                    message.sessionId = reader.string();
                    break;
                case /* string page_version */ 9:
                    message.pageVersion = reader.string();
                    break;
                case /* string from_track_id */ 10:
                    message.fromTrackId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 1; */
        if (message.aid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.aid);
        /* string bvid = 2; */
        if (message.bvid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.bvid);
        /* string from = 3; */
        if (message.from !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.from);
        /* string spmid = 4; */
        if (message.spmid !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.spmid);
        /* string from_spmid = 5; */
        if (message.fromSpmid !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.fromSpmid);
        /* bilibili.app.archive.middleware.v1.PlayerArgs player_args = 6; */
        if (message.playerArgs)
            PlayerArgs.internalBinaryWrite(message.playerArgs, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* int64 display_id = 7; */
        if (message.displayId !== 0n)
            writer.tag(7, WireType.Varint).int64(message.displayId);
        /* string session_id = 8; */
        if (message.sessionId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.sessionId);
        /* string page_version = 9; */
        if (message.pageVersion !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.pageVersion);
        /* string from_track_id = 10; */
        if (message.fromTrackId !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.fromTrackId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.FeedViewReq
 */
export const FeedViewReq = new FeedViewReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetArcsPlayerReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.GetArcsPlayerReply", [
            { no: 1, name: "arcs_player", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ArcsPlayer }
        ]);
    }
    create(value) {
        const message = { arcsPlayer: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.view.v1.ArcsPlayer arcs_player */ 1:
                    message.arcsPlayer.push(ArcsPlayer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.app.view.v1.ArcsPlayer arcs_player = 1; */
        for (let i = 0; i < message.arcsPlayer.length; i++)
            ArcsPlayer.internalBinaryWrite(message.arcsPlayer[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.GetArcsPlayerReply
 */
export const GetArcsPlayerReply = new GetArcsPlayerReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetArcsPlayerReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.GetArcsPlayerReq", [
            { no: 1, name: "play_avs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayAv },
            { no: 2, name: "player_args", kind: "message", T: () => PlayerArgs }
        ]);
    }
    create(value) {
        const message = { playAvs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.view.v1.PlayAv play_avs */ 1:
                    message.playAvs.push(PlayAv.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.archive.middleware.v1.PlayerArgs player_args */ 2:
                    message.playerArgs = PlayerArgs.internalBinaryRead(reader, reader.uint32(), options, message.playerArgs);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.app.view.v1.PlayAv play_avs = 1; */
        for (let i = 0; i < message.playAvs.length; i++)
            PlayAv.internalBinaryWrite(message.playAvs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.archive.middleware.v1.PlayerArgs player_args = 2; */
        if (message.playerArgs)
            PlayerArgs.internalBinaryWrite(message.playerArgs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.GetArcsPlayerReq
 */
export const GetArcsPlayerReq = new GetArcsPlayerReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GoodsInfo$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.GoodsInfo", [
            { no: 1, name: "goods_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "category", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "goods_price", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "pay_state", kind: "enum", T: () => ["bilibili.app.view.v1.PayState", PayState] },
            { no: 5, name: "goods_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "price_fmt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { goodsId: "", category: 0, goodsPrice: 0n, payState: 0, goodsName: "", priceFmt: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string goods_id */ 1:
                    message.goodsId = reader.string();
                    break;
                case /* int32 category */ 2:
                    message.category = reader.int32();
                    break;
                case /* int64 goods_price */ 3:
                    message.goodsPrice = reader.int64().toBigInt();
                    break;
                case /* bilibili.app.view.v1.PayState pay_state */ 4:
                    message.payState = reader.int32();
                    break;
                case /* string goods_name */ 5:
                    message.goodsName = reader.string();
                    break;
                case /* string price_fmt */ 6:
                    message.priceFmt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string goods_id = 1; */
        if (message.goodsId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.goodsId);
        /* int32 category = 2; */
        if (message.category !== 0)
            writer.tag(2, WireType.Varint).int32(message.category);
        /* int64 goods_price = 3; */
        if (message.goodsPrice !== 0n)
            writer.tag(3, WireType.Varint).int64(message.goodsPrice);
        /* bilibili.app.view.v1.PayState pay_state = 4; */
        if (message.payState !== 0)
            writer.tag(4, WireType.Varint).int32(message.payState);
        /* string goods_name = 5; */
        if (message.goodsName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.goodsName);
        /* string price_fmt = 6; */
        if (message.priceFmt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.priceFmt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.GoodsInfo
 */
export const GoodsInfo = new GoodsInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class History$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.History", [
            { no: 1, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "progress", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { cid: 0n, progress: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 cid */ 1:
                    message.cid = reader.int64().toBigInt();
                    break;
                case /* int64 progress */ 2:
                    message.progress = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 cid = 1; */
        if (message.cid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.cid);
        /* int64 progress = 2; */
        if (message.progress !== 0n)
            writer.tag(2, WireType.Varint).int64(message.progress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.History
 */
export const History = new History$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Honor$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Honor", [
            { no: 1, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "icon_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "text_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "text_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "bg_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "url_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { icon: "", iconNight: "", text: "", textExtra: "", textColor: "", textColorNight: "", bgColor: "", bgColorNight: "", url: "", urlText: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string icon */ 1:
                    message.icon = reader.string();
                    break;
                case /* string icon_night */ 2:
                    message.iconNight = reader.string();
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                case /* string text_extra */ 4:
                    message.textExtra = reader.string();
                    break;
                case /* string text_color */ 5:
                    message.textColor = reader.string();
                    break;
                case /* string text_color_night */ 6:
                    message.textColorNight = reader.string();
                    break;
                case /* string bg_color */ 7:
                    message.bgColor = reader.string();
                    break;
                case /* string bg_color_night */ 8:
                    message.bgColorNight = reader.string();
                    break;
                case /* string url */ 9:
                    message.url = reader.string();
                    break;
                case /* string url_text */ 10:
                    message.urlText = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string icon = 1; */
        if (message.icon !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.icon);
        /* string icon_night = 2; */
        if (message.iconNight !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.iconNight);
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        /* string text_extra = 4; */
        if (message.textExtra !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.textExtra);
        /* string text_color = 5; */
        if (message.textColor !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.textColor);
        /* string text_color_night = 6; */
        if (message.textColorNight !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.textColorNight);
        /* string bg_color = 7; */
        if (message.bgColor !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.bgColor);
        /* string bg_color_night = 8; */
        if (message.bgColorNight !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.bgColorNight);
        /* string url = 9; */
        if (message.url !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.url);
        /* string url_text = 10; */
        if (message.urlText !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.urlText);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Honor
 */
export const Honor = new Honor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IconData$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.IconData", [
            { no: 1, name: "meta_json", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sprits_img", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { metaJson: "", spritsImg: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string meta_json */ 1:
                    message.metaJson = reader.string();
                    break;
                case /* string sprits_img */ 2:
                    message.spritsImg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string meta_json = 1; */
        if (message.metaJson !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.metaJson);
        /* string sprits_img = 2; */
        if (message.spritsImg !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.spritsImg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.IconData
 */
export const IconData = new IconData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Interaction$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Interaction", [
            { no: 1, name: "history_node", kind: "message", T: () => Node },
            { no: 2, name: "graph_version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "evaluation", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "mark", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { graphVersion: 0n, msg: "", evaluation: "", mark: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.view.v1.Node history_node */ 1:
                    message.historyNode = Node.internalBinaryRead(reader, reader.uint32(), options, message.historyNode);
                    break;
                case /* int64 graph_version */ 2:
                    message.graphVersion = reader.int64().toBigInt();
                    break;
                case /* string msg */ 3:
                    message.msg = reader.string();
                    break;
                case /* string evaluation */ 4:
                    message.evaluation = reader.string();
                    break;
                case /* int64 mark */ 5:
                    message.mark = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.view.v1.Node history_node = 1; */
        if (message.historyNode)
            Node.internalBinaryWrite(message.historyNode, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 graph_version = 2; */
        if (message.graphVersion !== 0n)
            writer.tag(2, WireType.Varint).int64(message.graphVersion);
        /* string msg = 3; */
        if (message.msg !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.msg);
        /* string evaluation = 4; */
        if (message.evaluation !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.evaluation);
        /* int64 mark = 5; */
        if (message.mark !== 0n)
            writer.tag(5, WireType.Varint).int64(message.mark);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Interaction
 */
export const Interaction = new Interaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Label$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Label", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "icon_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "icon_width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "icon_height", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "lottie", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "lottie_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { type: 0, uri: "", icon: "", iconNight: "", iconWidth: 0n, iconHeight: 0n, lottie: "", lottieNight: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string uri */ 2:
                    message.uri = reader.string();
                    break;
                case /* string icon */ 3:
                    message.icon = reader.string();
                    break;
                case /* string icon_night */ 4:
                    message.iconNight = reader.string();
                    break;
                case /* int64 icon_width */ 5:
                    message.iconWidth = reader.int64().toBigInt();
                    break;
                case /* int64 icon_height */ 6:
                    message.iconHeight = reader.int64().toBigInt();
                    break;
                case /* string lottie */ 7:
                    message.lottie = reader.string();
                    break;
                case /* string lottie_night */ 8:
                    message.lottieNight = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string uri = 2; */
        if (message.uri !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uri);
        /* string icon = 3; */
        if (message.icon !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.icon);
        /* string icon_night = 4; */
        if (message.iconNight !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.iconNight);
        /* int64 icon_width = 5; */
        if (message.iconWidth !== 0n)
            writer.tag(5, WireType.Varint).int64(message.iconWidth);
        /* int64 icon_height = 6; */
        if (message.iconHeight !== 0n)
            writer.tag(6, WireType.Varint).int64(message.iconHeight);
        /* string lottie = 7; */
        if (message.lottie !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.lottie);
        /* string lottie_night = 8; */
        if (message.lottieNight !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.lottieNight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Label
 */
export const Label = new Label$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LikeAnimation$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.LikeAnimation", [
            { no: 1, name: "like_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "liked_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "like_animation", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { likeIcon: "", likedIcon: "", likeAnimation: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string like_icon */ 1:
                    message.likeIcon = reader.string();
                    break;
                case /* string liked_icon */ 2:
                    message.likedIcon = reader.string();
                    break;
                case /* string like_animation */ 3:
                    message.likeAnimation = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string like_icon = 1; */
        if (message.likeIcon !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.likeIcon);
        /* string liked_icon = 2; */
        if (message.likedIcon !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.likedIcon);
        /* string like_animation = 3; */
        if (message.likeAnimation !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.likeAnimation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.LikeAnimation
 */
export const LikeAnimation = new LikeAnimation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LikeCustom$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.LikeCustom", [
            { no: 1, name: "like_switch", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "full_to_half_progress", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "non_full_progress", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "update_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { likeSwitch: false, fullToHalfProgress: 0n, nonFullProgress: 0n, updateCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool like_switch */ 1:
                    message.likeSwitch = reader.bool();
                    break;
                case /* int64 full_to_half_progress */ 2:
                    message.fullToHalfProgress = reader.int64().toBigInt();
                    break;
                case /* int64 non_full_progress */ 3:
                    message.nonFullProgress = reader.int64().toBigInt();
                    break;
                case /* int64 update_count */ 4:
                    message.updateCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool like_switch = 1; */
        if (message.likeSwitch !== false)
            writer.tag(1, WireType.Varint).bool(message.likeSwitch);
        /* int64 full_to_half_progress = 2; */
        if (message.fullToHalfProgress !== 0n)
            writer.tag(2, WireType.Varint).int64(message.fullToHalfProgress);
        /* int64 non_full_progress = 3; */
        if (message.nonFullProgress !== 0n)
            writer.tag(3, WireType.Varint).int64(message.nonFullProgress);
        /* int64 update_count = 4; */
        if (message.updateCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.updateCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.LikeCustom
 */
export const LikeCustom = new LikeCustom$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenerConfig$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ListenerConfig", [
            { no: 1, name: "jump_style", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "guide_bar", kind: "message", T: () => ListenerGuideBar }
        ]);
    }
    create(value) {
        const message = { jumpStyle: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 jump_style */ 1:
                    message.jumpStyle = reader.int64().toBigInt();
                    break;
                case /* bilibili.app.view.v1.ListenerGuideBar guide_bar */ 2:
                    message.guideBar = ListenerGuideBar.internalBinaryRead(reader, reader.uint32(), options, message.guideBar);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 jump_style = 1; */
        if (message.jumpStyle !== 0n)
            writer.tag(1, WireType.Varint).int64(message.jumpStyle);
        /* bilibili.app.view.v1.ListenerGuideBar guide_bar = 2; */
        if (message.guideBar)
            ListenerGuideBar.internalBinaryWrite(message.guideBar, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ListenerConfig
 */
export const ListenerConfig = new ListenerConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListenerGuideBar$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ListenerGuideBar", [
            { no: 1, name: "show_strategy", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "btn_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "show_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "background_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { showStrategy: 0n, icon: "", text: "", btnText: "", showTime: 0n, backgroundTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 show_strategy */ 1:
                    message.showStrategy = reader.int64().toBigInt();
                    break;
                case /* string icon */ 2:
                    message.icon = reader.string();
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                case /* string btn_text */ 4:
                    message.btnText = reader.string();
                    break;
                case /* int64 show_time */ 5:
                    message.showTime = reader.int64().toBigInt();
                    break;
                case /* int64 background_time */ 6:
                    message.backgroundTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 show_strategy = 1; */
        if (message.showStrategy !== 0n)
            writer.tag(1, WireType.Varint).int64(message.showStrategy);
        /* string icon = 2; */
        if (message.icon !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.icon);
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        /* string btn_text = 4; */
        if (message.btnText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.btnText);
        /* int64 show_time = 5; */
        if (message.showTime !== 0n)
            writer.tag(5, WireType.Varint).int64(message.showTime);
        /* int64 background_time = 6; */
        if (message.backgroundTime !== 0n)
            writer.tag(6, WireType.Varint).int64(message.backgroundTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ListenerGuideBar
 */
export const ListenerGuideBar = new ListenerGuideBar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Live$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Live", [
            { no: 1, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "roomid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "endpage_uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { mid: 0n, roomid: 0n, uri: "", endpageUri: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 mid */ 1:
                    message.mid = reader.int64().toBigInt();
                    break;
                case /* int64 roomid */ 2:
                    message.roomid = reader.int64().toBigInt();
                    break;
                case /* string uri */ 3:
                    message.uri = reader.string();
                    break;
                case /* string endpage_uri */ 4:
                    message.endpageUri = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 mid = 1; */
        if (message.mid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.mid);
        /* int64 roomid = 2; */
        if (message.roomid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.roomid);
        /* string uri = 3; */
        if (message.uri !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.uri);
        /* string endpage_uri = 4; */
        if (message.endpageUri !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.endpageUri);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Live
 */
export const Live = new Live$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LiveOrderInfo$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.LiveOrderInfo", [
            { no: 1, name: "sid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "live_plan_start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "is_follow", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { sid: 0n, text: "", livePlanStartTime: 0n, isFollow: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 sid */ 1:
                    message.sid = reader.int64().toBigInt();
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                case /* int64 live_plan_start_time */ 3:
                    message.livePlanStartTime = reader.int64().toBigInt();
                    break;
                case /* bool is_follow */ 4:
                    message.isFollow = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 sid = 1; */
        if (message.sid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.sid);
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        /* int64 live_plan_start_time = 3; */
        if (message.livePlanStartTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.livePlanStartTime);
        /* bool is_follow = 4; */
        if (message.isFollow !== false)
            writer.tag(4, WireType.Varint).bool(message.isFollow);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.LiveOrderInfo
 */
export const LiveOrderInfo = new LiveOrderInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MaterialLeft$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.MaterialLeft", [
            { no: 1, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "left_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "param", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "operational_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "static_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { icon: "", text: "", url: "", leftType: "", param: "", operationalType: "", staticIcon: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string icon */ 1:
                    message.icon = reader.string();
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                case /* string url */ 3:
                    message.url = reader.string();
                    break;
                case /* string left_type */ 4:
                    message.leftType = reader.string();
                    break;
                case /* string param */ 5:
                    message.param = reader.string();
                    break;
                case /* string operational_type */ 6:
                    message.operationalType = reader.string();
                    break;
                case /* string static_icon */ 7:
                    message.staticIcon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string icon = 1; */
        if (message.icon !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.icon);
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        /* string url = 3; */
        if (message.url !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.url);
        /* string left_type = 4; */
        if (message.leftType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.leftType);
        /* string param = 5; */
        if (message.param !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.param);
        /* string operational_type = 6; */
        if (message.operationalType !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.operationalType);
        /* string static_icon = 7; */
        if (message.staticIcon !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.staticIcon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.MaterialLeft
 */
export const MaterialLeft = new MaterialLeft$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MaterialRes$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.MaterialRes", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type", kind: "enum", T: () => ["bilibili.app.view.v1.MaterialSource", MaterialSource] },
            { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "bg_pic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "jump_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { id: 0n, icon: "", url: "", type: 0, name: "", bgColor: "", bgPic: "", jumpType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string icon */ 2:
                    message.icon = reader.string();
                    break;
                case /* string url */ 3:
                    message.url = reader.string();
                    break;
                case /* bilibili.app.view.v1.MaterialSource type */ 4:
                    message.type = reader.int32();
                    break;
                case /* string name */ 5:
                    message.name = reader.string();
                    break;
                case /* string bg_color */ 6:
                    message.bgColor = reader.string();
                    break;
                case /* string bg_pic */ 7:
                    message.bgPic = reader.string();
                    break;
                case /* int32 jump_type */ 8:
                    message.jumpType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string icon = 2; */
        if (message.icon !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.icon);
        /* string url = 3; */
        if (message.url !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.url);
        /* bilibili.app.view.v1.MaterialSource type = 4; */
        if (message.type !== 0)
            writer.tag(4, WireType.Varint).int32(message.type);
        /* string name = 5; */
        if (message.name !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        /* string bg_color = 6; */
        if (message.bgColor !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.bgColor);
        /* string bg_pic = 7; */
        if (message.bgPic !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.bgPic);
        /* int32 jump_type = 8; */
        if (message.jumpType !== 0)
            writer.tag(8, WireType.Varint).int32(message.jumpType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.MaterialRes
 */
export const MaterialRes = new MaterialRes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Node$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Node", [
            { no: 1, name: "node_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { nodeId: 0n, title: "", cid: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 node_id */ 1:
                    message.nodeId = reader.int64().toBigInt();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* int64 cid */ 3:
                    message.cid = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 node_id = 1; */
        if (message.nodeId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.nodeId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* int64 cid = 3; */
        if (message.cid !== 0n)
            writer.tag(3, WireType.Varint).int64(message.cid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Node
 */
export const Node = new Node$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NoReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.NoReply", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.NoReply
 */
export const NoReply = new NoReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Notice$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Notice", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { title: "", desc: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string desc */ 2:
                    message.desc = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string desc = 2; */
        if (message.desc !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.desc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Notice
 */
export const Notice = new Notice$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OfficialVerify$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.OfficialVerify", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { type: 0, desc: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string desc */ 2:
                    message.desc = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string desc = 2; */
        if (message.desc !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.desc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.OfficialVerify
 */
export const OfficialVerify = new OfficialVerify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Online$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Online", [
            { no: 1, name: "online_show", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "player_online_logo", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { onlineShow: false, playerOnlineLogo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool online_show */ 1:
                    message.onlineShow = reader.bool();
                    break;
                case /* string player_online_logo */ 2:
                    message.playerOnlineLogo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool online_show = 1; */
        if (message.onlineShow !== false)
            writer.tag(1, WireType.Varint).bool(message.onlineShow);
        /* string player_online_logo = 2; */
        if (message.playerOnlineLogo !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.playerOnlineLogo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Online
 */
export const Online = new Online$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OnwerExt$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.OnwerExt", [
            { no: 1, name: "official_verify", kind: "message", T: () => OfficialVerify },
            { no: 2, name: "live", kind: "message", T: () => Live },
            { no: 3, name: "vip", kind: "message", T: () => Vip },
            { no: 4, name: "assists", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "fans", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "arc_count", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { assists: [], fans: 0n, arcCount: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.view.v1.OfficialVerify official_verify */ 1:
                    message.officialVerify = OfficialVerify.internalBinaryRead(reader, reader.uint32(), options, message.officialVerify);
                    break;
                case /* bilibili.app.view.v1.Live live */ 2:
                    message.live = Live.internalBinaryRead(reader, reader.uint32(), options, message.live);
                    break;
                case /* bilibili.app.view.v1.Vip vip */ 3:
                    message.vip = Vip.internalBinaryRead(reader, reader.uint32(), options, message.vip);
                    break;
                case /* repeated int64 assists */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.assists.push(reader.int64().toBigInt());
                    else
                        message.assists.push(reader.int64().toBigInt());
                    break;
                case /* int64 fans */ 5:
                    message.fans = reader.int64().toBigInt();
                    break;
                case /* string arc_count */ 6:
                    message.arcCount = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.view.v1.OfficialVerify official_verify = 1; */
        if (message.officialVerify)
            OfficialVerify.internalBinaryWrite(message.officialVerify, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.Live live = 2; */
        if (message.live)
            Live.internalBinaryWrite(message.live, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.Vip vip = 3; */
        if (message.vip)
            Vip.internalBinaryWrite(message.vip, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated int64 assists = 4; */
        if (message.assists.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.assists.length; i++)
                writer.int64(message.assists[i]);
            writer.join();
        }
        /* int64 fans = 5; */
        if (message.fans !== 0n)
            writer.tag(5, WireType.Varint).int64(message.fans);
        /* string arc_count = 6; */
        if (message.arcCount !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.arcCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.OnwerExt
 */
export const OnwerExt = new OnwerExt$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OperationCard$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.OperationCard", [
            { no: 1, name: "start_time", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "end_time", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "button_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { startTime: 0, endTime: 0, icon: "", title: "", buttonText: "", url: "", content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 start_time */ 1:
                    message.startTime = reader.int32();
                    break;
                case /* int32 end_time */ 2:
                    message.endTime = reader.int32();
                    break;
                case /* string icon */ 3:
                    message.icon = reader.string();
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* string button_text */ 5:
                    message.buttonText = reader.string();
                    break;
                case /* string url */ 6:
                    message.url = reader.string();
                    break;
                case /* string content */ 7:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 start_time = 1; */
        if (message.startTime !== 0)
            writer.tag(1, WireType.Varint).int32(message.startTime);
        /* int32 end_time = 2; */
        if (message.endTime !== 0)
            writer.tag(2, WireType.Varint).int32(message.endTime);
        /* string icon = 3; */
        if (message.icon !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.icon);
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* string button_text = 5; */
        if (message.buttonText !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.buttonText);
        /* string url = 6; */
        if (message.url !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.url);
        /* string content = 7; */
        if (message.content !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.OperationCard
 */
export const OperationCard = new OperationCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OperationCardNew$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.OperationCardNew", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "from", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "to", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "status", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "card_type", kind: "enum", T: () => ["bilibili.app.view.v1.OperationCardType", OperationCardType] },
            { no: 6, name: "standard", kind: "message", oneof: "render", T: () => StandardCard },
            { no: 7, name: "skip", kind: "message", oneof: "render", T: () => OperationCard },
            { no: 8, name: "biz_type", kind: "enum", T: () => ["bilibili.app.view.v1.BizType", BizType] },
            { no: 9, name: "follow", kind: "message", oneof: "param", T: () => BizFollowVideoParam },
            { no: 10, name: "reserve", kind: "message", oneof: "param", T: () => BizReserveActivityParam },
            { no: 11, name: "jump", kind: "message", oneof: "param", T: () => BizJumpLinkParam },
            { no: 12, name: "game", kind: "message", oneof: "param", T: () => BizReserveGameParam }
        ]);
    }
    create(value) {
        const message = { id: 0n, from: 0, to: 0, status: false, cardType: 0, render: { oneofKind: undefined }, bizType: 0, param: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int32 from */ 2:
                    message.from = reader.int32();
                    break;
                case /* int32 to */ 3:
                    message.to = reader.int32();
                    break;
                case /* bool status */ 4:
                    message.status = reader.bool();
                    break;
                case /* bilibili.app.view.v1.OperationCardType card_type */ 5:
                    message.cardType = reader.int32();
                    break;
                case /* bilibili.app.view.v1.StandardCard standard */ 6:
                    message.render = {
                        oneofKind: "standard",
                        standard: StandardCard.internalBinaryRead(reader, reader.uint32(), options, message.render.standard)
                    };
                    break;
                case /* bilibili.app.view.v1.OperationCard skip */ 7:
                    message.render = {
                        oneofKind: "skip",
                        skip: OperationCard.internalBinaryRead(reader, reader.uint32(), options, message.render.skip)
                    };
                    break;
                case /* bilibili.app.view.v1.BizType biz_type */ 8:
                    message.bizType = reader.int32();
                    break;
                case /* bilibili.app.view.v1.BizFollowVideoParam follow */ 9:
                    message.param = {
                        oneofKind: "follow",
                        follow: BizFollowVideoParam.internalBinaryRead(reader, reader.uint32(), options, message.param.follow)
                    };
                    break;
                case /* bilibili.app.view.v1.BizReserveActivityParam reserve */ 10:
                    message.param = {
                        oneofKind: "reserve",
                        reserve: BizReserveActivityParam.internalBinaryRead(reader, reader.uint32(), options, message.param.reserve)
                    };
                    break;
                case /* bilibili.app.view.v1.BizJumpLinkParam jump */ 11:
                    message.param = {
                        oneofKind: "jump",
                        jump: BizJumpLinkParam.internalBinaryRead(reader, reader.uint32(), options, message.param.jump)
                    };
                    break;
                case /* bilibili.app.view.v1.BizReserveGameParam game */ 12:
                    message.param = {
                        oneofKind: "game",
                        game: BizReserveGameParam.internalBinaryRead(reader, reader.uint32(), options, message.param.game)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int32 from = 2; */
        if (message.from !== 0)
            writer.tag(2, WireType.Varint).int32(message.from);
        /* int32 to = 3; */
        if (message.to !== 0)
            writer.tag(3, WireType.Varint).int32(message.to);
        /* bool status = 4; */
        if (message.status !== false)
            writer.tag(4, WireType.Varint).bool(message.status);
        /* bilibili.app.view.v1.OperationCardType card_type = 5; */
        if (message.cardType !== 0)
            writer.tag(5, WireType.Varint).int32(message.cardType);
        /* bilibili.app.view.v1.StandardCard standard = 6; */
        if (message.render.oneofKind === "standard")
            StandardCard.internalBinaryWrite(message.render.standard, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.OperationCard skip = 7; */
        if (message.render.oneofKind === "skip")
            OperationCard.internalBinaryWrite(message.render.skip, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.BizType biz_type = 8; */
        if (message.bizType !== 0)
            writer.tag(8, WireType.Varint).int32(message.bizType);
        /* bilibili.app.view.v1.BizFollowVideoParam follow = 9; */
        if (message.param.oneofKind === "follow")
            BizFollowVideoParam.internalBinaryWrite(message.param.follow, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.BizReserveActivityParam reserve = 10; */
        if (message.param.oneofKind === "reserve")
            BizReserveActivityParam.internalBinaryWrite(message.param.reserve, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.BizJumpLinkParam jump = 11; */
        if (message.param.oneofKind === "jump")
            BizJumpLinkParam.internalBinaryWrite(message.param.jump, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.BizReserveGameParam game = 12; */
        if (message.param.oneofKind === "game")
            BizReserveGameParam.internalBinaryWrite(message.param.game, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.OperationCardNew
 */
export const OperationCardNew = new OperationCardNew$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OperationCardV2$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.OperationCardV2", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "from", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "to", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "status", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "biz_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "content", kind: "message", T: () => OperationCardV2Content },
            { no: 7, name: "BizFollowVideoParam", kind: "message", jsonName: "BizFollowVideoParam", oneof: "param", T: () => BizFollowVideoParam },
            { no: 8, name: "BizReserveActivityParam", kind: "message", jsonName: "BizReserveActivityParam", oneof: "param", T: () => BizReserveActivityParam },
            { no: 9, name: "BizJumpLinkParam", kind: "message", jsonName: "BizJumpLinkParam", oneof: "param", T: () => BizJumpLinkParam },
            { no: 10, name: "BizReserveGameParam", kind: "message", jsonName: "BizReserveGameParam", oneof: "param", T: () => BizReserveGameParam }
        ]);
    }
    create(value) {
        const message = { id: 0n, from: 0, to: 0, status: false, bizType: 0, param: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int32 from */ 2:
                    message.from = reader.int32();
                    break;
                case /* int32 to */ 3:
                    message.to = reader.int32();
                    break;
                case /* bool status */ 4:
                    message.status = reader.bool();
                    break;
                case /* int32 biz_type */ 5:
                    message.bizType = reader.int32();
                    break;
                case /* bilibili.app.view.v1.OperationCardV2Content content */ 6:
                    message.content = OperationCardV2Content.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                case /* bilibili.app.view.v1.BizFollowVideoParam BizFollowVideoParam = 7 [json_name = "BizFollowVideoParam"];*/ 7:
                    message.param = {
                        oneofKind: "bizFollowVideoParam",
                        bizFollowVideoParam: BizFollowVideoParam.internalBinaryRead(reader, reader.uint32(), options, message.param.bizFollowVideoParam)
                    };
                    break;
                case /* bilibili.app.view.v1.BizReserveActivityParam BizReserveActivityParam = 8 [json_name = "BizReserveActivityParam"];*/ 8:
                    message.param = {
                        oneofKind: "bizReserveActivityParam",
                        bizReserveActivityParam: BizReserveActivityParam.internalBinaryRead(reader, reader.uint32(), options, message.param.bizReserveActivityParam)
                    };
                    break;
                case /* bilibili.app.view.v1.BizJumpLinkParam BizJumpLinkParam = 9 [json_name = "BizJumpLinkParam"];*/ 9:
                    message.param = {
                        oneofKind: "bizJumpLinkParam",
                        bizJumpLinkParam: BizJumpLinkParam.internalBinaryRead(reader, reader.uint32(), options, message.param.bizJumpLinkParam)
                    };
                    break;
                case /* bilibili.app.view.v1.BizReserveGameParam BizReserveGameParam = 10 [json_name = "BizReserveGameParam"];*/ 10:
                    message.param = {
                        oneofKind: "bizReserveGameParam",
                        bizReserveGameParam: BizReserveGameParam.internalBinaryRead(reader, reader.uint32(), options, message.param.bizReserveGameParam)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int32 from = 2; */
        if (message.from !== 0)
            writer.tag(2, WireType.Varint).int32(message.from);
        /* int32 to = 3; */
        if (message.to !== 0)
            writer.tag(3, WireType.Varint).int32(message.to);
        /* bool status = 4; */
        if (message.status !== false)
            writer.tag(4, WireType.Varint).bool(message.status);
        /* int32 biz_type = 5; */
        if (message.bizType !== 0)
            writer.tag(5, WireType.Varint).int32(message.bizType);
        /* bilibili.app.view.v1.OperationCardV2Content content = 6; */
        if (message.content)
            OperationCardV2Content.internalBinaryWrite(message.content, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.BizFollowVideoParam BizFollowVideoParam = 7 [json_name = "BizFollowVideoParam"]; */
        if (message.param.oneofKind === "bizFollowVideoParam")
            BizFollowVideoParam.internalBinaryWrite(message.param.bizFollowVideoParam, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.BizReserveActivityParam BizReserveActivityParam = 8 [json_name = "BizReserveActivityParam"]; */
        if (message.param.oneofKind === "bizReserveActivityParam")
            BizReserveActivityParam.internalBinaryWrite(message.param.bizReserveActivityParam, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.BizJumpLinkParam BizJumpLinkParam = 9 [json_name = "BizJumpLinkParam"]; */
        if (message.param.oneofKind === "bizJumpLinkParam")
            BizJumpLinkParam.internalBinaryWrite(message.param.bizJumpLinkParam, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.BizReserveGameParam BizReserveGameParam = 10 [json_name = "BizReserveGameParam"]; */
        if (message.param.oneofKind === "bizReserveGameParam")
            BizReserveGameParam.internalBinaryWrite(message.param.bizReserveGameParam, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.OperationCardV2
 */
export const OperationCardV2 = new OperationCardV2$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OperationCardV2Content$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.OperationCardV2Content", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "subtitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "button_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "button_selected_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "show_selected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { title: "", subtitle: "", icon: "", buttonTitle: "", buttonSelectedTitle: "", showSelected: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string subtitle */ 2:
                    message.subtitle = reader.string();
                    break;
                case /* string icon */ 3:
                    message.icon = reader.string();
                    break;
                case /* string button_title */ 4:
                    message.buttonTitle = reader.string();
                    break;
                case /* string button_selected_title */ 5:
                    message.buttonSelectedTitle = reader.string();
                    break;
                case /* bool show_selected */ 6:
                    message.showSelected = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string subtitle = 2; */
        if (message.subtitle !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.subtitle);
        /* string icon = 3; */
        if (message.icon !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.icon);
        /* string button_title = 4; */
        if (message.buttonTitle !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.buttonTitle);
        /* string button_selected_title = 5; */
        if (message.buttonSelectedTitle !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.buttonSelectedTitle);
        /* bool show_selected = 6; */
        if (message.showSelected !== false)
            writer.tag(6, WireType.Varint).bool(message.showSelected);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.OperationCardV2Content
 */
export const OperationCardV2Content = new OperationCardV2Content$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OperationRelate$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.OperationRelate", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "relate_item", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RelateItem },
            { no: 3, name: "ai_relate_item", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Relate }
        ]);
    }
    create(value) {
        const message = { title: "", relateItem: [], aiRelateItem: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* repeated bilibili.app.view.v1.RelateItem relate_item */ 2:
                    message.relateItem.push(RelateItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated bilibili.app.view.v1.Relate ai_relate_item */ 3:
                    message.aiRelateItem.push(Relate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* repeated bilibili.app.view.v1.RelateItem relate_item = 2; */
        for (let i = 0; i < message.relateItem.length; i++)
            RelateItem.internalBinaryWrite(message.relateItem[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.view.v1.Relate ai_relate_item = 3; */
        for (let i = 0; i < message.aiRelateItem.length; i++)
            Relate.internalBinaryWrite(message.aiRelateItem[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.OperationRelate
 */
export const OperationRelate = new OperationRelate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Order$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Order", [
            { no: 1, name: "status", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "button_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "button_selected_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "season_stat_view", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "season_stat_danmaku", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "order_type", kind: "enum", T: () => ["bilibili.app.view.v1.BizType", BizType] },
            { no: 8, name: "reserve", kind: "message", oneof: "orderParam", T: () => BizReserveActivityParam },
            { no: 9, name: "fav_season", kind: "message", oneof: "orderParam", T: () => BizFavSeasonParam },
            { no: 10, name: "intro", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { status: false, title: "", buttonTitle: "", buttonSelectedTitle: "", seasonStatView: 0n, seasonStatDanmaku: 0n, orderType: 0, orderParam: { oneofKind: undefined }, intro: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool status */ 1:
                    message.status = reader.bool();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string button_title */ 3:
                    message.buttonTitle = reader.string();
                    break;
                case /* string button_selected_title */ 4:
                    message.buttonSelectedTitle = reader.string();
                    break;
                case /* int64 season_stat_view */ 5:
                    message.seasonStatView = reader.int64().toBigInt();
                    break;
                case /* int64 season_stat_danmaku */ 6:
                    message.seasonStatDanmaku = reader.int64().toBigInt();
                    break;
                case /* bilibili.app.view.v1.BizType order_type */ 7:
                    message.orderType = reader.int32();
                    break;
                case /* bilibili.app.view.v1.BizReserveActivityParam reserve */ 8:
                    message.orderParam = {
                        oneofKind: "reserve",
                        reserve: BizReserveActivityParam.internalBinaryRead(reader, reader.uint32(), options, message.orderParam.reserve)
                    };
                    break;
                case /* bilibili.app.view.v1.BizFavSeasonParam fav_season */ 9:
                    message.orderParam = {
                        oneofKind: "favSeason",
                        favSeason: BizFavSeasonParam.internalBinaryRead(reader, reader.uint32(), options, message.orderParam.favSeason)
                    };
                    break;
                case /* string intro */ 10:
                    message.intro = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool status = 1; */
        if (message.status !== false)
            writer.tag(1, WireType.Varint).bool(message.status);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string button_title = 3; */
        if (message.buttonTitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.buttonTitle);
        /* string button_selected_title = 4; */
        if (message.buttonSelectedTitle !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.buttonSelectedTitle);
        /* int64 season_stat_view = 5; */
        if (message.seasonStatView !== 0n)
            writer.tag(5, WireType.Varint).int64(message.seasonStatView);
        /* int64 season_stat_danmaku = 6; */
        if (message.seasonStatDanmaku !== 0n)
            writer.tag(6, WireType.Varint).int64(message.seasonStatDanmaku);
        /* bilibili.app.view.v1.BizType order_type = 7; */
        if (message.orderType !== 0)
            writer.tag(7, WireType.Varint).int32(message.orderType);
        /* bilibili.app.view.v1.BizReserveActivityParam reserve = 8; */
        if (message.orderParam.oneofKind === "reserve")
            BizReserveActivityParam.internalBinaryWrite(message.orderParam.reserve, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.BizFavSeasonParam fav_season = 9; */
        if (message.orderParam.oneofKind === "favSeason")
            BizFavSeasonParam.internalBinaryWrite(message.orderParam.favSeason, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string intro = 10; */
        if (message.intro !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.intro);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Order
 */
export const Order = new Order$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PackInfo$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.PackInfo", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { title: "", uri: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string uri */ 2:
                    message.uri = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string uri = 2; */
        if (message.uri !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uri);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.PackInfo
 */
export const PackInfo = new PackInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayAv$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.PlayAv", [
            { no: 1, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { aid: 0n, cid: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid */ 1:
                    message.aid = reader.int64().toBigInt();
                    break;
                case /* int64 cid */ 2:
                    message.cid = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 1; */
        if (message.aid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.aid);
        /* int64 cid = 2; */
        if (message.cid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.cid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.PlayAv
 */
export const PlayAv = new PlayAv$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerIcon$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.PlayerIcon", [
            { no: 1, name: "url1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "hash1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "url2", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "hash2", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "drag_left_png", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "middle_png", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "drag_right_png", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "drag_data", kind: "message", T: () => IconData },
            { no: 9, name: "nodrag_data", kind: "message", T: () => IconData }
        ]);
    }
    create(value) {
        const message = { url1: "", hash1: "", url2: "", hash2: "", dragLeftPng: "", middlePng: "", dragRightPng: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url1 */ 1:
                    message.url1 = reader.string();
                    break;
                case /* string hash1 */ 2:
                    message.hash1 = reader.string();
                    break;
                case /* string url2 */ 3:
                    message.url2 = reader.string();
                    break;
                case /* string hash2 */ 4:
                    message.hash2 = reader.string();
                    break;
                case /* string drag_left_png */ 5:
                    message.dragLeftPng = reader.string();
                    break;
                case /* string middle_png */ 6:
                    message.middlePng = reader.string();
                    break;
                case /* string drag_right_png */ 7:
                    message.dragRightPng = reader.string();
                    break;
                case /* bilibili.app.view.v1.IconData drag_data */ 8:
                    message.dragData = IconData.internalBinaryRead(reader, reader.uint32(), options, message.dragData);
                    break;
                case /* bilibili.app.view.v1.IconData nodrag_data */ 9:
                    message.nodragData = IconData.internalBinaryRead(reader, reader.uint32(), options, message.nodragData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string url1 = 1; */
        if (message.url1 !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url1);
        /* string hash1 = 2; */
        if (message.hash1 !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.hash1);
        /* string url2 = 3; */
        if (message.url2 !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.url2);
        /* string hash2 = 4; */
        if (message.hash2 !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.hash2);
        /* string drag_left_png = 5; */
        if (message.dragLeftPng !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.dragLeftPng);
        /* string middle_png = 6; */
        if (message.middlePng !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.middlePng);
        /* string drag_right_png = 7; */
        if (message.dragRightPng !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.dragRightPng);
        /* bilibili.app.view.v1.IconData drag_data = 8; */
        if (message.dragData)
            IconData.internalBinaryWrite(message.dragData, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.IconData nodrag_data = 9; */
        if (message.nodragData)
            IconData.internalBinaryWrite(message.nodragData, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.PlayerIcon
 */
export const PlayerIcon = new PlayerIcon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerRelatesReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.PlayerRelatesReply", [
            { no: 1, name: "list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Relate }
        ]);
    }
    create(value) {
        const message = { list: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.view.v1.Relate list */ 1:
                    message.list.push(Relate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.app.view.v1.Relate list = 1; */
        for (let i = 0; i < message.list.length; i++)
            Relate.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.PlayerRelatesReply
 */
export const PlayerRelatesReply = new PlayerRelatesReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerRelatesReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.PlayerRelatesReq", [
            { no: 1, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "bvid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "from", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "from_spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "player_args", kind: "message", T: () => PlayerArgs },
            { no: 7, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "from_track_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { aid: 0n, bvid: "", from: "", spmid: "", fromSpmid: "", sessionId: "", fromTrackId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid */ 1:
                    message.aid = reader.int64().toBigInt();
                    break;
                case /* string bvid */ 2:
                    message.bvid = reader.string();
                    break;
                case /* string from */ 3:
                    message.from = reader.string();
                    break;
                case /* string spmid */ 4:
                    message.spmid = reader.string();
                    break;
                case /* string from_spmid */ 5:
                    message.fromSpmid = reader.string();
                    break;
                case /* bilibili.app.archive.middleware.v1.PlayerArgs player_args */ 6:
                    message.playerArgs = PlayerArgs.internalBinaryRead(reader, reader.uint32(), options, message.playerArgs);
                    break;
                case /* string session_id */ 7:
                    message.sessionId = reader.string();
                    break;
                case /* string from_track_id */ 8:
                    message.fromTrackId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 1; */
        if (message.aid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.aid);
        /* string bvid = 2; */
        if (message.bvid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.bvid);
        /* string from = 3; */
        if (message.from !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.from);
        /* string spmid = 4; */
        if (message.spmid !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.spmid);
        /* string from_spmid = 5; */
        if (message.fromSpmid !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.fromSpmid);
        /* bilibili.app.archive.middleware.v1.PlayerArgs player_args = 6; */
        if (message.playerArgs)
            PlayerArgs.internalBinaryWrite(message.playerArgs, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string session_id = 7; */
        if (message.sessionId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.sessionId);
        /* string from_track_id = 8; */
        if (message.fromTrackId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.fromTrackId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.PlayerRelatesReq
 */
export const PlayerRelatesReq = new PlayerRelatesReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PointMaterial$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.PointMaterial", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "material_source", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { url: "", materialSource: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                case /* int32 material_source */ 2:
                    message.materialSource = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        /* int32 material_source = 2; */
        if (message.materialSource !== 0)
            writer.tag(2, WireType.Varint).int32(message.materialSource);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.PointMaterial
 */
export const PointMaterial = new PointMaterial$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PowerIconStyle$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.PowerIconStyle", [
            { no: 1, name: "icon_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "icon_night_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "icon_width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "icon_height", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { iconUrl: "", iconNightUrl: "", iconWidth: 0n, iconHeight: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string icon_url */ 1:
                    message.iconUrl = reader.string();
                    break;
                case /* string icon_night_url */ 2:
                    message.iconNightUrl = reader.string();
                    break;
                case /* int64 icon_width */ 3:
                    message.iconWidth = reader.int64().toBigInt();
                    break;
                case /* int64 icon_height */ 4:
                    message.iconHeight = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string icon_url = 1; */
        if (message.iconUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.iconUrl);
        /* string icon_night_url = 2; */
        if (message.iconNightUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.iconNightUrl);
        /* int64 icon_width = 3; */
        if (message.iconWidth !== 0n)
            writer.tag(3, WireType.Varint).int64(message.iconWidth);
        /* int64 icon_height = 4; */
        if (message.iconHeight !== 0n)
            writer.tag(4, WireType.Varint).int64(message.iconHeight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.PowerIconStyle
 */
export const PowerIconStyle = new PowerIconStyle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Premiere$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Premiere", [
            { no: 1, name: "premiere_state", kind: "enum", T: () => ["bilibili.app.view.v1.PremiereState", PremiereState] },
            { no: 2, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "service_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "room_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { premiereState: 0, startTime: 0n, serviceTime: 0n, roomId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.view.v1.PremiereState premiere_state */ 1:
                    message.premiereState = reader.int32();
                    break;
                case /* int64 start_time */ 2:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* int64 service_time */ 3:
                    message.serviceTime = reader.int64().toBigInt();
                    break;
                case /* int64 room_id */ 4:
                    message.roomId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.view.v1.PremiereState premiere_state = 1; */
        if (message.premiereState !== 0)
            writer.tag(1, WireType.Varint).int32(message.premiereState);
        /* int64 start_time = 2; */
        if (message.startTime !== 0n)
            writer.tag(2, WireType.Varint).int64(message.startTime);
        /* int64 service_time = 3; */
        if (message.serviceTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.serviceTime);
        /* int64 room_id = 4; */
        if (message.roomId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.roomId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Premiere
 */
export const Premiere = new Premiere$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PremiereArchiveReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.PremiereArchiveReply", [
            { no: 1, name: "premiere", kind: "message", T: () => Premiere },
            { no: 2, name: "risk_status", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "risk_reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { riskStatus: false, riskReason: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.view.v1.Premiere premiere */ 1:
                    message.premiere = Premiere.internalBinaryRead(reader, reader.uint32(), options, message.premiere);
                    break;
                case /* bool risk_status */ 2:
                    message.riskStatus = reader.bool();
                    break;
                case /* string risk_reason */ 3:
                    message.riskReason = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.view.v1.Premiere premiere = 1; */
        if (message.premiere)
            Premiere.internalBinaryWrite(message.premiere, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool risk_status = 2; */
        if (message.riskStatus !== false)
            writer.tag(2, WireType.Varint).bool(message.riskStatus);
        /* string risk_reason = 3; */
        if (message.riskReason !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.riskReason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.PremiereArchiveReply
 */
export const PremiereArchiveReply = new PremiereArchiveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PremiereArchiveReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.PremiereArchiveReq", [
            { no: 1, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { aid: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid */ 1:
                    message.aid = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 1; */
        if (message.aid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.aid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.PremiereArchiveReq
 */
export const PremiereArchiveReq = new PremiereArchiveReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PremiereReserve$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.PremiereReserve", [
            { no: 1, name: "reserve_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "is_follow", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { reserveId: 0n, count: 0n, isFollow: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 reserve_id */ 1:
                    message.reserveId = reader.int64().toBigInt();
                    break;
                case /* int64 count */ 2:
                    message.count = reader.int64().toBigInt();
                    break;
                case /* bool is_follow */ 3:
                    message.isFollow = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 reserve_id = 1; */
        if (message.reserveId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.reserveId);
        /* int64 count = 2; */
        if (message.count !== 0n)
            writer.tag(2, WireType.Varint).int64(message.count);
        /* bool is_follow = 3; */
        if (message.isFollow !== false)
            writer.tag(3, WireType.Varint).bool(message.isFollow);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.PremiereReserve
 */
export const PremiereReserve = new PremiereReserve$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PremiereResource$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.PremiereResource", [
            { no: 1, name: "premiere", kind: "message", T: () => Premiere },
            { no: 2, name: "reserve", kind: "message", T: () => PremiereReserve },
            { no: 3, name: "text", kind: "message", T: () => PremiereText }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.view.v1.Premiere premiere */ 1:
                    message.premiere = Premiere.internalBinaryRead(reader, reader.uint32(), options, message.premiere);
                    break;
                case /* bilibili.app.view.v1.PremiereReserve reserve */ 2:
                    message.reserve = PremiereReserve.internalBinaryRead(reader, reader.uint32(), options, message.reserve);
                    break;
                case /* bilibili.app.view.v1.PremiereText text */ 3:
                    message.text = PremiereText.internalBinaryRead(reader, reader.uint32(), options, message.text);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.view.v1.Premiere premiere = 1; */
        if (message.premiere)
            Premiere.internalBinaryWrite(message.premiere, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.PremiereReserve reserve = 2; */
        if (message.reserve)
            PremiereReserve.internalBinaryWrite(message.reserve, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.PremiereText text = 3; */
        if (message.text)
            PremiereText.internalBinaryWrite(message.text, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.PremiereResource
 */
export const PremiereResource = new PremiereResource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PremiereText$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.PremiereText", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "subtitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "online_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "online_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "online_icon_dark", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "intro_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "intro_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "guidance_pulldown", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "guidance_entry", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "intro_icon_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { title: "", subtitle: "", onlineText: "", onlineIcon: "", onlineIconDark: "", introTitle: "", introIcon: "", guidancePulldown: "", guidanceEntry: "", introIconNight: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string subtitle */ 2:
                    message.subtitle = reader.string();
                    break;
                case /* string online_text */ 3:
                    message.onlineText = reader.string();
                    break;
                case /* string online_icon */ 4:
                    message.onlineIcon = reader.string();
                    break;
                case /* string online_icon_dark */ 5:
                    message.onlineIconDark = reader.string();
                    break;
                case /* string intro_title */ 6:
                    message.introTitle = reader.string();
                    break;
                case /* string intro_icon */ 7:
                    message.introIcon = reader.string();
                    break;
                case /* string guidance_pulldown */ 8:
                    message.guidancePulldown = reader.string();
                    break;
                case /* string guidance_entry */ 9:
                    message.guidanceEntry = reader.string();
                    break;
                case /* string intro_icon_night */ 10:
                    message.introIconNight = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string subtitle = 2; */
        if (message.subtitle !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.subtitle);
        /* string online_text = 3; */
        if (message.onlineText !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.onlineText);
        /* string online_icon = 4; */
        if (message.onlineIcon !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.onlineIcon);
        /* string online_icon_dark = 5; */
        if (message.onlineIconDark !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.onlineIconDark);
        /* string intro_title = 6; */
        if (message.introTitle !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.introTitle);
        /* string intro_icon = 7; */
        if (message.introIcon !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.introIcon);
        /* string guidance_pulldown = 8; */
        if (message.guidancePulldown !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.guidancePulldown);
        /* string guidance_entry = 9; */
        if (message.guidanceEntry !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.guidanceEntry);
        /* string intro_icon_night = 10; */
        if (message.introIconNight !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.introIconNight);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.PremiereText
 */
export const PremiereText = new PremiereText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PullClientAction$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.PullClientAction", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pull_action", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "params", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { type: "", pullAction: false, params: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* bool pull_action */ 2:
                    message.pullAction = reader.bool();
                    break;
                case /* string params */ 3:
                    message.params = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* bool pull_action = 2; */
        if (message.pullAction !== false)
            writer.tag(2, WireType.Varint).bool(message.pullAction);
        /* string params = 3; */
        if (message.params !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.params);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.PullClientAction
 */
export const PullClientAction = new PullClientAction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Rank$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Rank", [
            { no: 1, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "icon_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { icon: "", iconNight: "", text: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string icon */ 1:
                    message.icon = reader.string();
                    break;
                case /* string icon_night */ 2:
                    message.iconNight = reader.string();
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string icon = 1; */
        if (message.icon !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.icon);
        /* string icon_night = 2; */
        if (message.iconNight !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.iconNight);
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Rank
 */
export const Rank = new Rank$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RankInfo$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.RankInfo", [
            { no: 1, name: "icon_url_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "icon_url_day", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bkg_night_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bkg_day_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "font_night_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "font_day_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "rank_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "rank_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { iconUrlNight: "", iconUrlDay: "", bkgNightColor: "", bkgDayColor: "", fontNightColor: "", fontDayColor: "", rankContent: "", rankLink: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string icon_url_night */ 1:
                    message.iconUrlNight = reader.string();
                    break;
                case /* string icon_url_day */ 2:
                    message.iconUrlDay = reader.string();
                    break;
                case /* string bkg_night_color */ 3:
                    message.bkgNightColor = reader.string();
                    break;
                case /* string bkg_day_color */ 4:
                    message.bkgDayColor = reader.string();
                    break;
                case /* string font_night_color */ 5:
                    message.fontNightColor = reader.string();
                    break;
                case /* string font_day_color */ 6:
                    message.fontDayColor = reader.string();
                    break;
                case /* string rank_content */ 7:
                    message.rankContent = reader.string();
                    break;
                case /* string rank_link */ 8:
                    message.rankLink = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string icon_url_night = 1; */
        if (message.iconUrlNight !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.iconUrlNight);
        /* string icon_url_day = 2; */
        if (message.iconUrlDay !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.iconUrlDay);
        /* string bkg_night_color = 3; */
        if (message.bkgNightColor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.bkgNightColor);
        /* string bkg_day_color = 4; */
        if (message.bkgDayColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.bkgDayColor);
        /* string font_night_color = 5; */
        if (message.fontNightColor !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.fontNightColor);
        /* string font_day_color = 6; */
        if (message.fontDayColor !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.fontDayColor);
        /* string rank_content = 7; */
        if (message.rankContent !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.rankContent);
        /* string rank_link = 8; */
        if (message.rankLink !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.rankLink);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.RankInfo
 */
export const RankInfo = new RankInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReasonStyle$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ReasonStyle", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "border_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "text_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "bg_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "border_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "bg_style", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "selected", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { text: "", textColor: "", bgColor: "", borderColor: "", textColorNight: "", bgColorNight: "", borderColorNight: "", bgStyle: 0, selected: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string text_color */ 2:
                    message.textColor = reader.string();
                    break;
                case /* string bg_color */ 3:
                    message.bgColor = reader.string();
                    break;
                case /* string border_color */ 4:
                    message.borderColor = reader.string();
                    break;
                case /* string text_color_night */ 5:
                    message.textColorNight = reader.string();
                    break;
                case /* string bg_color_night */ 6:
                    message.bgColorNight = reader.string();
                    break;
                case /* string border_color_night */ 7:
                    message.borderColorNight = reader.string();
                    break;
                case /* int32 bg_style */ 8:
                    message.bgStyle = reader.int32();
                    break;
                case /* int32 selected */ 9:
                    message.selected = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string text_color = 2; */
        if (message.textColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.textColor);
        /* string bg_color = 3; */
        if (message.bgColor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.bgColor);
        /* string border_color = 4; */
        if (message.borderColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.borderColor);
        /* string text_color_night = 5; */
        if (message.textColorNight !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.textColorNight);
        /* string bg_color_night = 6; */
        if (message.bgColorNight !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.bgColorNight);
        /* string border_color_night = 7; */
        if (message.borderColorNight !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.borderColorNight);
        /* int32 bg_style = 8; */
        if (message.bgStyle !== 0)
            writer.tag(8, WireType.Varint).int32(message.bgStyle);
        /* int32 selected = 9; */
        if (message.selected !== 0)
            writer.tag(9, WireType.Varint).int32(message.selected);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ReasonStyle
 */
export const ReasonStyle = new ReasonStyle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecDislike$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.RecDislike", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sub_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "closed_sub_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "paste_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "closed_paste_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "dislike_reason", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DislikeReasons },
            { no: 7, name: "toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "closed_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { title: "", subTitle: "", closedSubTitle: "", pasteText: "", closedPasteText: "", dislikeReason: [], toast: "", closedToast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string sub_title */ 2:
                    message.subTitle = reader.string();
                    break;
                case /* string closed_sub_title */ 3:
                    message.closedSubTitle = reader.string();
                    break;
                case /* string paste_text */ 4:
                    message.pasteText = reader.string();
                    break;
                case /* string closed_paste_text */ 5:
                    message.closedPasteText = reader.string();
                    break;
                case /* repeated bilibili.app.view.v1.DislikeReasons dislike_reason */ 6:
                    message.dislikeReason.push(DislikeReasons.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string toast */ 7:
                    message.toast = reader.string();
                    break;
                case /* string closed_toast */ 8:
                    message.closedToast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string sub_title = 2; */
        if (message.subTitle !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.subTitle);
        /* string closed_sub_title = 3; */
        if (message.closedSubTitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.closedSubTitle);
        /* string paste_text = 4; */
        if (message.pasteText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.pasteText);
        /* string closed_paste_text = 5; */
        if (message.closedPasteText !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.closedPasteText);
        /* repeated bilibili.app.view.v1.DislikeReasons dislike_reason = 6; */
        for (let i = 0; i < message.dislikeReason.length; i++)
            DislikeReasons.internalBinaryWrite(message.dislikeReason[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string toast = 7; */
        if (message.toast !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.toast);
        /* string closed_toast = 8; */
        if (message.closedToast !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.closedToast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.RecDislike
 */
export const RecDislike = new RecDislike$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecThreePoint$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.RecThreePoint", [
            { no: 1, name: "dislike", kind: "message", T: () => RecDislike },
            { no: 2, name: "feedback", kind: "message", T: () => RecDislike },
            { no: 3, name: "watch_later", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { watchLater: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.view.v1.RecDislike dislike */ 1:
                    message.dislike = RecDislike.internalBinaryRead(reader, reader.uint32(), options, message.dislike);
                    break;
                case /* bilibili.app.view.v1.RecDislike feedback */ 2:
                    message.feedback = RecDislike.internalBinaryRead(reader, reader.uint32(), options, message.feedback);
                    break;
                case /* bool watch_later */ 3:
                    message.watchLater = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.view.v1.RecDislike dislike = 1; */
        if (message.dislike)
            RecDislike.internalBinaryWrite(message.dislike, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.RecDislike feedback = 2; */
        if (message.feedback)
            RecDislike.internalBinaryWrite(message.feedback, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool watch_later = 3; */
        if (message.watchLater !== false)
            writer.tag(3, WireType.Varint).bool(message.watchLater);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.RecThreePoint
 */
export const RecThreePoint = new RecThreePoint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RefreshPage$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.RefreshPage", [
            { no: 1, name: "refreshable", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "refresh_icon", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "refresh_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "refresh_show", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value) {
        const message = { refreshable: 0, refreshIcon: 0, refreshText: "", refreshShow: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 refreshable */ 1:
                    message.refreshable = reader.int32();
                    break;
                case /* int32 refresh_icon */ 2:
                    message.refreshIcon = reader.int32();
                    break;
                case /* string refresh_text */ 3:
                    message.refreshText = reader.string();
                    break;
                case /* float refresh_show */ 4:
                    message.refreshShow = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 refreshable = 1; */
        if (message.refreshable !== 0)
            writer.tag(1, WireType.Varint).int32(message.refreshable);
        /* int32 refresh_icon = 2; */
        if (message.refreshIcon !== 0)
            writer.tag(2, WireType.Varint).int32(message.refreshIcon);
        /* string refresh_text = 3; */
        if (message.refreshText !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.refreshText);
        /* float refresh_show = 4; */
        if (message.refreshShow !== 0)
            writer.tag(4, WireType.Bit32).float(message.refreshShow);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.RefreshPage
 */
export const RefreshPage = new RefreshPage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Relate$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Relate", [
            { no: 1, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "pic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "author", kind: "message", T: () => Author },
            { no: 5, name: "stat", kind: "message", T: () => Stat },
            { no: 6, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "goto", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "param", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "rating", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 12, name: "reserve", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "from", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "rcmd_reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "badge", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "season_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 19, name: "rating_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 20, name: "tag_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "pack_info", kind: "message", T: () => PackInfo },
            { no: 22, name: "notice", kind: "message", T: () => Notice },
            { no: 23, name: "button", kind: "message", T: () => Button },
            { no: 24, name: "trackid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 25, name: "new_card", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 26, name: "rcmd_reason_style", kind: "message", T: () => ReasonStyle },
            { no: 27, name: "cover_gif", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 28, name: "cm", kind: "message", T: () => CM },
            { no: 29, name: "reserve_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 30, name: "rcmd_reason_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 31, name: "rec_three_point", kind: "message", T: () => RecThreePoint },
            { no: 32, name: "unique_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 33, name: "material_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 34, name: "from_source_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 35, name: "from_source_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 36, name: "dimension", kind: "message", T: () => Dimension },
            { no: 37, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 38, name: "badge_style", kind: "message", T: () => ReasonStyle },
            { no: 39, name: "power_icon_style", kind: "message", T: () => PowerIconStyle },
            { no: 40, name: "reserve_status_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 41, name: "dislike_report_data", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 42, name: "rank_info_game", kind: "message", T: () => RankInfo },
            { no: 43, name: "first_frame", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { aid: 0n, pic: "", title: "", duration: 0n, goto: "", param: "", uri: "", jumpUrl: "", rating: 0, reserve: "", from: "", desc: "", rcmdReason: "", badge: "", cid: 0n, seasonType: 0, ratingCount: 0, tagName: "", trackid: "", newCard: 0, coverGif: "", reserveStatus: 0n, rcmdReasonExtra: "", uniqueId: "", materialId: 0n, fromSourceType: 0n, fromSourceId: "", cover: "", reserveStatusText: "", dislikeReportData: "", firstFrame: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid */ 1:
                    message.aid = reader.int64().toBigInt();
                    break;
                case /* string pic */ 2:
                    message.pic = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* bilibili.app.archive.v1.Author author */ 4:
                    message.author = Author.internalBinaryRead(reader, reader.uint32(), options, message.author);
                    break;
                case /* bilibili.app.archive.v1.Stat stat */ 5:
                    message.stat = Stat.internalBinaryRead(reader, reader.uint32(), options, message.stat);
                    break;
                case /* int64 duration */ 6:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* string goto */ 7:
                    message.goto = reader.string();
                    break;
                case /* string param */ 8:
                    message.param = reader.string();
                    break;
                case /* string uri */ 9:
                    message.uri = reader.string();
                    break;
                case /* string jump_url */ 10:
                    message.jumpUrl = reader.string();
                    break;
                case /* double rating */ 11:
                    message.rating = reader.double();
                    break;
                case /* string reserve */ 12:
                    message.reserve = reader.string();
                    break;
                case /* string from */ 13:
                    message.from = reader.string();
                    break;
                case /* string desc */ 14:
                    message.desc = reader.string();
                    break;
                case /* string rcmd_reason */ 15:
                    message.rcmdReason = reader.string();
                    break;
                case /* string badge */ 16:
                    message.badge = reader.string();
                    break;
                case /* int64 cid */ 17:
                    message.cid = reader.int64().toBigInt();
                    break;
                case /* int32 season_type */ 18:
                    message.seasonType = reader.int32();
                    break;
                case /* int32 rating_count */ 19:
                    message.ratingCount = reader.int32();
                    break;
                case /* string tag_name */ 20:
                    message.tagName = reader.string();
                    break;
                case /* bilibili.app.view.v1.PackInfo pack_info */ 21:
                    message.packInfo = PackInfo.internalBinaryRead(reader, reader.uint32(), options, message.packInfo);
                    break;
                case /* bilibili.app.view.v1.Notice notice */ 22:
                    message.notice = Notice.internalBinaryRead(reader, reader.uint32(), options, message.notice);
                    break;
                case /* bilibili.app.view.v1.Button button */ 23:
                    message.button = Button.internalBinaryRead(reader, reader.uint32(), options, message.button);
                    break;
                case /* string trackid */ 24:
                    message.trackid = reader.string();
                    break;
                case /* int32 new_card */ 25:
                    message.newCard = reader.int32();
                    break;
                case /* bilibili.app.view.v1.ReasonStyle rcmd_reason_style */ 26:
                    message.rcmdReasonStyle = ReasonStyle.internalBinaryRead(reader, reader.uint32(), options, message.rcmdReasonStyle);
                    break;
                case /* string cover_gif */ 27:
                    message.coverGif = reader.string();
                    break;
                case /* bilibili.app.view.v1.CM cm */ 28:
                    message.cm = CM.internalBinaryRead(reader, reader.uint32(), options, message.cm);
                    break;
                case /* int64 reserve_status */ 29:
                    message.reserveStatus = reader.int64().toBigInt();
                    break;
                case /* string rcmd_reason_extra */ 30:
                    message.rcmdReasonExtra = reader.string();
                    break;
                case /* bilibili.app.view.v1.RecThreePoint rec_three_point */ 31:
                    message.recThreePoint = RecThreePoint.internalBinaryRead(reader, reader.uint32(), options, message.recThreePoint);
                    break;
                case /* string unique_id */ 32:
                    message.uniqueId = reader.string();
                    break;
                case /* int64 material_id */ 33:
                    message.materialId = reader.int64().toBigInt();
                    break;
                case /* int64 from_source_type */ 34:
                    message.fromSourceType = reader.int64().toBigInt();
                    break;
                case /* string from_source_id */ 35:
                    message.fromSourceId = reader.string();
                    break;
                case /* bilibili.app.archive.v1.Dimension dimension */ 36:
                    message.dimension = Dimension.internalBinaryRead(reader, reader.uint32(), options, message.dimension);
                    break;
                case /* string cover */ 37:
                    message.cover = reader.string();
                    break;
                case /* bilibili.app.view.v1.ReasonStyle badge_style */ 38:
                    message.badgeStyle = ReasonStyle.internalBinaryRead(reader, reader.uint32(), options, message.badgeStyle);
                    break;
                case /* bilibili.app.view.v1.PowerIconStyle power_icon_style */ 39:
                    message.powerIconStyle = PowerIconStyle.internalBinaryRead(reader, reader.uint32(), options, message.powerIconStyle);
                    break;
                case /* string reserve_status_text */ 40:
                    message.reserveStatusText = reader.string();
                    break;
                case /* string dislike_report_data */ 41:
                    message.dislikeReportData = reader.string();
                    break;
                case /* bilibili.app.view.v1.RankInfo rank_info_game */ 42:
                    message.rankInfoGame = RankInfo.internalBinaryRead(reader, reader.uint32(), options, message.rankInfoGame);
                    break;
                case /* string first_frame */ 43:
                    message.firstFrame = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 1; */
        if (message.aid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.aid);
        /* string pic = 2; */
        if (message.pic !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.pic);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* bilibili.app.archive.v1.Author author = 4; */
        if (message.author)
            Author.internalBinaryWrite(message.author, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.archive.v1.Stat stat = 5; */
        if (message.stat)
            Stat.internalBinaryWrite(message.stat, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int64 duration = 6; */
        if (message.duration !== 0n)
            writer.tag(6, WireType.Varint).int64(message.duration);
        /* string goto = 7; */
        if (message.goto !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.goto);
        /* string param = 8; */
        if (message.param !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.param);
        /* string uri = 9; */
        if (message.uri !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.uri);
        /* string jump_url = 10; */
        if (message.jumpUrl !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.jumpUrl);
        /* double rating = 11; */
        if (message.rating !== 0)
            writer.tag(11, WireType.Bit64).double(message.rating);
        /* string reserve = 12; */
        if (message.reserve !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.reserve);
        /* string from = 13; */
        if (message.from !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.from);
        /* string desc = 14; */
        if (message.desc !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.desc);
        /* string rcmd_reason = 15; */
        if (message.rcmdReason !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.rcmdReason);
        /* string badge = 16; */
        if (message.badge !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.badge);
        /* int64 cid = 17; */
        if (message.cid !== 0n)
            writer.tag(17, WireType.Varint).int64(message.cid);
        /* int32 season_type = 18; */
        if (message.seasonType !== 0)
            writer.tag(18, WireType.Varint).int32(message.seasonType);
        /* int32 rating_count = 19; */
        if (message.ratingCount !== 0)
            writer.tag(19, WireType.Varint).int32(message.ratingCount);
        /* string tag_name = 20; */
        if (message.tagName !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.tagName);
        /* bilibili.app.view.v1.PackInfo pack_info = 21; */
        if (message.packInfo)
            PackInfo.internalBinaryWrite(message.packInfo, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.Notice notice = 22; */
        if (message.notice)
            Notice.internalBinaryWrite(message.notice, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.Button button = 23; */
        if (message.button)
            Button.internalBinaryWrite(message.button, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* string trackid = 24; */
        if (message.trackid !== "")
            writer.tag(24, WireType.LengthDelimited).string(message.trackid);
        /* int32 new_card = 25; */
        if (message.newCard !== 0)
            writer.tag(25, WireType.Varint).int32(message.newCard);
        /* bilibili.app.view.v1.ReasonStyle rcmd_reason_style = 26; */
        if (message.rcmdReasonStyle)
            ReasonStyle.internalBinaryWrite(message.rcmdReasonStyle, writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        /* string cover_gif = 27; */
        if (message.coverGif !== "")
            writer.tag(27, WireType.LengthDelimited).string(message.coverGif);
        /* bilibili.app.view.v1.CM cm = 28; */
        if (message.cm)
            CM.internalBinaryWrite(message.cm, writer.tag(28, WireType.LengthDelimited).fork(), options).join();
        /* int64 reserve_status = 29; */
        if (message.reserveStatus !== 0n)
            writer.tag(29, WireType.Varint).int64(message.reserveStatus);
        /* string rcmd_reason_extra = 30; */
        if (message.rcmdReasonExtra !== "")
            writer.tag(30, WireType.LengthDelimited).string(message.rcmdReasonExtra);
        /* bilibili.app.view.v1.RecThreePoint rec_three_point = 31; */
        if (message.recThreePoint)
            RecThreePoint.internalBinaryWrite(message.recThreePoint, writer.tag(31, WireType.LengthDelimited).fork(), options).join();
        /* string unique_id = 32; */
        if (message.uniqueId !== "")
            writer.tag(32, WireType.LengthDelimited).string(message.uniqueId);
        /* int64 material_id = 33; */
        if (message.materialId !== 0n)
            writer.tag(33, WireType.Varint).int64(message.materialId);
        /* int64 from_source_type = 34; */
        if (message.fromSourceType !== 0n)
            writer.tag(34, WireType.Varint).int64(message.fromSourceType);
        /* string from_source_id = 35; */
        if (message.fromSourceId !== "")
            writer.tag(35, WireType.LengthDelimited).string(message.fromSourceId);
        /* bilibili.app.archive.v1.Dimension dimension = 36; */
        if (message.dimension)
            Dimension.internalBinaryWrite(message.dimension, writer.tag(36, WireType.LengthDelimited).fork(), options).join();
        /* string cover = 37; */
        if (message.cover !== "")
            writer.tag(37, WireType.LengthDelimited).string(message.cover);
        /* bilibili.app.view.v1.ReasonStyle badge_style = 38; */
        if (message.badgeStyle)
            ReasonStyle.internalBinaryWrite(message.badgeStyle, writer.tag(38, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.PowerIconStyle power_icon_style = 39; */
        if (message.powerIconStyle)
            PowerIconStyle.internalBinaryWrite(message.powerIconStyle, writer.tag(39, WireType.LengthDelimited).fork(), options).join();
        /* string reserve_status_text = 40; */
        if (message.reserveStatusText !== "")
            writer.tag(40, WireType.LengthDelimited).string(message.reserveStatusText);
        /* string dislike_report_data = 41; */
        if (message.dislikeReportData !== "")
            writer.tag(41, WireType.LengthDelimited).string(message.dislikeReportData);
        /* bilibili.app.view.v1.RankInfo rank_info_game = 42; */
        if (message.rankInfoGame)
            RankInfo.internalBinaryWrite(message.rankInfoGame, writer.tag(42, WireType.LengthDelimited).fork(), options).join();
        /* string first_frame = 43; */
        if (message.firstFrame !== "")
            writer.tag(43, WireType.LengthDelimited).string(message.firstFrame);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Relate
 */
export const Relate = new Relate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelateItem$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.RelateItem", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { url: "", cover: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                case /* string cover */ 2:
                    message.cover = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        /* string cover = 2; */
        if (message.cover !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.cover);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.RelateItem
 */
export const RelateItem = new RelateItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelatesFeedReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.RelatesFeedReply", [
            { no: 1, name: "list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Relate },
            { no: 2, name: "has_next", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "pagination", kind: "message", T: () => PaginationReply }
        ]);
    }
    create(value) {
        const message = { list: [], hasNext: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.view.v1.Relate list */ 1:
                    message.list.push(Relate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool has_next */ 2:
                    message.hasNext = reader.bool();
                    break;
                case /* bilibili.pagination.PaginationReply pagination */ 3:
                    message.pagination = PaginationReply.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.app.view.v1.Relate list = 1; */
        for (let i = 0; i < message.list.length; i++)
            Relate.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool has_next = 2; */
        if (message.hasNext !== false)
            writer.tag(2, WireType.Varint).bool(message.hasNext);
        /* bilibili.pagination.PaginationReply pagination = 3; */
        if (message.pagination)
            PaginationReply.internalBinaryWrite(message.pagination, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.RelatesFeedReply
 */
export const RelatesFeedReply = new RelatesFeedReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelatesFeedReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.RelatesFeedReq", [
            { no: 1, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "bvid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "from", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "from_spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "player_args", kind: "message", T: () => PlayerArgs },
            { no: 7, name: "relates_page", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "autoplay", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "from_track_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "biz_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "device_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "ad_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "pagination", kind: "message", T: () => Pagination },
            { no: 15, name: "refresh_num", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { aid: 0n, bvid: "", from: "", spmid: "", fromSpmid: "", relatesPage: 0n, sessionId: "", autoplay: 0, fromTrackId: "", bizExtra: "", deviceType: 0n, adExtra: "", refreshNum: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid */ 1:
                    message.aid = reader.int64().toBigInt();
                    break;
                case /* string bvid */ 2:
                    message.bvid = reader.string();
                    break;
                case /* string from */ 3:
                    message.from = reader.string();
                    break;
                case /* string spmid */ 4:
                    message.spmid = reader.string();
                    break;
                case /* string from_spmid */ 5:
                    message.fromSpmid = reader.string();
                    break;
                case /* bilibili.app.archive.middleware.v1.PlayerArgs player_args */ 6:
                    message.playerArgs = PlayerArgs.internalBinaryRead(reader, reader.uint32(), options, message.playerArgs);
                    break;
                case /* int64 relates_page */ 7:
                    message.relatesPage = reader.int64().toBigInt();
                    break;
                case /* string session_id */ 8:
                    message.sessionId = reader.string();
                    break;
                case /* int32 autoplay */ 9:
                    message.autoplay = reader.int32();
                    break;
                case /* string from_track_id */ 10:
                    message.fromTrackId = reader.string();
                    break;
                case /* string biz_extra */ 11:
                    message.bizExtra = reader.string();
                    break;
                case /* int64 device_type */ 12:
                    message.deviceType = reader.int64().toBigInt();
                    break;
                case /* string ad_extra */ 13:
                    message.adExtra = reader.string();
                    break;
                case /* bilibili.pagination.Pagination pagination */ 14:
                    message.pagination = Pagination.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* int32 refresh_num */ 15:
                    message.refreshNum = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 1; */
        if (message.aid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.aid);
        /* string bvid = 2; */
        if (message.bvid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.bvid);
        /* string from = 3; */
        if (message.from !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.from);
        /* string spmid = 4; */
        if (message.spmid !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.spmid);
        /* string from_spmid = 5; */
        if (message.fromSpmid !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.fromSpmid);
        /* bilibili.app.archive.middleware.v1.PlayerArgs player_args = 6; */
        if (message.playerArgs)
            PlayerArgs.internalBinaryWrite(message.playerArgs, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* int64 relates_page = 7; */
        if (message.relatesPage !== 0n)
            writer.tag(7, WireType.Varint).int64(message.relatesPage);
        /* string session_id = 8; */
        if (message.sessionId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.sessionId);
        /* int32 autoplay = 9; */
        if (message.autoplay !== 0)
            writer.tag(9, WireType.Varint).int32(message.autoplay);
        /* string from_track_id = 10; */
        if (message.fromTrackId !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.fromTrackId);
        /* string biz_extra = 11; */
        if (message.bizExtra !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.bizExtra);
        /* int64 device_type = 12; */
        if (message.deviceType !== 0n)
            writer.tag(12, WireType.Varint).int64(message.deviceType);
        /* string ad_extra = 13; */
        if (message.adExtra !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.adExtra);
        /* bilibili.pagination.Pagination pagination = 14; */
        if (message.pagination)
            Pagination.internalBinaryWrite(message.pagination, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* int32 refresh_num = 15; */
        if (message.refreshNum !== 0)
            writer.tag(15, WireType.Varint).int32(message.refreshNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.RelatesFeedReq
 */
export const RelatesFeedReq = new RelatesFeedReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RelateTab$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.RelateTab", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { id: "", title: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.RelateTab
 */
export const RelateTab = new RelateTab$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReplyStyle$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ReplyStyle", [
            { no: 1, name: "badge_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "badge_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "badge_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { badgeUrl: "", badgeText: "", badgeType: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string badge_url */ 1:
                    message.badgeUrl = reader.string();
                    break;
                case /* string badge_text */ 2:
                    message.badgeText = reader.string();
                    break;
                case /* int64 badge_type */ 3:
                    message.badgeType = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string badge_url = 1; */
        if (message.badgeUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.badgeUrl);
        /* string badge_text = 2; */
        if (message.badgeText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.badgeText);
        /* int64 badge_type = 3; */
        if (message.badgeType !== 0n)
            writer.tag(3, WireType.Varint).int64(message.badgeType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ReplyStyle
 */
export const ReplyStyle = new ReplyStyle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReqUser$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ReqUser", [
            { no: 1, name: "attention", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "guest_attention", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "favorite", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "like", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "dislike", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "coin", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "attention_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "fav_season", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "elec_plus_btn", kind: "message", T: () => Button }
        ]);
    }
    create(value) {
        const message = { attention: 0, guestAttention: 0, favorite: 0, like: 0, dislike: 0, coin: 0, attentionLevel: 0, favSeason: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 attention */ 1:
                    message.attention = reader.int32();
                    break;
                case /* int32 guest_attention */ 2:
                    message.guestAttention = reader.int32();
                    break;
                case /* int32 favorite */ 3:
                    message.favorite = reader.int32();
                    break;
                case /* int32 like */ 4:
                    message.like = reader.int32();
                    break;
                case /* int32 dislike */ 5:
                    message.dislike = reader.int32();
                    break;
                case /* int32 coin */ 6:
                    message.coin = reader.int32();
                    break;
                case /* int32 attention_level */ 7:
                    message.attentionLevel = reader.int32();
                    break;
                case /* int32 fav_season */ 8:
                    message.favSeason = reader.int32();
                    break;
                case /* bilibili.app.view.v1.Button elec_plus_btn */ 9:
                    message.elecPlusBtn = Button.internalBinaryRead(reader, reader.uint32(), options, message.elecPlusBtn);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 attention = 1; */
        if (message.attention !== 0)
            writer.tag(1, WireType.Varint).int32(message.attention);
        /* int32 guest_attention = 2; */
        if (message.guestAttention !== 0)
            writer.tag(2, WireType.Varint).int32(message.guestAttention);
        /* int32 favorite = 3; */
        if (message.favorite !== 0)
            writer.tag(3, WireType.Varint).int32(message.favorite);
        /* int32 like = 4; */
        if (message.like !== 0)
            writer.tag(4, WireType.Varint).int32(message.like);
        /* int32 dislike = 5; */
        if (message.dislike !== 0)
            writer.tag(5, WireType.Varint).int32(message.dislike);
        /* int32 coin = 6; */
        if (message.coin !== 0)
            writer.tag(6, WireType.Varint).int32(message.coin);
        /* int32 attention_level = 7; */
        if (message.attentionLevel !== 0)
            writer.tag(7, WireType.Varint).int32(message.attentionLevel);
        /* int32 fav_season = 8; */
        if (message.favSeason !== 0)
            writer.tag(8, WireType.Varint).int32(message.favSeason);
        /* bilibili.app.view.v1.Button elec_plus_btn = 9; */
        if (message.elecPlusBtn)
            Button.internalBinaryWrite(message.elecPlusBtn, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ReqUser
 */
export const ReqUser = new ReqUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReserveReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ReserveReply", [
            { no: 1, name: "reserve_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { reserveId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 reserve_id */ 1:
                    message.reserveId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 reserve_id = 1; */
        if (message.reserveId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.reserveId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ReserveReply
 */
export const ReserveReply = new ReserveReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReserveReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ReserveReq", [
            { no: 1, name: "reserve_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "reserve_action", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "up_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { reserveId: 0n, reserveAction: 0n, upId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 reserve_id */ 1:
                    message.reserveId = reader.int64().toBigInt();
                    break;
                case /* int64 reserve_action */ 2:
                    message.reserveAction = reader.int64().toBigInt();
                    break;
                case /* int64 up_id */ 3:
                    message.upId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 reserve_id = 1; */
        if (message.reserveId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.reserveId);
        /* int64 reserve_action = 2; */
        if (message.reserveAction !== 0n)
            writer.tag(2, WireType.Varint).int64(message.reserveAction);
        /* int64 up_id = 3; */
        if (message.upId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.upId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ReserveReq
 */
export const ReserveReq = new ReserveReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Restriction$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Restriction", [
            { no: 1, name: "is_teenagers", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "is_lessons", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "is_review", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "disable_rcmd", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { isTeenagers: false, isLessons: false, isReview: false, disableRcmd: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_teenagers */ 1:
                    message.isTeenagers = reader.bool();
                    break;
                case /* bool is_lessons */ 2:
                    message.isLessons = reader.bool();
                    break;
                case /* bool is_review */ 3:
                    message.isReview = reader.bool();
                    break;
                case /* bool disable_rcmd */ 4:
                    message.disableRcmd = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool is_teenagers = 1; */
        if (message.isTeenagers !== false)
            writer.tag(1, WireType.Varint).bool(message.isTeenagers);
        /* bool is_lessons = 2; */
        if (message.isLessons !== false)
            writer.tag(2, WireType.Varint).bool(message.isLessons);
        /* bool is_review = 3; */
        if (message.isReview !== false)
            writer.tag(3, WireType.Varint).bool(message.isReview);
        /* bool disable_rcmd = 4; */
        if (message.disableRcmd !== false)
            writer.tag(4, WireType.Varint).bool(message.disableRcmd);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Restriction
 */
export const Restriction = new Restriction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Season$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Season", [
            { no: 1, name: "allow_download", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "season_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "is_jump", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "is_finish", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "newest_ep_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "newest_ep_index", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "total_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "weekday", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "user_season", kind: "message", T: () => UserSeason },
            { no: 12, name: "player", kind: "message", T: () => SeasonPlayer },
            { no: 13, name: "ogv_playurl", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { allowDownload: "", seasonId: 0n, isJump: 0, title: "", cover: "", isFinish: 0, newestEpId: 0n, newestEpIndex: "", totalCount: 0n, weekday: 0, ogvPlayurl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string allow_download */ 1:
                    message.allowDownload = reader.string();
                    break;
                case /* int64 season_id */ 2:
                    message.seasonId = reader.int64().toBigInt();
                    break;
                case /* int32 is_jump */ 3:
                    message.isJump = reader.int32();
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* string cover */ 5:
                    message.cover = reader.string();
                    break;
                case /* int32 is_finish */ 6:
                    message.isFinish = reader.int32();
                    break;
                case /* int64 newest_ep_id */ 7:
                    message.newestEpId = reader.int64().toBigInt();
                    break;
                case /* string newest_ep_index */ 8:
                    message.newestEpIndex = reader.string();
                    break;
                case /* int64 total_count */ 9:
                    message.totalCount = reader.int64().toBigInt();
                    break;
                case /* int32 weekday */ 10:
                    message.weekday = reader.int32();
                    break;
                case /* bilibili.app.view.v1.UserSeason user_season */ 11:
                    message.userSeason = UserSeason.internalBinaryRead(reader, reader.uint32(), options, message.userSeason);
                    break;
                case /* bilibili.app.view.v1.SeasonPlayer player */ 12:
                    message.player = SeasonPlayer.internalBinaryRead(reader, reader.uint32(), options, message.player);
                    break;
                case /* string ogv_playurl */ 13:
                    message.ogvPlayurl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string allow_download = 1; */
        if (message.allowDownload !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.allowDownload);
        /* int64 season_id = 2; */
        if (message.seasonId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.seasonId);
        /* int32 is_jump = 3; */
        if (message.isJump !== 0)
            writer.tag(3, WireType.Varint).int32(message.isJump);
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* string cover = 5; */
        if (message.cover !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.cover);
        /* int32 is_finish = 6; */
        if (message.isFinish !== 0)
            writer.tag(6, WireType.Varint).int32(message.isFinish);
        /* int64 newest_ep_id = 7; */
        if (message.newestEpId !== 0n)
            writer.tag(7, WireType.Varint).int64(message.newestEpId);
        /* string newest_ep_index = 8; */
        if (message.newestEpIndex !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.newestEpIndex);
        /* int64 total_count = 9; */
        if (message.totalCount !== 0n)
            writer.tag(9, WireType.Varint).int64(message.totalCount);
        /* int32 weekday = 10; */
        if (message.weekday !== 0)
            writer.tag(10, WireType.Varint).int32(message.weekday);
        /* bilibili.app.view.v1.UserSeason user_season = 11; */
        if (message.userSeason)
            UserSeason.internalBinaryWrite(message.userSeason, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.SeasonPlayer player = 12; */
        if (message.player)
            SeasonPlayer.internalBinaryWrite(message.player, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* string ogv_playurl = 13; */
        if (message.ogvPlayurl !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.ogvPlayurl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Season
 */
export const Season = new Season$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeasonActivityRecordReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.SeasonActivityRecordReply", [
            { no: 1, name: "activity", kind: "message", T: () => UgcSeasonActivity }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.view.v1.UgcSeasonActivity activity */ 1:
                    message.activity = UgcSeasonActivity.internalBinaryRead(reader, reader.uint32(), options, message.activity);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.view.v1.UgcSeasonActivity activity = 1; */
        if (message.activity)
            UgcSeasonActivity.internalBinaryWrite(message.activity, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.SeasonActivityRecordReply
 */
export const SeasonActivityRecordReply = new SeasonActivityRecordReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeasonActivityRecordReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.SeasonActivityRecordReq", [
            { no: 1, name: "season_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "activity_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "action", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "scene", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { seasonId: 0n, activityId: 0n, action: 0, aid: 0n, cid: 0n, scene: 0n, spmid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 season_id */ 1:
                    message.seasonId = reader.int64().toBigInt();
                    break;
                case /* int64 activity_id */ 2:
                    message.activityId = reader.int64().toBigInt();
                    break;
                case /* int32 action */ 3:
                    message.action = reader.int32();
                    break;
                case /* int64 aid */ 4:
                    message.aid = reader.int64().toBigInt();
                    break;
                case /* int64 cid */ 5:
                    message.cid = reader.int64().toBigInt();
                    break;
                case /* int64 scene */ 6:
                    message.scene = reader.int64().toBigInt();
                    break;
                case /* string spmid */ 7:
                    message.spmid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 season_id = 1; */
        if (message.seasonId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.seasonId);
        /* int64 activity_id = 2; */
        if (message.activityId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.activityId);
        /* int32 action = 3; */
        if (message.action !== 0)
            writer.tag(3, WireType.Varint).int32(message.action);
        /* int64 aid = 4; */
        if (message.aid !== 0n)
            writer.tag(4, WireType.Varint).int64(message.aid);
        /* int64 cid = 5; */
        if (message.cid !== 0n)
            writer.tag(5, WireType.Varint).int64(message.cid);
        /* int64 scene = 6; */
        if (message.scene !== 0n)
            writer.tag(6, WireType.Varint).int64(message.scene);
        /* string spmid = 7; */
        if (message.spmid !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.spmid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.SeasonActivityRecordReq
 */
export const SeasonActivityRecordReq = new SeasonActivityRecordReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeasonPlayer$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.SeasonPlayer", [
            { no: 1, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "vid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "from", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { aid: 0n, vid: "", cid: 0n, from: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid */ 1:
                    message.aid = reader.int64().toBigInt();
                    break;
                case /* string vid */ 2:
                    message.vid = reader.string();
                    break;
                case /* int64 cid */ 3:
                    message.cid = reader.int64().toBigInt();
                    break;
                case /* string from */ 4:
                    message.from = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 1; */
        if (message.aid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.aid);
        /* string vid = 2; */
        if (message.vid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.vid);
        /* int64 cid = 3; */
        if (message.cid !== 0n)
            writer.tag(3, WireType.Varint).int64(message.cid);
        /* string from = 4; */
        if (message.from !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.from);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.SeasonPlayer
 */
export const SeasonPlayer = new SeasonPlayer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeasonReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.SeasonReply", [
            { no: 1, name: "season", kind: "message", T: () => UgcSeason }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.view.v1.UgcSeason season */ 1:
                    message.season = UgcSeason.internalBinaryRead(reader, reader.uint32(), options, message.season);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.view.v1.UgcSeason season = 1; */
        if (message.season)
            UgcSeason.internalBinaryWrite(message.season, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.SeasonReply
 */
export const SeasonReply = new SeasonReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeasonReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.SeasonReq", [
            { no: 1, name: "season_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { seasonId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 season_id */ 1:
                    message.seasonId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 season_id = 1; */
        if (message.seasonId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.seasonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.SeasonReq
 */
export const SeasonReq = new SeasonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeasonShow$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.SeasonShow", [
            { no: 1, name: "button_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "join_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "rule_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "checkin_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "checkin_prompt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { buttonText: "", joinText: "", ruleText: "", checkinText: "", checkinPrompt: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string button_text */ 1:
                    message.buttonText = reader.string();
                    break;
                case /* string join_text */ 2:
                    message.joinText = reader.string();
                    break;
                case /* string rule_text */ 3:
                    message.ruleText = reader.string();
                    break;
                case /* string checkin_text */ 4:
                    message.checkinText = reader.string();
                    break;
                case /* string checkin_prompt */ 5:
                    message.checkinPrompt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string button_text = 1; */
        if (message.buttonText !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.buttonText);
        /* string join_text = 2; */
        if (message.joinText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.joinText);
        /* string rule_text = 3; */
        if (message.ruleText !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.ruleText);
        /* string checkin_text = 4; */
        if (message.checkinText !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.checkinText);
        /* string checkin_prompt = 5; */
        if (message.checkinPrompt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.checkinPrompt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.SeasonShow
 */
export const SeasonShow = new SeasonShow$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeasonWidgetExposeReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.SeasonWidgetExposeReply", [
            { no: 1, name: "season_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "activity_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { seasonId: 0n, activityId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 season_id */ 1:
                    message.seasonId = reader.int64().toBigInt();
                    break;
                case /* int64 activity_id */ 2:
                    message.activityId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 season_id = 1; */
        if (message.seasonId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.seasonId);
        /* int64 activity_id = 2; */
        if (message.activityId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.SeasonWidgetExposeReply
 */
export const SeasonWidgetExposeReply = new SeasonWidgetExposeReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeasonWidgetExposeReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.SeasonWidgetExposeReq", [
            { no: 1, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "season_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "activity_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "scene", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { mid: 0n, type: 0, seasonId: 0n, activityId: 0n, aid: 0n, cid: 0n, scene: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 mid */ 1:
                    message.mid = reader.int64().toBigInt();
                    break;
                case /* int32 type */ 2:
                    message.type = reader.int32();
                    break;
                case /* int64 season_id */ 3:
                    message.seasonId = reader.int64().toBigInt();
                    break;
                case /* int64 activity_id */ 4:
                    message.activityId = reader.int64().toBigInt();
                    break;
                case /* int64 aid */ 5:
                    message.aid = reader.int64().toBigInt();
                    break;
                case /* int64 cid */ 6:
                    message.cid = reader.int64().toBigInt();
                    break;
                case /* int64 scene */ 7:
                    message.scene = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 mid = 1; */
        if (message.mid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.mid);
        /* int32 type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* int64 season_id = 3; */
        if (message.seasonId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.seasonId);
        /* int64 activity_id = 4; */
        if (message.activityId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.activityId);
        /* int64 aid = 5; */
        if (message.aid !== 0n)
            writer.tag(5, WireType.Varint).int64(message.aid);
        /* int64 cid = 6; */
        if (message.cid !== 0n)
            writer.tag(6, WireType.Varint).int64(message.cid);
        /* int64 scene = 7; */
        if (message.scene !== 0n)
            writer.tag(7, WireType.Varint).int64(message.scene);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.SeasonWidgetExposeReq
 */
export const SeasonWidgetExposeReq = new SeasonWidgetExposeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Section$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Section", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "episodes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Episode }
        ]);
    }
    create(value) {
        const message = { id: 0n, title: "", type: 0n, episodes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* int64 type */ 3:
                    message.type = reader.int64().toBigInt();
                    break;
                case /* repeated bilibili.app.view.v1.Episode episodes */ 4:
                    message.episodes.push(Episode.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* int64 type = 3; */
        if (message.type !== 0n)
            writer.tag(3, WireType.Varint).int64(message.type);
        /* repeated bilibili.app.view.v1.Episode episodes = 4; */
        for (let i = 0; i < message.episodes.length; i++)
            Episode.internalBinaryWrite(message.episodes[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Section
 */
export const Section = new Section$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShortFormVideoDownloadReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ShortFormVideoDownloadReply", [
            { no: 1, name: "has_download_url", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "download_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "md5", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "backup_download_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { hasDownloadUrl: false, downloadUrl: "", md5: "", size: 0n, backupDownloadUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool has_download_url */ 1:
                    message.hasDownloadUrl = reader.bool();
                    break;
                case /* string download_url */ 2:
                    message.downloadUrl = reader.string();
                    break;
                case /* string md5 */ 3:
                    message.md5 = reader.string();
                    break;
                case /* int64 size */ 4:
                    message.size = reader.int64().toBigInt();
                    break;
                case /* string backup_download_url */ 5:
                    message.backupDownloadUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool has_download_url = 1; */
        if (message.hasDownloadUrl !== false)
            writer.tag(1, WireType.Varint).bool(message.hasDownloadUrl);
        /* string download_url = 2; */
        if (message.downloadUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.downloadUrl);
        /* string md5 = 3; */
        if (message.md5 !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.md5);
        /* int64 size = 4; */
        if (message.size !== 0n)
            writer.tag(4, WireType.Varint).int64(message.size);
        /* string backup_download_url = 5; */
        if (message.backupDownloadUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.backupDownloadUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ShortFormVideoDownloadReply
 */
export const ShortFormVideoDownloadReply = new ShortFormVideoDownloadReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShortFormVideoDownloadReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ShortFormVideoDownloadReq", [
            { no: 1, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "buvid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "mobi_app", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "build", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "device", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "platform", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "restriction", kind: "message", T: () => Restriction },
            { no: 11, name: "tf_isp", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { aid: 0n, cid: 0n, mid: 0n, buvid: "", mobiApp: "", build: 0n, device: "", platform: "", spmid: "", tfIsp: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid */ 1:
                    message.aid = reader.int64().toBigInt();
                    break;
                case /* int64 cid */ 2:
                    message.cid = reader.int64().toBigInt();
                    break;
                case /* int64 mid */ 3:
                    message.mid = reader.int64().toBigInt();
                    break;
                case /* string buvid */ 4:
                    message.buvid = reader.string();
                    break;
                case /* string mobi_app */ 5:
                    message.mobiApp = reader.string();
                    break;
                case /* int64 build */ 6:
                    message.build = reader.int64().toBigInt();
                    break;
                case /* string device */ 7:
                    message.device = reader.string();
                    break;
                case /* string platform */ 8:
                    message.platform = reader.string();
                    break;
                case /* string spmid */ 9:
                    message.spmid = reader.string();
                    break;
                case /* bilibili.app.view.v1.Restriction restriction */ 10:
                    message.restriction = Restriction.internalBinaryRead(reader, reader.uint32(), options, message.restriction);
                    break;
                case /* string tf_isp */ 11:
                    message.tfIsp = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 1; */
        if (message.aid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.aid);
        /* int64 cid = 2; */
        if (message.cid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.cid);
        /* int64 mid = 3; */
        if (message.mid !== 0n)
            writer.tag(3, WireType.Varint).int64(message.mid);
        /* string buvid = 4; */
        if (message.buvid !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.buvid);
        /* string mobi_app = 5; */
        if (message.mobiApp !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.mobiApp);
        /* int64 build = 6; */
        if (message.build !== 0n)
            writer.tag(6, WireType.Varint).int64(message.build);
        /* string device = 7; */
        if (message.device !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.device);
        /* string platform = 8; */
        if (message.platform !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.platform);
        /* string spmid = 9; */
        if (message.spmid !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.spmid);
        /* bilibili.app.view.v1.Restriction restriction = 10; */
        if (message.restriction)
            Restriction.internalBinaryWrite(message.restriction, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* string tf_isp = 11; */
        if (message.tfIsp !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.tfIsp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ShortFormVideoDownloadReq
 */
export const ShortFormVideoDownloadReq = new ShortFormVideoDownloadReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SpecialCell$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.SpecialCell", [
            { no: 1, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "icon_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "text_color_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "cell_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "cell_bgcolor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "cell_bgcolor_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "param", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "page_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "jump_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "end_icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "end_icon_night", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "notes_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { icon: "", iconNight: "", text: "", textColor: "", textColorNight: "", jumpUrl: "", cellType: "", cellBgcolor: "", cellBgcolorNight: "", param: "", pageTitle: "", jumpType: "", endIcon: "", endIconNight: "", notesCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string icon */ 1:
                    message.icon = reader.string();
                    break;
                case /* string icon_night */ 2:
                    message.iconNight = reader.string();
                    break;
                case /* string text */ 3:
                    message.text = reader.string();
                    break;
                case /* string text_color */ 4:
                    message.textColor = reader.string();
                    break;
                case /* string text_color_night */ 5:
                    message.textColorNight = reader.string();
                    break;
                case /* string jump_url */ 6:
                    message.jumpUrl = reader.string();
                    break;
                case /* string cell_type */ 7:
                    message.cellType = reader.string();
                    break;
                case /* string cell_bgcolor */ 8:
                    message.cellBgcolor = reader.string();
                    break;
                case /* string cell_bgcolor_night */ 9:
                    message.cellBgcolorNight = reader.string();
                    break;
                case /* string param */ 10:
                    message.param = reader.string();
                    break;
                case /* string page_title */ 11:
                    message.pageTitle = reader.string();
                    break;
                case /* string jump_type */ 12:
                    message.jumpType = reader.string();
                    break;
                case /* string end_icon */ 13:
                    message.endIcon = reader.string();
                    break;
                case /* string end_icon_night */ 14:
                    message.endIconNight = reader.string();
                    break;
                case /* int64 notes_count */ 15:
                    message.notesCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string icon = 1; */
        if (message.icon !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.icon);
        /* string icon_night = 2; */
        if (message.iconNight !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.iconNight);
        /* string text = 3; */
        if (message.text !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.text);
        /* string text_color = 4; */
        if (message.textColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.textColor);
        /* string text_color_night = 5; */
        if (message.textColorNight !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.textColorNight);
        /* string jump_url = 6; */
        if (message.jumpUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.jumpUrl);
        /* string cell_type = 7; */
        if (message.cellType !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.cellType);
        /* string cell_bgcolor = 8; */
        if (message.cellBgcolor !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.cellBgcolor);
        /* string cell_bgcolor_night = 9; */
        if (message.cellBgcolorNight !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.cellBgcolorNight);
        /* string param = 10; */
        if (message.param !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.param);
        /* string page_title = 11; */
        if (message.pageTitle !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.pageTitle);
        /* string jump_type = 12; */
        if (message.jumpType !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.jumpType);
        /* string end_icon = 13; */
        if (message.endIcon !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.endIcon);
        /* string end_icon_night = 14; */
        if (message.endIconNight !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.endIconNight);
        /* int64 notes_count = 15; */
        if (message.notesCount !== 0n)
            writer.tag(15, WireType.Varint).int64(message.notesCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.SpecialCell
 */
export const SpecialCell = new SpecialCell$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Staff$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Staff", [
            { no: 1, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "face", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "official_verify", kind: "message", T: () => OfficialVerify },
            { no: 6, name: "vip", kind: "message", T: () => Vip },
            { no: 7, name: "attention", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "label_style", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { mid: 0n, title: "", face: "", name: "", attention: 0, labelStyle: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 mid */ 1:
                    message.mid = reader.int64().toBigInt();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string face */ 3:
                    message.face = reader.string();
                    break;
                case /* string name */ 4:
                    message.name = reader.string();
                    break;
                case /* bilibili.app.view.v1.OfficialVerify official_verify */ 5:
                    message.officialVerify = OfficialVerify.internalBinaryRead(reader, reader.uint32(), options, message.officialVerify);
                    break;
                case /* bilibili.app.view.v1.Vip vip */ 6:
                    message.vip = Vip.internalBinaryRead(reader, reader.uint32(), options, message.vip);
                    break;
                case /* int32 attention */ 7:
                    message.attention = reader.int32();
                    break;
                case /* int32 label_style */ 8:
                    message.labelStyle = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 mid = 1; */
        if (message.mid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.mid);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string face = 3; */
        if (message.face !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.face);
        /* string name = 4; */
        if (message.name !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.name);
        /* bilibili.app.view.v1.OfficialVerify official_verify = 5; */
        if (message.officialVerify)
            OfficialVerify.internalBinaryWrite(message.officialVerify, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.Vip vip = 6; */
        if (message.vip)
            Vip.internalBinaryWrite(message.vip, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* int32 attention = 7; */
        if (message.attention !== 0)
            writer.tag(7, WireType.Varint).int32(message.attention);
        /* int32 label_style = 8; */
        if (message.labelStyle !== 0)
            writer.tag(8, WireType.Varint).int32(message.labelStyle);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Staff
 */
export const Staff = new Staff$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StandardCard$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.StandardCard", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "button_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "button_selected_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "show_selected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { title: "", buttonTitle: "", buttonSelectedTitle: "", showSelected: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string button_title */ 2:
                    message.buttonTitle = reader.string();
                    break;
                case /* string button_selected_title */ 3:
                    message.buttonSelectedTitle = reader.string();
                    break;
                case /* bool show_selected */ 4:
                    message.showSelected = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string button_title = 2; */
        if (message.buttonTitle !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.buttonTitle);
        /* string button_selected_title = 3; */
        if (message.buttonSelectedTitle !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.buttonSelectedTitle);
        /* bool show_selected = 4; */
        if (message.showSelected !== false)
            writer.tag(4, WireType.Varint).bool(message.showSelected);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.StandardCard
 */
export const StandardCard = new StandardCard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class subTFPanel$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.subTFPanel", [
            { no: 1, name: "right_btn_img", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "right_btn_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "right_btn_text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "right_btn_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "main_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "operator", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { rightBtnImg: "", rightBtnText: "", rightBtnTextColor: "", rightBtnLink: "", mainLabel: "", operator: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string right_btn_img */ 1:
                    message.rightBtnImg = reader.string();
                    break;
                case /* string right_btn_text */ 2:
                    message.rightBtnText = reader.string();
                    break;
                case /* string right_btn_text_color */ 3:
                    message.rightBtnTextColor = reader.string();
                    break;
                case /* string right_btn_link */ 4:
                    message.rightBtnLink = reader.string();
                    break;
                case /* string main_label */ 5:
                    message.mainLabel = reader.string();
                    break;
                case /* string operator */ 6:
                    message.operator = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string right_btn_img = 1; */
        if (message.rightBtnImg !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.rightBtnImg);
        /* string right_btn_text = 2; */
        if (message.rightBtnText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rightBtnText);
        /* string right_btn_text_color = 3; */
        if (message.rightBtnTextColor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.rightBtnTextColor);
        /* string right_btn_link = 4; */
        if (message.rightBtnLink !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.rightBtnLink);
        /* string main_label = 5; */
        if (message.mainLabel !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.mainLabel);
        /* string operator = 6; */
        if (message.operator !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.operator);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.subTFPanel
 */
export const subTFPanel = new subTFPanel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Tab$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Tab", [
            { no: 1, name: "background", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "otype", kind: "enum", T: () => ["bilibili.app.view.v1.TabOtype", TabOtype] },
            { no: 3, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "style", kind: "enum", T: () => ["bilibili.app.view.v1.TabStyle", TabStyle] },
            { no: 6, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "text_color_selected", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "pic", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "ad_tab_info", kind: "message", T: () => Any }
        ]);
    }
    create(value) {
        const message = { background: "", otype: 0, oid: 0n, uri: "", style: 0, text: "", textColor: "", textColorSelected: "", pic: "", id: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string background */ 1:
                    message.background = reader.string();
                    break;
                case /* bilibili.app.view.v1.TabOtype otype */ 2:
                    message.otype = reader.int32();
                    break;
                case /* int64 oid */ 3:
                    message.oid = reader.int64().toBigInt();
                    break;
                case /* string uri */ 4:
                    message.uri = reader.string();
                    break;
                case /* bilibili.app.view.v1.TabStyle style */ 5:
                    message.style = reader.int32();
                    break;
                case /* string text */ 6:
                    message.text = reader.string();
                    break;
                case /* string text_color */ 7:
                    message.textColor = reader.string();
                    break;
                case /* string text_color_selected */ 8:
                    message.textColorSelected = reader.string();
                    break;
                case /* string pic */ 9:
                    message.pic = reader.string();
                    break;
                case /* int64 id */ 10:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* google.protobuf.Any ad_tab_info */ 11:
                    message.adTabInfo = Any.internalBinaryRead(reader, reader.uint32(), options, message.adTabInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string background = 1; */
        if (message.background !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.background);
        /* bilibili.app.view.v1.TabOtype otype = 2; */
        if (message.otype !== 0)
            writer.tag(2, WireType.Varint).int32(message.otype);
        /* int64 oid = 3; */
        if (message.oid !== 0n)
            writer.tag(3, WireType.Varint).int64(message.oid);
        /* string uri = 4; */
        if (message.uri !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.uri);
        /* bilibili.app.view.v1.TabStyle style = 5; */
        if (message.style !== 0)
            writer.tag(5, WireType.Varint).int32(message.style);
        /* string text = 6; */
        if (message.text !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.text);
        /* string text_color = 7; */
        if (message.textColor !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.textColor);
        /* string text_color_selected = 8; */
        if (message.textColorSelected !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.textColorSelected);
        /* string pic = 9; */
        if (message.pic !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.pic);
        /* int64 id = 10; */
        if (message.id !== 0n)
            writer.tag(10, WireType.Varint).int64(message.id);
        /* google.protobuf.Any ad_tab_info = 11; */
        if (message.adTabInfo)
            Any.internalBinaryWrite(message.adTabInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Tab
 */
export const Tab = new Tab$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Tag$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Tag", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "likes", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "hates", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "liked", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "hated", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "tag_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { id: 0n, name: "", likes: 0n, hates: 0n, liked: 0, hated: 0, uri: "", tagType: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int64 likes */ 3:
                    message.likes = reader.int64().toBigInt();
                    break;
                case /* int64 hates */ 4:
                    message.hates = reader.int64().toBigInt();
                    break;
                case /* int32 liked */ 5:
                    message.liked = reader.int32();
                    break;
                case /* int32 hated */ 6:
                    message.hated = reader.int32();
                    break;
                case /* string uri */ 7:
                    message.uri = reader.string();
                    break;
                case /* string tag_type */ 8:
                    message.tagType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int64 likes = 3; */
        if (message.likes !== 0n)
            writer.tag(3, WireType.Varint).int64(message.likes);
        /* int64 hates = 4; */
        if (message.hates !== 0n)
            writer.tag(4, WireType.Varint).int64(message.hates);
        /* int32 liked = 5; */
        if (message.liked !== 0)
            writer.tag(5, WireType.Varint).int32(message.liked);
        /* int32 hated = 6; */
        if (message.hated !== 0)
            writer.tag(6, WireType.Varint).int32(message.hated);
        /* string uri = 7; */
        if (message.uri !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.uri);
        /* string tag_type = 8; */
        if (message.tagType !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.tagType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Tag
 */
export const Tag = new Tag$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TFPanelCustomized$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.TFPanelCustomized", [
            { no: 1, name: "right_btn_img", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "right_btn_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "right_btn_text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "right_btn_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "main_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "operator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "sub_panel", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => subTFPanel } }
        ]);
    }
    create(value) {
        const message = { rightBtnImg: "", rightBtnText: "", rightBtnTextColor: "", rightBtnLink: "", mainLabel: "", operator: "", subPanel: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string right_btn_img */ 1:
                    message.rightBtnImg = reader.string();
                    break;
                case /* string right_btn_text */ 2:
                    message.rightBtnText = reader.string();
                    break;
                case /* string right_btn_text_color */ 3:
                    message.rightBtnTextColor = reader.string();
                    break;
                case /* string right_btn_link */ 4:
                    message.rightBtnLink = reader.string();
                    break;
                case /* string main_label */ 5:
                    message.mainLabel = reader.string();
                    break;
                case /* string operator */ 6:
                    message.operator = reader.string();
                    break;
                case /* map<string, bilibili.app.view.v1.subTFPanel> sub_panel */ 7:
                    this.binaryReadMap7(message.subPanel, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap7(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = subTFPanel.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.view.v1.TFPanelCustomized.sub_panel");
            }
        }
        map[key ?? ""] = val ?? subTFPanel.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* string right_btn_img = 1; */
        if (message.rightBtnImg !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.rightBtnImg);
        /* string right_btn_text = 2; */
        if (message.rightBtnText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.rightBtnText);
        /* string right_btn_text_color = 3; */
        if (message.rightBtnTextColor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.rightBtnTextColor);
        /* string right_btn_link = 4; */
        if (message.rightBtnLink !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.rightBtnLink);
        /* string main_label = 5; */
        if (message.mainLabel !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.mainLabel);
        /* string operator = 6; */
        if (message.operator !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.operator);
        /* map<string, bilibili.app.view.v1.subTFPanel> sub_panel = 7; */
        for (let k of Object.keys(message.subPanel)) {
            writer.tag(7, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            subTFPanel.internalBinaryWrite(message.subPanel[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.TFPanelCustomized
 */
export const TFPanelCustomized = new TFPanelCustomized$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TIcon$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.TIcon", [
            { no: 1, name: "icon", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { icon: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string icon */ 1:
                    message.icon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string icon = 1; */
        if (message.icon !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.TIcon
 */
export const TIcon = new TIcon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UgcSeason$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.UgcSeason", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "intro", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "sections", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Section },
            { no: 6, name: "stat", kind: "message", T: () => UgcSeasonStat },
            { no: 7, name: "label_text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "label_text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "label_bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "label_text_night_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "label_bg_night_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "descRight", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "ep_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "season_type", kind: "enum", T: () => ["bilibili.app.view.v1.SeasonType", SeasonType] },
            { no: 15, name: "show_continual_button", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "ep_num", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 17, name: "season_pay", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "goods_info", kind: "message", T: () => GoodsInfo },
            { no: 19, name: "pay_button", kind: "message", T: () => ButtonStyle },
            { no: 20, name: "label_text_new", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "activity", kind: "message", T: () => UgcSeasonActivity },
            { no: 22, name: "season_ability", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { id: 0n, title: "", cover: "", intro: "", sections: [], labelText: "", labelTextColor: "", labelBgColor: "", labelTextNightColor: "", labelBgNightColor: "", descRight: "", epCount: 0n, seasonType: 0, showContinualButton: false, epNum: 0n, seasonPay: false, labelTextNew: "", seasonAbility: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string cover */ 3:
                    message.cover = reader.string();
                    break;
                case /* string intro */ 4:
                    message.intro = reader.string();
                    break;
                case /* repeated bilibili.app.view.v1.Section sections */ 5:
                    message.sections.push(Section.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.view.v1.UgcSeasonStat stat */ 6:
                    message.stat = UgcSeasonStat.internalBinaryRead(reader, reader.uint32(), options, message.stat);
                    break;
                case /* string label_text */ 7:
                    message.labelText = reader.string();
                    break;
                case /* string label_text_color */ 8:
                    message.labelTextColor = reader.string();
                    break;
                case /* string label_bg_color */ 9:
                    message.labelBgColor = reader.string();
                    break;
                case /* string label_text_night_color */ 10:
                    message.labelTextNightColor = reader.string();
                    break;
                case /* string label_bg_night_color */ 11:
                    message.labelBgNightColor = reader.string();
                    break;
                case /* string descRight */ 12:
                    message.descRight = reader.string();
                    break;
                case /* int64 ep_count */ 13:
                    message.epCount = reader.int64().toBigInt();
                    break;
                case /* bilibili.app.view.v1.SeasonType season_type */ 14:
                    message.seasonType = reader.int32();
                    break;
                case /* bool show_continual_button */ 15:
                    message.showContinualButton = reader.bool();
                    break;
                case /* int64 ep_num */ 16:
                    message.epNum = reader.int64().toBigInt();
                    break;
                case /* bool season_pay */ 17:
                    message.seasonPay = reader.bool();
                    break;
                case /* bilibili.app.view.v1.GoodsInfo goods_info */ 18:
                    message.goodsInfo = GoodsInfo.internalBinaryRead(reader, reader.uint32(), options, message.goodsInfo);
                    break;
                case /* bilibili.app.view.v1.ButtonStyle pay_button */ 19:
                    message.payButton = ButtonStyle.internalBinaryRead(reader, reader.uint32(), options, message.payButton);
                    break;
                case /* string label_text_new */ 20:
                    message.labelTextNew = reader.string();
                    break;
                case /* bilibili.app.view.v1.UgcSeasonActivity activity */ 21:
                    message.activity = UgcSeasonActivity.internalBinaryRead(reader, reader.uint32(), options, message.activity);
                    break;
                case /* repeated string season_ability */ 22:
                    message.seasonAbility.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string cover = 3; */
        if (message.cover !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.cover);
        /* string intro = 4; */
        if (message.intro !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.intro);
        /* repeated bilibili.app.view.v1.Section sections = 5; */
        for (let i = 0; i < message.sections.length; i++)
            Section.internalBinaryWrite(message.sections[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.UgcSeasonStat stat = 6; */
        if (message.stat)
            UgcSeasonStat.internalBinaryWrite(message.stat, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string label_text = 7; */
        if (message.labelText !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.labelText);
        /* string label_text_color = 8; */
        if (message.labelTextColor !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.labelTextColor);
        /* string label_bg_color = 9; */
        if (message.labelBgColor !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.labelBgColor);
        /* string label_text_night_color = 10; */
        if (message.labelTextNightColor !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.labelTextNightColor);
        /* string label_bg_night_color = 11; */
        if (message.labelBgNightColor !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.labelBgNightColor);
        /* string descRight = 12; */
        if (message.descRight !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.descRight);
        /* int64 ep_count = 13; */
        if (message.epCount !== 0n)
            writer.tag(13, WireType.Varint).int64(message.epCount);
        /* bilibili.app.view.v1.SeasonType season_type = 14; */
        if (message.seasonType !== 0)
            writer.tag(14, WireType.Varint).int32(message.seasonType);
        /* bool show_continual_button = 15; */
        if (message.showContinualButton !== false)
            writer.tag(15, WireType.Varint).bool(message.showContinualButton);
        /* int64 ep_num = 16; */
        if (message.epNum !== 0n)
            writer.tag(16, WireType.Varint).int64(message.epNum);
        /* bool season_pay = 17; */
        if (message.seasonPay !== false)
            writer.tag(17, WireType.Varint).bool(message.seasonPay);
        /* bilibili.app.view.v1.GoodsInfo goods_info = 18; */
        if (message.goodsInfo)
            GoodsInfo.internalBinaryWrite(message.goodsInfo, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.ButtonStyle pay_button = 19; */
        if (message.payButton)
            ButtonStyle.internalBinaryWrite(message.payButton, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* string label_text_new = 20; */
        if (message.labelTextNew !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.labelTextNew);
        /* bilibili.app.view.v1.UgcSeasonActivity activity = 21; */
        if (message.activity)
            UgcSeasonActivity.internalBinaryWrite(message.activity, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* repeated string season_ability = 22; */
        for (let i = 0; i < message.seasonAbility.length; i++)
            writer.tag(22, WireType.LengthDelimited).string(message.seasonAbility[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.UgcSeason
 */
export const UgcSeason = new UgcSeason$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UgcSeasonActivity$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.UgcSeasonActivity", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "activity_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "intro", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "day_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "user_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "join_deadline", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "activity_deadline", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "checkin_view_time", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "new_activity", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "user_activity", kind: "message", T: () => UserActivity },
            { no: 13, name: "season_show", kind: "message", T: () => SeasonShow }
        ]);
    }
    create(value) {
        const message = { type: 0, oid: 0n, activityId: 0n, title: "", intro: "", dayCount: 0, userCount: 0, joinDeadline: 0n, activityDeadline: 0n, checkinViewTime: 0, newActivity: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* int64 oid */ 2:
                    message.oid = reader.int64().toBigInt();
                    break;
                case /* int64 activity_id */ 3:
                    message.activityId = reader.int64().toBigInt();
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* string intro */ 5:
                    message.intro = reader.string();
                    break;
                case /* int32 day_count */ 6:
                    message.dayCount = reader.int32();
                    break;
                case /* int32 user_count */ 7:
                    message.userCount = reader.int32();
                    break;
                case /* int64 join_deadline */ 8:
                    message.joinDeadline = reader.int64().toBigInt();
                    break;
                case /* int64 activity_deadline */ 9:
                    message.activityDeadline = reader.int64().toBigInt();
                    break;
                case /* int32 checkin_view_time */ 10:
                    message.checkinViewTime = reader.int32();
                    break;
                case /* bool new_activity */ 11:
                    message.newActivity = reader.bool();
                    break;
                case /* bilibili.app.view.v1.UserActivity user_activity */ 12:
                    message.userActivity = UserActivity.internalBinaryRead(reader, reader.uint32(), options, message.userActivity);
                    break;
                case /* bilibili.app.view.v1.SeasonShow season_show */ 13:
                    message.seasonShow = SeasonShow.internalBinaryRead(reader, reader.uint32(), options, message.seasonShow);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* int64 oid = 2; */
        if (message.oid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.oid);
        /* int64 activity_id = 3; */
        if (message.activityId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.activityId);
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* string intro = 5; */
        if (message.intro !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.intro);
        /* int32 day_count = 6; */
        if (message.dayCount !== 0)
            writer.tag(6, WireType.Varint).int32(message.dayCount);
        /* int32 user_count = 7; */
        if (message.userCount !== 0)
            writer.tag(7, WireType.Varint).int32(message.userCount);
        /* int64 join_deadline = 8; */
        if (message.joinDeadline !== 0n)
            writer.tag(8, WireType.Varint).int64(message.joinDeadline);
        /* int64 activity_deadline = 9; */
        if (message.activityDeadline !== 0n)
            writer.tag(9, WireType.Varint).int64(message.activityDeadline);
        /* int32 checkin_view_time = 10; */
        if (message.checkinViewTime !== 0)
            writer.tag(10, WireType.Varint).int32(message.checkinViewTime);
        /* bool new_activity = 11; */
        if (message.newActivity !== false)
            writer.tag(11, WireType.Varint).bool(message.newActivity);
        /* bilibili.app.view.v1.UserActivity user_activity = 12; */
        if (message.userActivity)
            UserActivity.internalBinaryWrite(message.userActivity, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.SeasonShow season_show = 13; */
        if (message.seasonShow)
            SeasonShow.internalBinaryWrite(message.seasonShow, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.UgcSeasonActivity
 */
export const UgcSeasonActivity = new UgcSeasonActivity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UgcSeasonStat$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.UgcSeasonStat", [
            { no: 1, name: "season_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "view", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "danmaku", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "reply", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "fav", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "coin", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "share", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "now_rank", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "his_rank", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "like", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { seasonId: 0n, view: 0, danmaku: 0, reply: 0, fav: 0, coin: 0, share: 0, nowRank: 0, hisRank: 0, like: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 season_id */ 1:
                    message.seasonId = reader.int64().toBigInt();
                    break;
                case /* int32 view */ 2:
                    message.view = reader.int32();
                    break;
                case /* int32 danmaku */ 3:
                    message.danmaku = reader.int32();
                    break;
                case /* int32 reply */ 4:
                    message.reply = reader.int32();
                    break;
                case /* int32 fav */ 5:
                    message.fav = reader.int32();
                    break;
                case /* int32 coin */ 6:
                    message.coin = reader.int32();
                    break;
                case /* int32 share */ 7:
                    message.share = reader.int32();
                    break;
                case /* int32 now_rank */ 8:
                    message.nowRank = reader.int32();
                    break;
                case /* int32 his_rank */ 9:
                    message.hisRank = reader.int32();
                    break;
                case /* int32 like */ 10:
                    message.like = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 season_id = 1; */
        if (message.seasonId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.seasonId);
        /* int32 view = 2; */
        if (message.view !== 0)
            writer.tag(2, WireType.Varint).int32(message.view);
        /* int32 danmaku = 3; */
        if (message.danmaku !== 0)
            writer.tag(3, WireType.Varint).int32(message.danmaku);
        /* int32 reply = 4; */
        if (message.reply !== 0)
            writer.tag(4, WireType.Varint).int32(message.reply);
        /* int32 fav = 5; */
        if (message.fav !== 0)
            writer.tag(5, WireType.Varint).int32(message.fav);
        /* int32 coin = 6; */
        if (message.coin !== 0)
            writer.tag(6, WireType.Varint).int32(message.coin);
        /* int32 share = 7; */
        if (message.share !== 0)
            writer.tag(7, WireType.Varint).int32(message.share);
        /* int32 now_rank = 8; */
        if (message.nowRank !== 0)
            writer.tag(8, WireType.Varint).int32(message.nowRank);
        /* int32 his_rank = 9; */
        if (message.hisRank !== 0)
            writer.tag(9, WireType.Varint).int32(message.hisRank);
        /* int32 like = 10; */
        if (message.like !== 0)
            writer.tag(10, WireType.Varint).int32(message.like);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.UgcSeasonStat
 */
export const UgcSeasonStat = new UgcSeasonStat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpAct$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.UpAct", [
            { no: 1, name: "sid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "statement", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "image", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "button", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { sid: 0n, mid: 0n, title: "", statement: "", image: "", url: "", button: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 sid */ 1:
                    message.sid = reader.int64().toBigInt();
                    break;
                case /* int64 mid */ 2:
                    message.mid = reader.int64().toBigInt();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string statement */ 4:
                    message.statement = reader.string();
                    break;
                case /* string image */ 5:
                    message.image = reader.string();
                    break;
                case /* string url */ 6:
                    message.url = reader.string();
                    break;
                case /* string button */ 7:
                    message.button = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 sid = 1; */
        if (message.sid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.sid);
        /* int64 mid = 2; */
        if (message.mid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.mid);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string statement = 4; */
        if (message.statement !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.statement);
        /* string image = 5; */
        if (message.image !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.image);
        /* string url = 6; */
        if (message.url !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.url);
        /* string button = 7; */
        if (message.button !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.button);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.UpAct
 */
export const UpAct = new UpAct$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpLikeImg$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.UpLikeImg", [
            { no: 1, name: "pre_img", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "suc_img", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { preImg: "", sucImg: "", content: "", type: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string pre_img */ 1:
                    message.preImg = reader.string();
                    break;
                case /* string suc_img */ 2:
                    message.sucImg = reader.string();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* int64 type */ 4:
                    message.type = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string pre_img = 1; */
        if (message.preImg !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.preImg);
        /* string suc_img = 2; */
        if (message.sucImg !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sucImg);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* int64 type = 4; */
        if (message.type !== 0n)
            writer.tag(4, WireType.Varint).int64(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.UpLikeImg
 */
export const UpLikeImg = new UpLikeImg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpperInfos$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.UpperInfos", [
            { no: 1, name: "fans_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "arc_count_last_half_year", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "first_up_dates", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "total_play_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { fansCount: 0n, arcCountLastHalfYear: 0n, firstUpDates: 0n, totalPlayCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 fans_count */ 1:
                    message.fansCount = reader.int64().toBigInt();
                    break;
                case /* int64 arc_count_last_half_year */ 2:
                    message.arcCountLastHalfYear = reader.int64().toBigInt();
                    break;
                case /* int64 first_up_dates */ 3:
                    message.firstUpDates = reader.int64().toBigInt();
                    break;
                case /* int64 total_play_count */ 4:
                    message.totalPlayCount = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 fans_count = 1; */
        if (message.fansCount !== 0n)
            writer.tag(1, WireType.Varint).int64(message.fansCount);
        /* int64 arc_count_last_half_year = 2; */
        if (message.arcCountLastHalfYear !== 0n)
            writer.tag(2, WireType.Varint).int64(message.arcCountLastHalfYear);
        /* int64 first_up_dates = 3; */
        if (message.firstUpDates !== 0n)
            writer.tag(3, WireType.Varint).int64(message.firstUpDates);
        /* int64 total_play_count = 4; */
        if (message.totalPlayCount !== 0n)
            writer.tag(4, WireType.Varint).int64(message.totalPlayCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.UpperInfos
 */
export const UpperInfos = new UpperInfos$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserActivity$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.UserActivity", [
            { no: 1, name: "user_state", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "last_checkin_date", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "checkin_today", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "user_day_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "user_view_time", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "portrait", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { userState: 0, lastCheckinDate: 0n, checkinToday: 0, userDayCount: 0, userViewTime: 0, portrait: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 user_state */ 1:
                    message.userState = reader.int32();
                    break;
                case /* int64 last_checkin_date */ 2:
                    message.lastCheckinDate = reader.int64().toBigInt();
                    break;
                case /* int32 checkin_today */ 3:
                    message.checkinToday = reader.int32();
                    break;
                case /* int32 user_day_count */ 4:
                    message.userDayCount = reader.int32();
                    break;
                case /* int32 user_view_time */ 5:
                    message.userViewTime = reader.int32();
                    break;
                case /* string portrait */ 6:
                    message.portrait = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 user_state = 1; */
        if (message.userState !== 0)
            writer.tag(1, WireType.Varint).int32(message.userState);
        /* int64 last_checkin_date = 2; */
        if (message.lastCheckinDate !== 0n)
            writer.tag(2, WireType.Varint).int64(message.lastCheckinDate);
        /* int32 checkin_today = 3; */
        if (message.checkinToday !== 0)
            writer.tag(3, WireType.Varint).int32(message.checkinToday);
        /* int32 user_day_count = 4; */
        if (message.userDayCount !== 0)
            writer.tag(4, WireType.Varint).int32(message.userDayCount);
        /* int32 user_view_time = 5; */
        if (message.userViewTime !== 0)
            writer.tag(5, WireType.Varint).int32(message.userViewTime);
        /* string portrait = 6; */
        if (message.portrait !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.portrait);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.UserActivity
 */
export const UserActivity = new UserActivity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserGarb$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.UserGarb", [
            { no: 1, name: "url_image_ani_cut", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "like_toast", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { urlImageAniCut: "", likeToast: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url_image_ani_cut */ 1:
                    message.urlImageAniCut = reader.string();
                    break;
                case /* string like_toast */ 2:
                    message.likeToast = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string url_image_ani_cut = 1; */
        if (message.urlImageAniCut !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.urlImageAniCut);
        /* string like_toast = 2; */
        if (message.likeToast !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.likeToast);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.UserGarb
 */
export const UserGarb = new UserGarb$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserSeason$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.UserSeason", [
            { no: 1, name: "attention", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { attention: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string attention */ 1:
                    message.attention = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string attention = 1; */
        if (message.attention !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.attention);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.UserSeason
 */
export const UserSeason = new UserSeason$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoGuide$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.VideoGuide", [
            { no: 1, name: "attention", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Attention },
            { no: 2, name: "commandDms", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CommandDm },
            { no: 3, name: "operation_card", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => OperationCard },
            { no: 4, name: "operation_card_new", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => OperationCardNew },
            { no: 5, name: "contract_card", kind: "message", T: () => ContractCard },
            { no: 6, name: "cards_second", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => OperationCardV2 }
        ]);
    }
    create(value) {
        const message = { attention: [], commandDms: [], operationCard: [], operationCardNew: [], cardsSecond: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.view.v1.Attention attention */ 1:
                    message.attention.push(Attention.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated bilibili.app.view.v1.CommandDm commandDms */ 2:
                    message.commandDms.push(CommandDm.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated bilibili.app.view.v1.OperationCard operation_card */ 3:
                    message.operationCard.push(OperationCard.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated bilibili.app.view.v1.OperationCardNew operation_card_new */ 4:
                    message.operationCardNew.push(OperationCardNew.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.view.v1.ContractCard contract_card */ 5:
                    message.contractCard = ContractCard.internalBinaryRead(reader, reader.uint32(), options, message.contractCard);
                    break;
                case /* repeated bilibili.app.view.v1.OperationCardV2 cards_second */ 6:
                    message.cardsSecond.push(OperationCardV2.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.app.view.v1.Attention attention = 1; */
        for (let i = 0; i < message.attention.length; i++)
            Attention.internalBinaryWrite(message.attention[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.view.v1.CommandDm commandDms = 2; */
        for (let i = 0; i < message.commandDms.length; i++)
            CommandDm.internalBinaryWrite(message.commandDms[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.view.v1.OperationCard operation_card = 3; */
        for (let i = 0; i < message.operationCard.length; i++)
            OperationCard.internalBinaryWrite(message.operationCard[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.view.v1.OperationCardNew operation_card_new = 4; */
        for (let i = 0; i < message.operationCardNew.length; i++)
            OperationCardNew.internalBinaryWrite(message.operationCardNew[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.ContractCard contract_card = 5; */
        if (message.contractCard)
            ContractCard.internalBinaryWrite(message.contractCard, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.view.v1.OperationCardV2 cards_second = 6; */
        for (let i = 0; i < message.cardsSecond.length; i++)
            OperationCardV2.internalBinaryWrite(message.cardsSecond[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.VideoGuide
 */
export const VideoGuide = new VideoGuide$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoPoint$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.VideoPoint", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "from", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "to", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "cover", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "logo_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { type: 0, from: 0n, to: 0n, content: "", cover: "", logoUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* int64 from */ 2:
                    message.from = reader.int64().toBigInt();
                    break;
                case /* int64 to */ 3:
                    message.to = reader.int64().toBigInt();
                    break;
                case /* string content */ 4:
                    message.content = reader.string();
                    break;
                case /* string cover */ 5:
                    message.cover = reader.string();
                    break;
                case /* string logo_url */ 6:
                    message.logoUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* int64 from = 2; */
        if (message.from !== 0n)
            writer.tag(2, WireType.Varint).int64(message.from);
        /* int64 to = 3; */
        if (message.to !== 0n)
            writer.tag(3, WireType.Varint).int64(message.to);
        /* string content = 4; */
        if (message.content !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.content);
        /* string cover = 5; */
        if (message.cover !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.cover);
        /* string logo_url = 6; */
        if (message.logoUrl !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.logoUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.VideoPoint
 */
export const VideoPoint = new VideoPoint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoShot$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.VideoShot", [
            { no: 1, name: "pv_data", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "img_x_len", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "img_y_len", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "img_x_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "img_y_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "image", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { pvData: "", imgXLen: 0, imgYLen: 0, imgXSize: 0, imgYSize: 0, image: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string pv_data */ 1:
                    message.pvData = reader.string();
                    break;
                case /* int32 img_x_len */ 2:
                    message.imgXLen = reader.int32();
                    break;
                case /* int32 img_y_len */ 3:
                    message.imgYLen = reader.int32();
                    break;
                case /* int32 img_x_size */ 4:
                    message.imgXSize = reader.int32();
                    break;
                case /* int32 img_y_size */ 5:
                    message.imgYSize = reader.int32();
                    break;
                case /* repeated string image */ 6:
                    message.image.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string pv_data = 1; */
        if (message.pvData !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.pvData);
        /* int32 img_x_len = 2; */
        if (message.imgXLen !== 0)
            writer.tag(2, WireType.Varint).int32(message.imgXLen);
        /* int32 img_y_len = 3; */
        if (message.imgYLen !== 0)
            writer.tag(3, WireType.Varint).int32(message.imgYLen);
        /* int32 img_x_size = 4; */
        if (message.imgXSize !== 0)
            writer.tag(4, WireType.Varint).int32(message.imgXSize);
        /* int32 img_y_size = 5; */
        if (message.imgYSize !== 0)
            writer.tag(5, WireType.Varint).int32(message.imgYSize);
        /* repeated string image = 6; */
        for (let i = 0; i < message.image.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.image[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.VideoShot
 */
export const VideoShot = new VideoShot$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewMaterial$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ViewMaterial", [
            { no: 1, name: "oid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "author", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "jump_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { oid: 0n, mid: 0n, title: "", author: "", jumpUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 oid */ 1:
                    message.oid = reader.int64().toBigInt();
                    break;
                case /* int64 mid */ 2:
                    message.mid = reader.int64().toBigInt();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string author */ 4:
                    message.author = reader.string();
                    break;
                case /* string jump_url */ 5:
                    message.jumpUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 oid = 1; */
        if (message.oid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.oid);
        /* int64 mid = 2; */
        if (message.mid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.mid);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string author = 4; */
        if (message.author !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.author);
        /* string jump_url = 5; */
        if (message.jumpUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.jumpUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ViewMaterial
 */
export const ViewMaterial = new ViewMaterial$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewMaterialReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ViewMaterialReply", [
            { no: 1, name: "material_res", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MaterialRes },
            { no: 2, name: "material_left", kind: "message", T: () => MaterialLeft }
        ]);
    }
    create(value) {
        const message = { materialRes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.view.v1.MaterialRes material_res */ 1:
                    message.materialRes.push(MaterialRes.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.view.v1.MaterialLeft material_left */ 2:
                    message.materialLeft = MaterialLeft.internalBinaryRead(reader, reader.uint32(), options, message.materialLeft);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.app.view.v1.MaterialRes material_res = 1; */
        for (let i = 0; i < message.materialRes.length; i++)
            MaterialRes.internalBinaryWrite(message.materialRes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.MaterialLeft material_left = 2; */
        if (message.materialLeft)
            MaterialLeft.internalBinaryWrite(message.materialLeft, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ViewMaterialReply
 */
export const ViewMaterialReply = new ViewMaterialReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewMaterialReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ViewMaterialReq", [
            { no: 1, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "bvid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { aid: 0n, bvid: "", cid: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid */ 1:
                    message.aid = reader.int64().toBigInt();
                    break;
                case /* string bvid */ 2:
                    message.bvid = reader.string();
                    break;
                case /* int64 cid */ 3:
                    message.cid = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 1; */
        if (message.aid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.aid);
        /* string bvid = 2; */
        if (message.bvid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.bvid);
        /* int64 cid = 3; */
        if (message.cid !== 0n)
            writer.tag(3, WireType.Varint).int64(message.cid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ViewMaterialReq
 */
export const ViewMaterialReq = new ViewMaterialReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewPage$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ViewPage", [
            { no: 1, name: "page", kind: "message", T: () => Page },
            { no: 2, name: "audio", kind: "message", T: () => Audio },
            { no: 3, name: "dm", kind: "message", T: () => DM },
            { no: 4, name: "download_title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "download_subtitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { downloadTitle: "", downloadSubtitle: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.archive.v1.Page page */ 1:
                    message.page = Page.internalBinaryRead(reader, reader.uint32(), options, message.page);
                    break;
                case /* bilibili.app.view.v1.Audio audio */ 2:
                    message.audio = Audio.internalBinaryRead(reader, reader.uint32(), options, message.audio);
                    break;
                case /* bilibili.app.view.v1.DM dm */ 3:
                    message.dm = DM.internalBinaryRead(reader, reader.uint32(), options, message.dm);
                    break;
                case /* string download_title */ 4:
                    message.downloadTitle = reader.string();
                    break;
                case /* string download_subtitle */ 5:
                    message.downloadSubtitle = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.archive.v1.Page page = 1; */
        if (message.page)
            Page.internalBinaryWrite(message.page, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.Audio audio = 2; */
        if (message.audio)
            Audio.internalBinaryWrite(message.audio, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.DM dm = 3; */
        if (message.dm)
            DM.internalBinaryWrite(message.dm, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string download_title = 4; */
        if (message.downloadTitle !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.downloadTitle);
        /* string download_subtitle = 5; */
        if (message.downloadSubtitle !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.downloadSubtitle);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ViewPage
 */
export const ViewPage = new ViewPage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewProgressReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ViewProgressReply", [
            { no: 1, name: "video_guide", kind: "message", T: () => VideoGuide },
            { no: 2, name: "chronos", kind: "message", T: () => Chronos },
            { no: 3, name: "arc_shot", kind: "message", T: () => VideoShot },
            { no: 4, name: "points", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VideoPoint },
            { no: 5, name: "point_material", kind: "message", T: () => PointMaterial },
            { no: 6, name: "point_permanent", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "buzzword_periods", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BuzzwordConfig }
        ]);
    }
    create(value) {
        const message = { points: [], pointPermanent: false, buzzwordPeriods: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.view.v1.VideoGuide video_guide */ 1:
                    message.videoGuide = VideoGuide.internalBinaryRead(reader, reader.uint32(), options, message.videoGuide);
                    break;
                case /* bilibili.app.view.v1.Chronos chronos */ 2:
                    message.chronos = Chronos.internalBinaryRead(reader, reader.uint32(), options, message.chronos);
                    break;
                case /* bilibili.app.view.v1.VideoShot arc_shot */ 3:
                    message.arcShot = VideoShot.internalBinaryRead(reader, reader.uint32(), options, message.arcShot);
                    break;
                case /* repeated bilibili.app.view.v1.VideoPoint points */ 4:
                    message.points.push(VideoPoint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.view.v1.PointMaterial point_material */ 5:
                    message.pointMaterial = PointMaterial.internalBinaryRead(reader, reader.uint32(), options, message.pointMaterial);
                    break;
                case /* bool point_permanent */ 6:
                    message.pointPermanent = reader.bool();
                    break;
                case /* repeated bilibili.app.view.v1.BuzzwordConfig buzzword_periods */ 7:
                    message.buzzwordPeriods.push(BuzzwordConfig.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.view.v1.VideoGuide video_guide = 1; */
        if (message.videoGuide)
            VideoGuide.internalBinaryWrite(message.videoGuide, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.Chronos chronos = 2; */
        if (message.chronos)
            Chronos.internalBinaryWrite(message.chronos, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.VideoShot arc_shot = 3; */
        if (message.arcShot)
            VideoShot.internalBinaryWrite(message.arcShot, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.view.v1.VideoPoint points = 4; */
        for (let i = 0; i < message.points.length; i++)
            VideoPoint.internalBinaryWrite(message.points[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.PointMaterial point_material = 5; */
        if (message.pointMaterial)
            PointMaterial.internalBinaryWrite(message.pointMaterial, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bool point_permanent = 6; */
        if (message.pointPermanent !== false)
            writer.tag(6, WireType.Varint).bool(message.pointPermanent);
        /* repeated bilibili.app.view.v1.BuzzwordConfig buzzword_periods = 7; */
        for (let i = 0; i < message.buzzwordPeriods.length; i++)
            BuzzwordConfig.internalBinaryWrite(message.buzzwordPeriods[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ViewProgressReply
 */
export const ViewProgressReply = new ViewProgressReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewProgressReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ViewProgressReq", [
            { no: 1, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "up_mid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "engine_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "message_protocol", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "service_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { aid: 0n, cid: 0n, upMid: 0n, engineVersion: "", messageProtocol: "", serviceKey: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid */ 1:
                    message.aid = reader.int64().toBigInt();
                    break;
                case /* int64 cid */ 2:
                    message.cid = reader.int64().toBigInt();
                    break;
                case /* int64 up_mid */ 3:
                    message.upMid = reader.int64().toBigInt();
                    break;
                case /* string engine_version */ 4:
                    message.engineVersion = reader.string();
                    break;
                case /* string message_protocol */ 5:
                    message.messageProtocol = reader.string();
                    break;
                case /* string service_key */ 6:
                    message.serviceKey = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 1; */
        if (message.aid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.aid);
        /* int64 cid = 2; */
        if (message.cid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.cid);
        /* int64 up_mid = 3; */
        if (message.upMid !== 0n)
            writer.tag(3, WireType.Varint).int64(message.upMid);
        /* string engine_version = 4; */
        if (message.engineVersion !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.engineVersion);
        /* string message_protocol = 5; */
        if (message.messageProtocol !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.messageProtocol);
        /* string service_key = 6; */
        if (message.serviceKey !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.serviceKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ViewProgressReq
 */
export const ViewProgressReq = new ViewProgressReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ViewReply", [
            { no: 1, name: "arc", kind: "message", T: () => Arc },
            { no: 2, name: "pages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ViewPage },
            { no: 3, name: "owner_ext", kind: "message", T: () => OnwerExt },
            { no: 4, name: "req_user", kind: "message", T: () => ReqUser },
            { no: 5, name: "tag", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Tag },
            { no: 6, name: "t_icon", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => TIcon } },
            { no: 7, name: "season", kind: "message", T: () => Season },
            { no: 8, name: "elec_rank", kind: "message", T: () => ElecRank },
            { no: 9, name: "history", kind: "message", T: () => History },
            { no: 10, name: "relates", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Relate },
            { no: 11, name: "dislike", kind: "message", T: () => Dislike },
            { no: 12, name: "player_icon", kind: "message", T: () => PlayerIcon },
            { no: 13, name: "vip_active", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "bvid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "honor", kind: "message", T: () => Honor },
            { no: 16, name: "relate_tab", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RelateTab },
            { no: 17, name: "activity_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "bgm", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Bgm },
            { no: 19, name: "staff", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Staff },
            { no: 20, name: "argue_msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "short_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "play_param", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 23, name: "label", kind: "message", T: () => Label },
            { no: 24, name: "ugc_season", kind: "message", T: () => UgcSeason },
            { no: 25, name: "config", kind: "message", T: () => Config },
            { no: 26, name: "share_subtitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 27, name: "interaction", kind: "message", T: () => Interaction },
            { no: 28, name: "ecode", kind: "enum", T: () => ["bilibili.app.view.v1.ECode", ECode] },
            { no: 29, name: "custom_config", kind: "message", T: () => CustomConfig },
            { no: 30, name: "cms", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CM },
            { no: 31, name: "cm_config", kind: "message", T: () => CMConfig },
            { no: 32, name: "tab", kind: "message", T: () => Tab },
            { no: 33, name: "rank", kind: "message", T: () => Rank },
            { no: 34, name: "tf_panel_customized", kind: "message", T: () => TFPanelCustomized },
            { no: 35, name: "up_act", kind: "message", T: () => UpAct },
            { no: 36, name: "user_garb", kind: "message", T: () => UserGarb },
            { no: 37, name: "activity_season", kind: "message", T: () => ActivitySeason },
            { no: 38, name: "badge_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 39, name: "live_order_info", kind: "message", T: () => LiveOrderInfo },
            { no: 40, name: "desc_v2", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DescV2 },
            { no: 41, name: "cm_ipad", kind: "message", T: () => CmIpad },
            { no: 42, name: "sticker", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ViewMaterial },
            { no: 43, name: "up_like_img", kind: "message", T: () => UpLikeImg },
            { no: 44, name: "like_custom", kind: "message", T: () => LikeCustom },
            { no: 45, name: "desc_tag", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Tag },
            { no: 46, name: "special_cell", kind: "message", T: () => SpecialCell },
            { no: 47, name: "online", kind: "message", T: () => Online },
            { no: 48, name: "cm_under_player", kind: "message", T: () => Any },
            { no: 49, name: "video_source", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ViewMaterial },
            { no: 50, name: "special_cell_new", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SpecialCell },
            { no: 51, name: "premiere", kind: "message", T: () => PremiereResource },
            { no: 52, name: "refresh_special_cell", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 53, name: "material_left", kind: "message", T: () => MaterialLeft },
            { no: 54, name: "notes_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 55, name: "pull_action", kind: "message", T: () => PullClientAction },
            { no: 56, name: "arc_extra", kind: "message", T: () => ArcExtra },
            { no: 57, name: "pagination", kind: "message", T: () => PaginationReply },
            { no: 58, name: "like_animation", kind: "message", T: () => LikeAnimation },
            { no: 59, name: "reply_preface", kind: "message", T: () => ReplyStyle },
            { no: 60, name: "refresh_page", kind: "message", T: () => RefreshPage },
            { no: 61, name: "coin_custom", kind: "message", T: () => CoinCustom }
        ]);
    }
    create(value) {
        const message = { pages: [], tag: [], tIcon: {}, relates: [], vipActive: "", bvid: "", relateTab: [], activityUrl: "", bgm: [], staff: [], argueMsg: "", shortLink: "", playParam: 0, shareSubtitle: "", ecode: 0, cms: [], badgeUrl: "", descV2: [], sticker: [], descTag: [], videoSource: [], specialCellNew: [], refreshSpecialCell: false, notesCount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.archive.v1.Arc arc */ 1:
                    message.arc = Arc.internalBinaryRead(reader, reader.uint32(), options, message.arc);
                    break;
                case /* repeated bilibili.app.view.v1.ViewPage pages */ 2:
                    message.pages.push(ViewPage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.view.v1.OnwerExt owner_ext */ 3:
                    message.ownerExt = OnwerExt.internalBinaryRead(reader, reader.uint32(), options, message.ownerExt);
                    break;
                case /* bilibili.app.view.v1.ReqUser req_user */ 4:
                    message.reqUser = ReqUser.internalBinaryRead(reader, reader.uint32(), options, message.reqUser);
                    break;
                case /* repeated bilibili.app.view.v1.Tag tag */ 5:
                    message.tag.push(Tag.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<string, bilibili.app.view.v1.TIcon> t_icon */ 6:
                    this.binaryReadMap6(message.tIcon, reader, options);
                    break;
                case /* bilibili.app.view.v1.Season season */ 7:
                    message.season = Season.internalBinaryRead(reader, reader.uint32(), options, message.season);
                    break;
                case /* bilibili.app.view.v1.ElecRank elec_rank */ 8:
                    message.elecRank = ElecRank.internalBinaryRead(reader, reader.uint32(), options, message.elecRank);
                    break;
                case /* bilibili.app.view.v1.History history */ 9:
                    message.history = History.internalBinaryRead(reader, reader.uint32(), options, message.history);
                    break;
                case /* repeated bilibili.app.view.v1.Relate relates */ 10:
                    message.relates.push(Relate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.view.v1.Dislike dislike */ 11:
                    message.dislike = Dislike.internalBinaryRead(reader, reader.uint32(), options, message.dislike);
                    break;
                case /* bilibili.app.view.v1.PlayerIcon player_icon */ 12:
                    message.playerIcon = PlayerIcon.internalBinaryRead(reader, reader.uint32(), options, message.playerIcon);
                    break;
                case /* string vip_active */ 13:
                    message.vipActive = reader.string();
                    break;
                case /* string bvid */ 14:
                    message.bvid = reader.string();
                    break;
                case /* bilibili.app.view.v1.Honor honor */ 15:
                    message.honor = Honor.internalBinaryRead(reader, reader.uint32(), options, message.honor);
                    break;
                case /* repeated bilibili.app.view.v1.RelateTab relate_tab */ 16:
                    message.relateTab.push(RelateTab.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string activity_url */ 17:
                    message.activityUrl = reader.string();
                    break;
                case /* repeated bilibili.app.view.v1.Bgm bgm */ 18:
                    message.bgm.push(Bgm.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated bilibili.app.view.v1.Staff staff */ 19:
                    message.staff.push(Staff.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string argue_msg */ 20:
                    message.argueMsg = reader.string();
                    break;
                case /* string short_link */ 21:
                    message.shortLink = reader.string();
                    break;
                case /* int32 play_param */ 22:
                    message.playParam = reader.int32();
                    break;
                case /* bilibili.app.view.v1.Label label */ 23:
                    message.label = Label.internalBinaryRead(reader, reader.uint32(), options, message.label);
                    break;
                case /* bilibili.app.view.v1.UgcSeason ugc_season */ 24:
                    message.ugcSeason = UgcSeason.internalBinaryRead(reader, reader.uint32(), options, message.ugcSeason);
                    break;
                case /* bilibili.app.view.v1.Config config */ 25:
                    message.config = Config.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                case /* string share_subtitle */ 26:
                    message.shareSubtitle = reader.string();
                    break;
                case /* bilibili.app.view.v1.Interaction interaction */ 27:
                    message.interaction = Interaction.internalBinaryRead(reader, reader.uint32(), options, message.interaction);
                    break;
                case /* bilibili.app.view.v1.ECode ecode */ 28:
                    message.ecode = reader.int32();
                    break;
                case /* bilibili.app.view.v1.CustomConfig custom_config */ 29:
                    message.customConfig = CustomConfig.internalBinaryRead(reader, reader.uint32(), options, message.customConfig);
                    break;
                case /* repeated bilibili.app.view.v1.CM cms */ 30:
                    message.cms.push(CM.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.view.v1.CMConfig cm_config */ 31:
                    message.cmConfig = CMConfig.internalBinaryRead(reader, reader.uint32(), options, message.cmConfig);
                    break;
                case /* bilibili.app.view.v1.Tab tab */ 32:
                    message.tab = Tab.internalBinaryRead(reader, reader.uint32(), options, message.tab);
                    break;
                case /* bilibili.app.view.v1.Rank rank */ 33:
                    message.rank = Rank.internalBinaryRead(reader, reader.uint32(), options, message.rank);
                    break;
                case /* bilibili.app.view.v1.TFPanelCustomized tf_panel_customized */ 34:
                    message.tfPanelCustomized = TFPanelCustomized.internalBinaryRead(reader, reader.uint32(), options, message.tfPanelCustomized);
                    break;
                case /* bilibili.app.view.v1.UpAct up_act */ 35:
                    message.upAct = UpAct.internalBinaryRead(reader, reader.uint32(), options, message.upAct);
                    break;
                case /* bilibili.app.view.v1.UserGarb user_garb */ 36:
                    message.userGarb = UserGarb.internalBinaryRead(reader, reader.uint32(), options, message.userGarb);
                    break;
                case /* bilibili.app.view.v1.ActivitySeason activity_season */ 37:
                    message.activitySeason = ActivitySeason.internalBinaryRead(reader, reader.uint32(), options, message.activitySeason);
                    break;
                case /* string badge_url */ 38:
                    message.badgeUrl = reader.string();
                    break;
                case /* bilibili.app.view.v1.LiveOrderInfo live_order_info */ 39:
                    message.liveOrderInfo = LiveOrderInfo.internalBinaryRead(reader, reader.uint32(), options, message.liveOrderInfo);
                    break;
                case /* repeated bilibili.app.view.v1.DescV2 desc_v2 */ 40:
                    message.descV2.push(DescV2.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.view.v1.CmIpad cm_ipad */ 41:
                    message.cmIpad = CmIpad.internalBinaryRead(reader, reader.uint32(), options, message.cmIpad);
                    break;
                case /* repeated bilibili.app.view.v1.ViewMaterial sticker */ 42:
                    message.sticker.push(ViewMaterial.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.view.v1.UpLikeImg up_like_img */ 43:
                    message.upLikeImg = UpLikeImg.internalBinaryRead(reader, reader.uint32(), options, message.upLikeImg);
                    break;
                case /* bilibili.app.view.v1.LikeCustom like_custom */ 44:
                    message.likeCustom = LikeCustom.internalBinaryRead(reader, reader.uint32(), options, message.likeCustom);
                    break;
                case /* repeated bilibili.app.view.v1.Tag desc_tag */ 45:
                    message.descTag.push(Tag.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.view.v1.SpecialCell special_cell */ 46:
                    message.specialCell = SpecialCell.internalBinaryRead(reader, reader.uint32(), options, message.specialCell);
                    break;
                case /* bilibili.app.view.v1.Online online */ 47:
                    message.online = Online.internalBinaryRead(reader, reader.uint32(), options, message.online);
                    break;
                case /* google.protobuf.Any cm_under_player */ 48:
                    message.cmUnderPlayer = Any.internalBinaryRead(reader, reader.uint32(), options, message.cmUnderPlayer);
                    break;
                case /* repeated bilibili.app.view.v1.ViewMaterial video_source */ 49:
                    message.videoSource.push(ViewMaterial.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated bilibili.app.view.v1.SpecialCell special_cell_new */ 50:
                    message.specialCellNew.push(SpecialCell.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.view.v1.PremiereResource premiere */ 51:
                    message.premiere = PremiereResource.internalBinaryRead(reader, reader.uint32(), options, message.premiere);
                    break;
                case /* bool refresh_special_cell */ 52:
                    message.refreshSpecialCell = reader.bool();
                    break;
                case /* bilibili.app.view.v1.MaterialLeft material_left */ 53:
                    message.materialLeft = MaterialLeft.internalBinaryRead(reader, reader.uint32(), options, message.materialLeft);
                    break;
                case /* int64 notes_count */ 54:
                    message.notesCount = reader.int64().toBigInt();
                    break;
                case /* bilibili.app.view.v1.PullClientAction pull_action */ 55:
                    message.pullAction = PullClientAction.internalBinaryRead(reader, reader.uint32(), options, message.pullAction);
                    break;
                case /* bilibili.app.view.v1.ArcExtra arc_extra */ 56:
                    message.arcExtra = ArcExtra.internalBinaryRead(reader, reader.uint32(), options, message.arcExtra);
                    break;
                case /* bilibili.pagination.PaginationReply pagination */ 57:
                    message.pagination = PaginationReply.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* bilibili.app.view.v1.LikeAnimation like_animation */ 58:
                    message.likeAnimation = LikeAnimation.internalBinaryRead(reader, reader.uint32(), options, message.likeAnimation);
                    break;
                case /* bilibili.app.view.v1.ReplyStyle reply_preface */ 59:
                    message.replyPreface = ReplyStyle.internalBinaryRead(reader, reader.uint32(), options, message.replyPreface);
                    break;
                case /* bilibili.app.view.v1.RefreshPage refresh_page */ 60:
                    message.refreshPage = RefreshPage.internalBinaryRead(reader, reader.uint32(), options, message.refreshPage);
                    break;
                case /* bilibili.app.view.v1.CoinCustom coin_custom */ 61:
                    message.coinCustom = CoinCustom.internalBinaryRead(reader, reader.uint32(), options, message.coinCustom);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap6(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = TIcon.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.view.v1.ViewReply.t_icon");
            }
        }
        map[key ?? ""] = val ?? TIcon.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.archive.v1.Arc arc = 1; */
        if (message.arc)
            Arc.internalBinaryWrite(message.arc, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.view.v1.ViewPage pages = 2; */
        for (let i = 0; i < message.pages.length; i++)
            ViewPage.internalBinaryWrite(message.pages[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.OnwerExt owner_ext = 3; */
        if (message.ownerExt)
            OnwerExt.internalBinaryWrite(message.ownerExt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.ReqUser req_user = 4; */
        if (message.reqUser)
            ReqUser.internalBinaryWrite(message.reqUser, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.view.v1.Tag tag = 5; */
        for (let i = 0; i < message.tag.length; i++)
            Tag.internalBinaryWrite(message.tag[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* map<string, bilibili.app.view.v1.TIcon> t_icon = 6; */
        for (let k of Object.keys(message.tIcon)) {
            writer.tag(6, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            TIcon.internalBinaryWrite(message.tIcon[k], writer, options);
            writer.join().join();
        }
        /* bilibili.app.view.v1.Season season = 7; */
        if (message.season)
            Season.internalBinaryWrite(message.season, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.ElecRank elec_rank = 8; */
        if (message.elecRank)
            ElecRank.internalBinaryWrite(message.elecRank, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.History history = 9; */
        if (message.history)
            History.internalBinaryWrite(message.history, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.view.v1.Relate relates = 10; */
        for (let i = 0; i < message.relates.length; i++)
            Relate.internalBinaryWrite(message.relates[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.Dislike dislike = 11; */
        if (message.dislike)
            Dislike.internalBinaryWrite(message.dislike, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.PlayerIcon player_icon = 12; */
        if (message.playerIcon)
            PlayerIcon.internalBinaryWrite(message.playerIcon, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* string vip_active = 13; */
        if (message.vipActive !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.vipActive);
        /* string bvid = 14; */
        if (message.bvid !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.bvid);
        /* bilibili.app.view.v1.Honor honor = 15; */
        if (message.honor)
            Honor.internalBinaryWrite(message.honor, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.view.v1.RelateTab relate_tab = 16; */
        for (let i = 0; i < message.relateTab.length; i++)
            RelateTab.internalBinaryWrite(message.relateTab[i], writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* string activity_url = 17; */
        if (message.activityUrl !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.activityUrl);
        /* repeated bilibili.app.view.v1.Bgm bgm = 18; */
        for (let i = 0; i < message.bgm.length; i++)
            Bgm.internalBinaryWrite(message.bgm[i], writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.view.v1.Staff staff = 19; */
        for (let i = 0; i < message.staff.length; i++)
            Staff.internalBinaryWrite(message.staff[i], writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* string argue_msg = 20; */
        if (message.argueMsg !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.argueMsg);
        /* string short_link = 21; */
        if (message.shortLink !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.shortLink);
        /* int32 play_param = 22; */
        if (message.playParam !== 0)
            writer.tag(22, WireType.Varint).int32(message.playParam);
        /* bilibili.app.view.v1.Label label = 23; */
        if (message.label)
            Label.internalBinaryWrite(message.label, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.UgcSeason ugc_season = 24; */
        if (message.ugcSeason)
            UgcSeason.internalBinaryWrite(message.ugcSeason, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.Config config = 25; */
        if (message.config)
            Config.internalBinaryWrite(message.config, writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* string share_subtitle = 26; */
        if (message.shareSubtitle !== "")
            writer.tag(26, WireType.LengthDelimited).string(message.shareSubtitle);
        /* bilibili.app.view.v1.Interaction interaction = 27; */
        if (message.interaction)
            Interaction.internalBinaryWrite(message.interaction, writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.ECode ecode = 28; */
        if (message.ecode !== 0)
            writer.tag(28, WireType.Varint).int32(message.ecode);
        /* bilibili.app.view.v1.CustomConfig custom_config = 29; */
        if (message.customConfig)
            CustomConfig.internalBinaryWrite(message.customConfig, writer.tag(29, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.view.v1.CM cms = 30; */
        for (let i = 0; i < message.cms.length; i++)
            CM.internalBinaryWrite(message.cms[i], writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.CMConfig cm_config = 31; */
        if (message.cmConfig)
            CMConfig.internalBinaryWrite(message.cmConfig, writer.tag(31, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.Tab tab = 32; */
        if (message.tab)
            Tab.internalBinaryWrite(message.tab, writer.tag(32, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.Rank rank = 33; */
        if (message.rank)
            Rank.internalBinaryWrite(message.rank, writer.tag(33, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.TFPanelCustomized tf_panel_customized = 34; */
        if (message.tfPanelCustomized)
            TFPanelCustomized.internalBinaryWrite(message.tfPanelCustomized, writer.tag(34, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.UpAct up_act = 35; */
        if (message.upAct)
            UpAct.internalBinaryWrite(message.upAct, writer.tag(35, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.UserGarb user_garb = 36; */
        if (message.userGarb)
            UserGarb.internalBinaryWrite(message.userGarb, writer.tag(36, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.ActivitySeason activity_season = 37; */
        if (message.activitySeason)
            ActivitySeason.internalBinaryWrite(message.activitySeason, writer.tag(37, WireType.LengthDelimited).fork(), options).join();
        /* string badge_url = 38; */
        if (message.badgeUrl !== "")
            writer.tag(38, WireType.LengthDelimited).string(message.badgeUrl);
        /* bilibili.app.view.v1.LiveOrderInfo live_order_info = 39; */
        if (message.liveOrderInfo)
            LiveOrderInfo.internalBinaryWrite(message.liveOrderInfo, writer.tag(39, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.view.v1.DescV2 desc_v2 = 40; */
        for (let i = 0; i < message.descV2.length; i++)
            DescV2.internalBinaryWrite(message.descV2[i], writer.tag(40, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.CmIpad cm_ipad = 41; */
        if (message.cmIpad)
            CmIpad.internalBinaryWrite(message.cmIpad, writer.tag(41, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.view.v1.ViewMaterial sticker = 42; */
        for (let i = 0; i < message.sticker.length; i++)
            ViewMaterial.internalBinaryWrite(message.sticker[i], writer.tag(42, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.UpLikeImg up_like_img = 43; */
        if (message.upLikeImg)
            UpLikeImg.internalBinaryWrite(message.upLikeImg, writer.tag(43, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.LikeCustom like_custom = 44; */
        if (message.likeCustom)
            LikeCustom.internalBinaryWrite(message.likeCustom, writer.tag(44, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.view.v1.Tag desc_tag = 45; */
        for (let i = 0; i < message.descTag.length; i++)
            Tag.internalBinaryWrite(message.descTag[i], writer.tag(45, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.SpecialCell special_cell = 46; */
        if (message.specialCell)
            SpecialCell.internalBinaryWrite(message.specialCell, writer.tag(46, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.Online online = 47; */
        if (message.online)
            Online.internalBinaryWrite(message.online, writer.tag(47, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Any cm_under_player = 48; */
        if (message.cmUnderPlayer)
            Any.internalBinaryWrite(message.cmUnderPlayer, writer.tag(48, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.view.v1.ViewMaterial video_source = 49; */
        for (let i = 0; i < message.videoSource.length; i++)
            ViewMaterial.internalBinaryWrite(message.videoSource[i], writer.tag(49, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.view.v1.SpecialCell special_cell_new = 50; */
        for (let i = 0; i < message.specialCellNew.length; i++)
            SpecialCell.internalBinaryWrite(message.specialCellNew[i], writer.tag(50, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.PremiereResource premiere = 51; */
        if (message.premiere)
            PremiereResource.internalBinaryWrite(message.premiere, writer.tag(51, WireType.LengthDelimited).fork(), options).join();
        /* bool refresh_special_cell = 52; */
        if (message.refreshSpecialCell !== false)
            writer.tag(52, WireType.Varint).bool(message.refreshSpecialCell);
        /* bilibili.app.view.v1.MaterialLeft material_left = 53; */
        if (message.materialLeft)
            MaterialLeft.internalBinaryWrite(message.materialLeft, writer.tag(53, WireType.LengthDelimited).fork(), options).join();
        /* int64 notes_count = 54; */
        if (message.notesCount !== 0n)
            writer.tag(54, WireType.Varint).int64(message.notesCount);
        /* bilibili.app.view.v1.PullClientAction pull_action = 55; */
        if (message.pullAction)
            PullClientAction.internalBinaryWrite(message.pullAction, writer.tag(55, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.ArcExtra arc_extra = 56; */
        if (message.arcExtra)
            ArcExtra.internalBinaryWrite(message.arcExtra, writer.tag(56, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.pagination.PaginationReply pagination = 57; */
        if (message.pagination)
            PaginationReply.internalBinaryWrite(message.pagination, writer.tag(57, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.LikeAnimation like_animation = 58; */
        if (message.likeAnimation)
            LikeAnimation.internalBinaryWrite(message.likeAnimation, writer.tag(58, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.ReplyStyle reply_preface = 59; */
        if (message.replyPreface)
            ReplyStyle.internalBinaryWrite(message.replyPreface, writer.tag(59, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.RefreshPage refresh_page = 60; */
        if (message.refreshPage)
            RefreshPage.internalBinaryWrite(message.refreshPage, writer.tag(60, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.CoinCustom coin_custom = 61; */
        if (message.coinCustom)
            CoinCustom.internalBinaryWrite(message.coinCustom, writer.tag(61, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ViewReply
 */
export const ViewReply = new ViewReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ViewReq", [
            { no: 1, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "bvid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "from", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "trackid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "ad_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "qn", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "fnver", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "fnval", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "force_host", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "fourk", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "from_spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "autoplay", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "player_args", kind: "message", T: () => PlayerArgs },
            { no: 15, name: "page_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "biz_extra", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "device_type", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "relates_page", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 19, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "in_feed_play", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 21, name: "play_mode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "pagination", kind: "message", T: () => Pagination },
            { no: 23, name: "refresh", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 24, name: "refresh_num", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { aid: 0n, bvid: "", from: "", trackid: "", adExtra: "", qn: 0, fnver: 0, fnval: 0, forceHost: 0, fourk: 0, spmid: "", fromSpmid: "", autoplay: 0, pageVersion: "", bizExtra: "", deviceType: 0n, relatesPage: 0n, sessionId: "", inFeedPlay: 0, playMode: "", refresh: 0, refreshNum: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid */ 1:
                    message.aid = reader.int64().toBigInt();
                    break;
                case /* string bvid */ 2:
                    message.bvid = reader.string();
                    break;
                case /* string from */ 3:
                    message.from = reader.string();
                    break;
                case /* string trackid */ 4:
                    message.trackid = reader.string();
                    break;
                case /* string ad_extra */ 5:
                    message.adExtra = reader.string();
                    break;
                case /* int32 qn */ 6:
                    message.qn = reader.int32();
                    break;
                case /* int32 fnver */ 7:
                    message.fnver = reader.int32();
                    break;
                case /* int32 fnval */ 8:
                    message.fnval = reader.int32();
                    break;
                case /* int32 force_host */ 9:
                    message.forceHost = reader.int32();
                    break;
                case /* int32 fourk */ 10:
                    message.fourk = reader.int32();
                    break;
                case /* string spmid */ 11:
                    message.spmid = reader.string();
                    break;
                case /* string from_spmid */ 12:
                    message.fromSpmid = reader.string();
                    break;
                case /* int32 autoplay */ 13:
                    message.autoplay = reader.int32();
                    break;
                case /* bilibili.app.archive.middleware.v1.PlayerArgs player_args */ 14:
                    message.playerArgs = PlayerArgs.internalBinaryRead(reader, reader.uint32(), options, message.playerArgs);
                    break;
                case /* string page_version */ 15:
                    message.pageVersion = reader.string();
                    break;
                case /* string biz_extra */ 16:
                    message.bizExtra = reader.string();
                    break;
                case /* int64 device_type */ 17:
                    message.deviceType = reader.int64().toBigInt();
                    break;
                case /* int64 relates_page */ 18:
                    message.relatesPage = reader.int64().toBigInt();
                    break;
                case /* string session_id */ 19:
                    message.sessionId = reader.string();
                    break;
                case /* int32 in_feed_play */ 20:
                    message.inFeedPlay = reader.int32();
                    break;
                case /* string play_mode */ 21:
                    message.playMode = reader.string();
                    break;
                case /* bilibili.pagination.Pagination pagination */ 22:
                    message.pagination = Pagination.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* int32 refresh */ 23:
                    message.refresh = reader.int32();
                    break;
                case /* int32 refresh_num */ 24:
                    message.refreshNum = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 1; */
        if (message.aid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.aid);
        /* string bvid = 2; */
        if (message.bvid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.bvid);
        /* string from = 3; */
        if (message.from !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.from);
        /* string trackid = 4; */
        if (message.trackid !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.trackid);
        /* string ad_extra = 5; */
        if (message.adExtra !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.adExtra);
        /* int32 qn = 6; */
        if (message.qn !== 0)
            writer.tag(6, WireType.Varint).int32(message.qn);
        /* int32 fnver = 7; */
        if (message.fnver !== 0)
            writer.tag(7, WireType.Varint).int32(message.fnver);
        /* int32 fnval = 8; */
        if (message.fnval !== 0)
            writer.tag(8, WireType.Varint).int32(message.fnval);
        /* int32 force_host = 9; */
        if (message.forceHost !== 0)
            writer.tag(9, WireType.Varint).int32(message.forceHost);
        /* int32 fourk = 10; */
        if (message.fourk !== 0)
            writer.tag(10, WireType.Varint).int32(message.fourk);
        /* string spmid = 11; */
        if (message.spmid !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.spmid);
        /* string from_spmid = 12; */
        if (message.fromSpmid !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.fromSpmid);
        /* int32 autoplay = 13; */
        if (message.autoplay !== 0)
            writer.tag(13, WireType.Varint).int32(message.autoplay);
        /* bilibili.app.archive.middleware.v1.PlayerArgs player_args = 14; */
        if (message.playerArgs)
            PlayerArgs.internalBinaryWrite(message.playerArgs, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* string page_version = 15; */
        if (message.pageVersion !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.pageVersion);
        /* string biz_extra = 16; */
        if (message.bizExtra !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.bizExtra);
        /* int64 device_type = 17; */
        if (message.deviceType !== 0n)
            writer.tag(17, WireType.Varint).int64(message.deviceType);
        /* int64 relates_page = 18; */
        if (message.relatesPage !== 0n)
            writer.tag(18, WireType.Varint).int64(message.relatesPage);
        /* string session_id = 19; */
        if (message.sessionId !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.sessionId);
        /* int32 in_feed_play = 20; */
        if (message.inFeedPlay !== 0)
            writer.tag(20, WireType.Varint).int32(message.inFeedPlay);
        /* string play_mode = 21; */
        if (message.playMode !== "")
            writer.tag(21, WireType.LengthDelimited).string(message.playMode);
        /* bilibili.pagination.Pagination pagination = 22; */
        if (message.pagination)
            Pagination.internalBinaryWrite(message.pagination, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* int32 refresh = 23; */
        if (message.refresh !== 0)
            writer.tag(23, WireType.Varint).int32(message.refresh);
        /* int32 refresh_num = 24; */
        if (message.refreshNum !== 0)
            writer.tag(24, WireType.Varint).int32(message.refreshNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ViewReq
 */
export const ViewReq = new ViewReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewTagReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ViewTagReply", [
            { no: 1, name: "special_cell_new", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SpecialCell },
            { no: 2, name: "material_left", kind: "message", T: () => MaterialLeft }
        ]);
    }
    create(value) {
        const message = { specialCellNew: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.view.v1.SpecialCell special_cell_new */ 1:
                    message.specialCellNew.push(SpecialCell.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.view.v1.MaterialLeft material_left */ 2:
                    message.materialLeft = MaterialLeft.internalBinaryRead(reader, reader.uint32(), options, message.materialLeft);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.app.view.v1.SpecialCell special_cell_new = 1; */
        for (let i = 0; i < message.specialCellNew.length; i++)
            SpecialCell.internalBinaryWrite(message.specialCellNew[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.view.v1.MaterialLeft material_left = 2; */
        if (message.materialLeft)
            MaterialLeft.internalBinaryWrite(message.materialLeft, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ViewTagReply
 */
export const ViewTagReply = new ViewTagReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewTagReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.ViewTagReq", [
            { no: 1, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "bvid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { aid: 0n, bvid: "", cid: 0n, spmid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid */ 1:
                    message.aid = reader.int64().toBigInt();
                    break;
                case /* string bvid */ 2:
                    message.bvid = reader.string();
                    break;
                case /* int64 cid */ 3:
                    message.cid = reader.int64().toBigInt();
                    break;
                case /* string spmid */ 4:
                    message.spmid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 1; */
        if (message.aid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.aid);
        /* string bvid = 2; */
        if (message.bvid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.bvid);
        /* int64 cid = 3; */
        if (message.cid !== 0n)
            writer.tag(3, WireType.Varint).int64(message.cid);
        /* string spmid = 4; */
        if (message.spmid !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.spmid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.ViewTagReq
 */
export const ViewTagReq = new ViewTagReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Vip$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.Vip", [
            { no: 1, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "due_date", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "due_remark", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "access_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "vip_status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "vip_status_warn", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "theme_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "label", kind: "message", T: () => VipLabel }
        ]);
    }
    create(value) {
        const message = { type: 0, dueDate: 0n, dueRemark: "", accessStatus: 0, vipStatus: 0, vipStatusWarn: "", themeType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 type */ 1:
                    message.type = reader.int32();
                    break;
                case /* int64 due_date */ 2:
                    message.dueDate = reader.int64().toBigInt();
                    break;
                case /* string due_remark */ 3:
                    message.dueRemark = reader.string();
                    break;
                case /* int32 access_status */ 4:
                    message.accessStatus = reader.int32();
                    break;
                case /* int32 vip_status */ 5:
                    message.vipStatus = reader.int32();
                    break;
                case /* string vip_status_warn */ 6:
                    message.vipStatusWarn = reader.string();
                    break;
                case /* int32 theme_type */ 7:
                    message.themeType = reader.int32();
                    break;
                case /* bilibili.app.view.v1.VipLabel label */ 8:
                    message.label = VipLabel.internalBinaryRead(reader, reader.uint32(), options, message.label);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* int64 due_date = 2; */
        if (message.dueDate !== 0n)
            writer.tag(2, WireType.Varint).int64(message.dueDate);
        /* string due_remark = 3; */
        if (message.dueRemark !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.dueRemark);
        /* int32 access_status = 4; */
        if (message.accessStatus !== 0)
            writer.tag(4, WireType.Varint).int32(message.accessStatus);
        /* int32 vip_status = 5; */
        if (message.vipStatus !== 0)
            writer.tag(5, WireType.Varint).int32(message.vipStatus);
        /* string vip_status_warn = 6; */
        if (message.vipStatusWarn !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.vipStatusWarn);
        /* int32 theme_type = 7; */
        if (message.themeType !== 0)
            writer.tag(7, WireType.Varint).int32(message.themeType);
        /* bilibili.app.view.v1.VipLabel label = 8; */
        if (message.label)
            VipLabel.internalBinaryWrite(message.label, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.Vip
 */
export const Vip = new Vip$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VipLabel$Type extends MessageType {
    constructor() {
        super("bilibili.app.view.v1.VipLabel", [
            { no: 1, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "label_theme", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { path: "", text: "", labelTheme: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string path */ 1:
                    message.path = reader.string();
                    break;
                case /* string text */ 2:
                    message.text = reader.string();
                    break;
                case /* string label_theme */ 3:
                    message.labelTheme = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string path = 1; */
        if (message.path !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.path);
        /* string text = 2; */
        if (message.text !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.text);
        /* string label_theme = 3; */
        if (message.labelTheme !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.labelTheme);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.view.v1.VipLabel
 */
export const VipLabel = new VipLabel$Type();
/**
 * @generated ServiceType for protobuf service bilibili.app.view.v1.View
 */
export const View = new ServiceType("bilibili.app.view.v1.View", [
    { name: "View", options: {}, I: ViewReq, O: ViewReply },
    { name: "ViewTag", options: {}, I: ViewTagReq, O: ViewTagReply },
    { name: "ViewMaterial", options: {}, I: ViewMaterialReq, O: ViewMaterialReply },
    { name: "ViewProgress", options: {}, I: ViewProgressReq, O: ViewProgressReply },
    { name: "ShortFormVideoDownload", options: {}, I: ShortFormVideoDownloadReq, O: ShortFormVideoDownloadReply },
    { name: "ClickPlayerCard", options: {}, I: ClickPlayerCardReq, O: NoReply },
    { name: "ClickActivitySeason", options: {}, I: ClickActivitySeasonReq, O: NoReply },
    { name: "Season", options: {}, I: SeasonReq, O: SeasonReply },
    { name: "ExposePlayerCard", options: {}, I: ExposePlayerCardReq, O: NoReply },
    { name: "AddContract", options: {}, I: AddContractReq, O: NoReply },
    { name: "ChronosPkg", options: {}, I: ChronosPkgReq, O: Chronos },
    { name: "CacheView", options: {}, I: CacheViewReq, O: CacheViewReply },
    { name: "ContinuousPlay", options: {}, I: ContinuousPlayReq, O: ContinuousPlayReply },
    { name: "RelatesFeed", options: {}, I: RelatesFeedReq, O: RelatesFeedReply },
    { name: "PremiereArchive", options: {}, I: PremiereArchiveReq, O: PremiereArchiveReply },
    { name: "Reserve", options: {}, I: ReserveReq, O: ReserveReply },
    { name: "PlayerRelates", options: {}, I: PlayerRelatesReq, O: PlayerRelatesReply },
    { name: "SeasonActivityRecord", options: {}, I: SeasonActivityRecordReq, O: SeasonActivityRecordReply },
    { name: "SeasonWidgetExpose", options: {}, I: SeasonWidgetExposeReq, O: SeasonWidgetExposeReply },
    { name: "GetArcsPlayer", options: {}, I: GetArcsPlayerReq, O: GetArcsPlayerReply }
]);
