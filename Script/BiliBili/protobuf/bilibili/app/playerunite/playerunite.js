// @generated by protobuf-ts 2.9.0 with parameter output_javascript
// @generated from protobuf file "bilibili/app/playerunite/v1/playerunite.proto" (package "bilibili.app.playerunite.v1", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.0 with parameter output_javascript
// @generated from protobuf file "bilibili/app/playerunite/v1/playerunite.proto" (package "bilibili.app.playerunite.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { History } from "../../../playershared/playershared";
import { QnTrialInfo } from "../../../playershared/playershared";
import { PlayArc } from "../../../playershared/playershared";
import { Any } from "../../../../google/protobuf/any";
import { Event } from "../../../playershared/playershared";
import { PlayDeviceConf } from "../../../playershared/playershared";
import { PlayArcConf } from "../../../playershared/playershared";
import { VodInfo } from "../../../playershared/playershared";
import { VideoVod } from "../../../playershared/playershared";
// @generated message type with reflection information, may provide speed optimized methods
class PlayViewUniteReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.playerunite.v1.PlayViewUniteReq", [
            { no: 1, name: "vod", kind: "message", T: () => VideoVod },
            { no: 2, name: "spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "from_spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "extra_content", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value) {
        const message = { spmid: "", fromSpmid: "", extraContent: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.playershared.VideoVod vod */ 1:
                    message.vod = VideoVod.internalBinaryRead(reader, reader.uint32(), options, message.vod);
                    break;
                case /* string spmid */ 2:
                    message.spmid = reader.string();
                    break;
                case /* string from_spmid */ 3:
                    message.fromSpmid = reader.string();
                    break;
                case /* map<string, string> extra_content */ 4:
                    this.binaryReadMap4(message.extraContent, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap4(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field bilibili.app.playerunite.v1.PlayViewUniteReq.extra_content");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.playershared.VideoVod vod = 1; */
        if (message.vod)
            VideoVod.internalBinaryWrite(message.vod, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string spmid = 2; */
        if (message.spmid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.spmid);
        /* string from_spmid = 3; */
        if (message.fromSpmid !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fromSpmid);
        /* map<string, string> extra_content = 4; */
        for (let k of Object.keys(message.extraContent))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.extraContent[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.PlayViewUniteReq
 */
export const PlayViewUniteReq = new PlayViewUniteReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayViewUniteReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.playerunite.v1.PlayViewUniteReply", [
            { no: 1, name: "vod_info", kind: "message", T: () => VodInfo },
            { no: 2, name: "play_arc_conf", kind: "message", T: () => PlayArcConf },
            { no: 3, name: "play_device_conf", kind: "message", T: () => PlayDeviceConf },
            { no: 4, name: "event", kind: "message", T: () => Event },
            { no: 5, name: "supplement", kind: "message", T: () => Any },
            { no: 6, name: "play_arc", kind: "message", T: () => PlayArc },
            { no: 7, name: "qn_trial_info", kind: "message", T: () => QnTrialInfo },
            { no: 8, name: "history", kind: "message", T: () => History }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.playershared.VodInfo vod_info */ 1:
                    message.vodInfo = VodInfo.internalBinaryRead(reader, reader.uint32(), options, message.vodInfo);
                    break;
                case /* bilibili.playershared.PlayArcConf play_arc_conf */ 2:
                    message.playArcConf = PlayArcConf.internalBinaryRead(reader, reader.uint32(), options, message.playArcConf);
                    break;
                case /* bilibili.playershared.PlayDeviceConf play_device_conf */ 3:
                    message.playDeviceConf = PlayDeviceConf.internalBinaryRead(reader, reader.uint32(), options, message.playDeviceConf);
                    break;
                case /* bilibili.playershared.Event event */ 4:
                    message.event = Event.internalBinaryRead(reader, reader.uint32(), options, message.event);
                    break;
                case /* google.protobuf.Any supplement */ 5:
                    message.supplement = Any.internalBinaryRead(reader, reader.uint32(), options, message.supplement);
                    break;
                case /* bilibili.playershared.PlayArc play_arc */ 6:
                    message.playArc = PlayArc.internalBinaryRead(reader, reader.uint32(), options, message.playArc);
                    break;
                case /* bilibili.playershared.QnTrialInfo qn_trial_info */ 7:
                    message.qnTrialInfo = QnTrialInfo.internalBinaryRead(reader, reader.uint32(), options, message.qnTrialInfo);
                    break;
                case /* bilibili.playershared.History history */ 8:
                    message.history = History.internalBinaryRead(reader, reader.uint32(), options, message.history);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.playershared.VodInfo vod_info = 1; */
        if (message.vodInfo)
            VodInfo.internalBinaryWrite(message.vodInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.PlayArcConf play_arc_conf = 2; */
        if (message.playArcConf)
            PlayArcConf.internalBinaryWrite(message.playArcConf, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.PlayDeviceConf play_device_conf = 3; */
        if (message.playDeviceConf)
            PlayDeviceConf.internalBinaryWrite(message.playDeviceConf, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.Event event = 4; */
        if (message.event)
            Event.internalBinaryWrite(message.event, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Any supplement = 5; */
        if (message.supplement)
            Any.internalBinaryWrite(message.supplement, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.PlayArc play_arc = 6; */
        if (message.playArc)
            PlayArc.internalBinaryWrite(message.playArc, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.QnTrialInfo qn_trial_info = 7; */
        if (message.qnTrialInfo)
            QnTrialInfo.internalBinaryWrite(message.qnTrialInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.playershared.History history = 8; */
        if (message.history)
            History.internalBinaryWrite(message.history, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playerunite.v1.PlayViewUniteReply
 */
export const PlayViewUniteReply = new PlayViewUniteReply$Type();
/**
 * @generated ServiceType for protobuf service bilibili.app.playerunite.v1.Player
 */
export const Player = new ServiceType("bilibili.app.playerunite.v1.Player", [
    { name: "PlayViewUnite", options: {}, I: PlayViewUniteReq, O: PlayViewUniteReply }
]);
