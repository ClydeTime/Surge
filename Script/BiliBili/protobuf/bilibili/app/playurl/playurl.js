// @generated by protobuf-ts 2.9.0 with parameter output_javascript
// @generated from protobuf file "bilibili/app/playurl/v1/playurl.proto" (package "bilibili.app.playurl.v1", syntax proto3)
// tslint:disable
// @generated by protobuf-ts 2.9.0 with parameter output_javascript
// @generated from protobuf file "bilibili/app/playurl/v1/playurl.proto" (package "bilibili.app.playurl.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf enum bilibili.app.playurl.v1.DolbyItem.Type
 */
export var DolbyItem_Type;
(function (DolbyItem_Type) {
    /**
     * NONE
     *
     * @generated from protobuf enum value: NONE = 0;
     */
    DolbyItem_Type[DolbyItem_Type["NONE"] = 0] = "NONE";
    /**
     * 普通杜比音效
     *
     * @generated from protobuf enum value: COMMON = 1;
     */
    DolbyItem_Type[DolbyItem_Type["COMMON"] = 1] = "COMMON";
    /**
     * 全景杜比音效
     *
     * @generated from protobuf enum value: ATMOS = 2;
     */
    DolbyItem_Type[DolbyItem_Type["ATMOS"] = 2] = "ATMOS";
})(DolbyItem_Type || (DolbyItem_Type = {}));
/**
 * 业务类型
 *
 * @generated from protobuf enum bilibili.app.playurl.v1.Business
 */
export var Business;
(function (Business) {
    /**
     * 未知类型
     *
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    Business[Business["UNKNOWN"] = 0] = "UNKNOWN";
    /**
     * story业务
     *
     * @generated from protobuf enum value: STORY = 1;
     */
    Business[Business["STORY"] = 1] = "STORY";
})(Business || (Business = {}));
/**
 * 编码类型
 *
 * @generated from protobuf enum bilibili.app.playurl.v1.CodeType
 */
export var CodeType;
(function (CodeType) {
    /**
     * 默认
     *
     * @generated from protobuf enum value: NOCODE = 0;
     */
    CodeType[CodeType["NOCODE"] = 0] = "NOCODE";
    /**
     * H.264
     *
     * @generated from protobuf enum value: CODE264 = 1;
     */
    CodeType[CodeType["CODE264"] = 1] = "CODE264";
    /**
     * H.265
     *
     * @generated from protobuf enum value: CODE265 = 2;
     */
    CodeType[CodeType["CODE265"] = 2] = "CODE265";
    /**
     * av1
     *
     * @generated from protobuf enum value: CODEAV1 = 3;
     */
    CodeType[CodeType["CODEAV1"] = 3] = "CODEAV1";
})(CodeType || (CodeType = {}));
/**
 * 设置类型
 *
 * @generated from protobuf enum bilibili.app.playurl.v1.ConfType
 */
export var ConfType;
(function (ConfType) {
    /**
     *
     *
     * @generated from protobuf enum value: NoType = 0;
     */
    ConfType[ConfType["NoType"] = 0] = "NoType";
    /**
     * 镜像反转
     *
     * @generated from protobuf enum value: FLIPCONF = 1;
     */
    ConfType[ConfType["FLIPCONF"] = 1] = "FLIPCONF";
    /**
     * 视频投屏
     *
     * @generated from protobuf enum value: CASTCONF = 2;
     */
    ConfType[ConfType["CASTCONF"] = 2] = "CASTCONF";
    /**
     * 反馈
     *
     * @generated from protobuf enum value: FEEDBACK = 3;
     */
    ConfType[ConfType["FEEDBACK"] = 3] = "FEEDBACK";
    /**
     * 字幕
     *
     * @generated from protobuf enum value: SUBTITLE = 4;
     */
    ConfType[ConfType["SUBTITLE"] = 4] = "SUBTITLE";
    /**
     * 播放速度
     *
     * @generated from protobuf enum value: PLAYBACKRATE = 5;
     */
    ConfType[ConfType["PLAYBACKRATE"] = 5] = "PLAYBACKRATE";
    /**
     * 定时停止播放
     *
     * @generated from protobuf enum value: TIMEUP = 6;
     */
    ConfType[ConfType["TIMEUP"] = 6] = "TIMEUP";
    /**
     * 播放方式
     *
     * @generated from protobuf enum value: PLAYBACKMODE = 7;
     */
    ConfType[ConfType["PLAYBACKMODE"] = 7] = "PLAYBACKMODE";
    /**
     * 画面尺寸
     *
     * @generated from protobuf enum value: SCALEMODE = 8;
     */
    ConfType[ConfType["SCALEMODE"] = 8] = "SCALEMODE";
    /**
     * 后台播放
     *
     * @generated from protobuf enum value: BACKGROUNDPLAY = 9;
     */
    ConfType[ConfType["BACKGROUNDPLAY"] = 9] = "BACKGROUNDPLAY";
    /**
     * 顶
     *
     * @generated from protobuf enum value: LIKE = 10;
     */
    ConfType[ConfType["LIKE"] = 10] = "LIKE";
    /**
     * 踩
     *
     * @generated from protobuf enum value: DISLIKE = 11;
     */
    ConfType[ConfType["DISLIKE"] = 11] = "DISLIKE";
    /**
     * 投币
     *
     * @generated from protobuf enum value: COIN = 12;
     */
    ConfType[ConfType["COIN"] = 12] = "COIN";
    /**
     * 充电
     *
     * @generated from protobuf enum value: ELEC = 13;
     */
    ConfType[ConfType["ELEC"] = 13] = "ELEC";
    /**
     * 分享
     *
     * @generated from protobuf enum value: SHARE = 14;
     */
    ConfType[ConfType["SHARE"] = 14] = "SHARE";
    /**
     * 截图
     *
     * @generated from protobuf enum value: SCREENSHOT = 15;
     */
    ConfType[ConfType["SCREENSHOT"] = 15] = "SCREENSHOT";
    /**
     * 锁屏
     *
     * @generated from protobuf enum value: LOCKSCREEN = 16;
     */
    ConfType[ConfType["LOCKSCREEN"] = 16] = "LOCKSCREEN";
    /**
     * 推荐
     *
     * @generated from protobuf enum value: RECOMMEND = 17;
     */
    ConfType[ConfType["RECOMMEND"] = 17] = "RECOMMEND";
    /**
     * 倍速
     *
     * @generated from protobuf enum value: PLAYBACKSPEED = 18;
     */
    ConfType[ConfType["PLAYBACKSPEED"] = 18] = "PLAYBACKSPEED";
    /**
     * 清晰度
     *
     * @generated from protobuf enum value: DEFINITION = 19;
     */
    ConfType[ConfType["DEFINITION"] = 19] = "DEFINITION";
    /**
     * 选集
     *
     * @generated from protobuf enum value: SELECTIONS = 20;
     */
    ConfType[ConfType["SELECTIONS"] = 20] = "SELECTIONS";
    /**
     * 下一集
     *
     * @generated from protobuf enum value: NEXT = 21;
     */
    ConfType[ConfType["NEXT"] = 21] = "NEXT";
    /**
     * 编辑弹幕
     *
     * @generated from protobuf enum value: EDITDM = 22;
     */
    ConfType[ConfType["EDITDM"] = 22] = "EDITDM";
    /**
     * 小窗
     *
     * @generated from protobuf enum value: SMALLWINDOW = 23;
     */
    ConfType[ConfType["SMALLWINDOW"] = 23] = "SMALLWINDOW";
    /**
     * 播放震动
     *
     * @generated from protobuf enum value: SHAKE = 24;
     */
    ConfType[ConfType["SHAKE"] = 24] = "SHAKE";
    /**
     * 外层面板弹幕设置
     *
     * @generated from protobuf enum value: OUTERDM = 25;
     */
    ConfType[ConfType["OUTERDM"] = 25] = "OUTERDM";
    /**
     * 三点内弹幕设置
     *
     * @generated from protobuf enum value: INNERDM = 26;
     */
    ConfType[ConfType["INNERDM"] = 26] = "INNERDM";
    /**
     * 全景
     *
     * @generated from protobuf enum value: PANORAMA = 27;
     */
    ConfType[ConfType["PANORAMA"] = 27] = "PANORAMA";
    /**
     * 杜比
     *
     * @generated from protobuf enum value: DOLBY = 28;
     */
    ConfType[ConfType["DOLBY"] = 28] = "DOLBY";
    /**
     * 颜色滤镜
     *
     * @generated from protobuf enum value: COLORFILTER = 29;
     */
    ConfType[ConfType["COLORFILTER"] = 29] = "COLORFILTER";
})(ConfType || (ConfType = {}));
/**
 * @generated from protobuf enum bilibili.app.playurl.v1.Group
 */
export var Group;
(function (Group) {
    /**
     * @generated from protobuf enum value: UnknownGroup = 0;
     */
    Group[Group["UnknownGroup"] = 0] = "UnknownGroup";
    /**
     * @generated from protobuf enum value: A = 1;
     */
    Group[Group["A"] = 1] = "A";
    /**
     * @generated from protobuf enum value: B = 2;
     */
    Group[Group["B"] = 2] = "B";
    /**
     * @generated from protobuf enum value: C = 3;
     */
    Group[Group["C"] = 3] = "C";
})(Group || (Group = {}));
/**
 * 错误码
 *
 * @generated from protobuf enum bilibili.app.playurl.v1.PlayErr
 */
export var PlayErr;
(function (PlayErr) {
    /**
     * @generated from protobuf enum value: NoErr = 0;
     */
    PlayErr[PlayErr["NoErr"] = 0] = "NoErr";
    /**
     * 管控类型的错误码
     *
     * @generated from protobuf enum value: WithMultiDeviceLoginErr = 1;
     */
    PlayErr[PlayErr["WithMultiDeviceLoginErr"] = 1] = "WithMultiDeviceLoginErr";
})(PlayErr || (PlayErr = {}));
/**
 * @generated from protobuf enum bilibili.app.playurl.v1.PlayLimitCode
 */
export var PlayLimitCode;
(function (PlayLimitCode) {
    /**
     * @generated from protobuf enum value: PLCUnkown = 0;
     */
    PlayLimitCode[PlayLimitCode["PLCUnkown"] = 0] = "PLCUnkown";
    /**
     * @generated from protobuf enum value: PLCUgcNotPayed = 1;
     */
    PlayLimitCode[PlayLimitCode["PLCUgcNotPayed"] = 1] = "PLCUgcNotPayed";
})(PlayLimitCode || (PlayLimitCode = {}));
/**
 * 视频类型
 *
 * @generated from protobuf enum bilibili.app.playurl.v1.VideoType
 */
export var VideoType;
(function (VideoType) {
    /**
     * @generated from protobuf enum value: Unknown_VALUE = 0;
     */
    VideoType[VideoType["Unknown_VALUE"] = 0] = "Unknown_VALUE";
    /**
     * flv格式
     *
     * @generated from protobuf enum value: FLV_VALUE = 1;
     */
    VideoType[VideoType["FLV_VALUE"] = 1] = "FLV_VALUE";
    /**
     * dash格式
     *
     * @generated from protobuf enum value: DASH_VALUE = 2;
     */
    VideoType[VideoType["DASH_VALUE"] = 2] = "DASH_VALUE";
    /**
     * mp4格式
     *
     * @generated from protobuf enum value: MP4_VALUE = 3;
     */
    VideoType[VideoType["MP4_VALUE"] = 3] = "MP4_VALUE";
})(VideoType || (VideoType = {}));
// @generated message type with reflection information, may provide speed optimized methods
class AB$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.AB", [
            { no: 1, name: "glance", kind: "message", T: () => Glance },
            { no: 2, name: "group", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { group: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.playurl.v1.Glance glance */ 1:
                    message.glance = Glance.internalBinaryRead(reader, reader.uint32(), options, message.glance);
                    break;
                case /* int32 group */ 2:
                    message.group = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.playurl.v1.Glance glance = 1; */
        if (message.glance)
            Glance.internalBinaryWrite(message.glance, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 group = 2; */
        if (message.group !== 0)
            writer.tag(2, WireType.Varint).int32(message.group);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.AB
 */
export const AB = new AB$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArcConf$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.ArcConf", [
            { no: 1, name: "is_support", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "disabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "extra_content", kind: "message", T: () => ExtraContent }
        ]);
    }
    create(value) {
        const message = { isSupport: false, disabled: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_support */ 1:
                    message.isSupport = reader.bool();
                    break;
                case /* bool disabled */ 2:
                    message.disabled = reader.bool();
                    break;
                case /* bilibili.app.playurl.v1.ExtraContent extra_content */ 3:
                    message.extraContent = ExtraContent.internalBinaryRead(reader, reader.uint32(), options, message.extraContent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool is_support = 1; */
        if (message.isSupport !== false)
            writer.tag(1, WireType.Varint).bool(message.isSupport);
        /* bool disabled = 2; */
        if (message.disabled !== false)
            writer.tag(2, WireType.Varint).bool(message.disabled);
        /* bilibili.app.playurl.v1.ExtraContent extra_content = 3; */
        if (message.extraContent)
            ExtraContent.internalBinaryWrite(message.extraContent, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.ArcConf
 */
export const ArcConf = new ArcConf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Chronos$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.Chronos", [
            { no: 1, name: "md5", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "file", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { md5: "", file: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string md5 */ 1:
                    message.md5 = reader.string();
                    break;
                case /* string file */ 2:
                    message.file = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string md5 = 1; */
        if (message.md5 !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.md5);
        /* string file = 2; */
        if (message.file !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.file);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.Chronos
 */
export const Chronos = new Chronos$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ButtonStyle$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.ButtonStyle", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "text_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bg_color", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "jump_link", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { text: "", textColor: "", bgColor: "", jumpLink: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string text_color */ 2:
                    message.textColor = reader.string();
                    break;
                case /* string bg_color */ 3:
                    message.bgColor = reader.string();
                    break;
                case /* string jump_link */ 4:
                    message.jumpLink = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string text_color = 2; */
        if (message.textColor !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.textColor);
        /* string bg_color = 3; */
        if (message.bgColor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.bgColor);
        /* string jump_link = 4; */
        if (message.jumpLink !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.jumpLink);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.ButtonStyle
 */
export const ButtonStyle = new ButtonStyle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CloudConf$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.CloudConf", [
            { no: 1, name: "show", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "conf_type", kind: "enum", T: () => ["bilibili.app.playurl.v1.ConfType", ConfType] },
            { no: 3, name: "field_value", kind: "message", T: () => FieldValue },
            { no: 4, name: "conf_value", kind: "message", T: () => ConfValue }
        ]);
    }
    create(value) {
        const message = { show: false, confType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool show */ 1:
                    message.show = reader.bool();
                    break;
                case /* bilibili.app.playurl.v1.ConfType conf_type */ 2:
                    message.confType = reader.int32();
                    break;
                case /* bilibili.app.playurl.v1.FieldValue field_value */ 3:
                    message.fieldValue = FieldValue.internalBinaryRead(reader, reader.uint32(), options, message.fieldValue);
                    break;
                case /* bilibili.app.playurl.v1.ConfValue conf_value */ 4:
                    message.confValue = ConfValue.internalBinaryRead(reader, reader.uint32(), options, message.confValue);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool show = 1; */
        if (message.show !== false)
            writer.tag(1, WireType.Varint).bool(message.show);
        /* bilibili.app.playurl.v1.ConfType conf_type = 2; */
        if (message.confType !== 0)
            writer.tag(2, WireType.Varint).int32(message.confType);
        /* bilibili.app.playurl.v1.FieldValue field_value = 3; */
        if (message.fieldValue)
            FieldValue.internalBinaryWrite(message.fieldValue, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ConfValue conf_value = 4; */
        if (message.confValue)
            ConfValue.internalBinaryWrite(message.confValue, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.CloudConf
 */
export const CloudConf = new CloudConf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfValue$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.ConfValue", [
            { no: 1, name: "switch_val", kind: "scalar", oneof: "value", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "selected_val", kind: "scalar", oneof: "value", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { value: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool switch_val */ 1:
                    message.value = {
                        oneofKind: "switchVal",
                        switchVal: reader.bool()
                    };
                    break;
                case /* int64 selected_val */ 2:
                    message.value = {
                        oneofKind: "selectedVal",
                        selectedVal: reader.int64().toBigInt()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool switch_val = 1; */
        if (message.value.oneofKind === "switchVal")
            writer.tag(1, WireType.Varint).bool(message.value.switchVal);
        /* int64 selected_val = 2; */
        if (message.value.oneofKind === "selectedVal")
            writer.tag(2, WireType.Varint).int64(message.value.selectedVal);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.ConfValue
 */
export const ConfValue = new ConfValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DashItem$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.DashItem", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "baseUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "backup_url", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "bandwidth", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "codecid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "md5", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "frame_rate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "widevine_pssh", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { id: 0, baseUrl: "", backupUrl: [], bandwidth: 0, codecid: 0, md5: "", size: 0n, frameRate: "", widevinePssh: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* string baseUrl */ 2:
                    message.baseUrl = reader.string();
                    break;
                case /* repeated string backup_url */ 3:
                    message.backupUrl.push(reader.string());
                    break;
                case /* uint32 bandwidth */ 4:
                    message.bandwidth = reader.uint32();
                    break;
                case /* uint32 codecid */ 5:
                    message.codecid = reader.uint32();
                    break;
                case /* string md5 */ 6:
                    message.md5 = reader.string();
                    break;
                case /* uint64 size */ 7:
                    message.size = reader.uint64().toBigInt();
                    break;
                case /* string frame_rate */ 8:
                    message.frameRate = reader.string();
                    break;
                case /* string widevine_pssh */ 9:
                    message.widevinePssh = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* string baseUrl = 2; */
        if (message.baseUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.baseUrl);
        /* repeated string backup_url = 3; */
        for (let i = 0; i < message.backupUrl.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.backupUrl[i]);
        /* uint32 bandwidth = 4; */
        if (message.bandwidth !== 0)
            writer.tag(4, WireType.Varint).uint32(message.bandwidth);
        /* uint32 codecid = 5; */
        if (message.codecid !== 0)
            writer.tag(5, WireType.Varint).uint32(message.codecid);
        /* string md5 = 6; */
        if (message.md5 !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.md5);
        /* uint64 size = 7; */
        if (message.size !== 0n)
            writer.tag(7, WireType.Varint).uint64(message.size);
        /* string frame_rate = 8; */
        if (message.frameRate !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.frameRate);
        /* string widevine_pssh = 9; */
        if (message.widevinePssh !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.widevinePssh);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.DashItem
 */
export const DashItem = new DashItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DashVideo$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.DashVideo", [
            { no: 1, name: "base_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "backup_url", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bandwidth", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "codecid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "md5", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "audioId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "no_rexcode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "frame_rate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "width", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "widevine_pssh", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { baseUrl: "", backupUrl: [], bandwidth: 0, codecid: 0, md5: "", size: 0n, audioId: 0, noRexcode: false, frameRate: "", width: 0, height: 0, widevinePssh: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string base_url */ 1:
                    message.baseUrl = reader.string();
                    break;
                case /* repeated string backup_url */ 2:
                    message.backupUrl.push(reader.string());
                    break;
                case /* uint32 bandwidth */ 3:
                    message.bandwidth = reader.uint32();
                    break;
                case /* uint32 codecid */ 4:
                    message.codecid = reader.uint32();
                    break;
                case /* string md5 */ 5:
                    message.md5 = reader.string();
                    break;
                case /* uint64 size */ 6:
                    message.size = reader.uint64().toBigInt();
                    break;
                case /* uint32 audioId */ 7:
                    message.audioId = reader.uint32();
                    break;
                case /* bool no_rexcode */ 8:
                    message.noRexcode = reader.bool();
                    break;
                case /* string frame_rate */ 9:
                    message.frameRate = reader.string();
                    break;
                case /* int32 width */ 10:
                    message.width = reader.int32();
                    break;
                case /* int32 height */ 11:
                    message.height = reader.int32();
                    break;
                case /* string widevine_pssh */ 12:
                    message.widevinePssh = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string base_url = 1; */
        if (message.baseUrl !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.baseUrl);
        /* repeated string backup_url = 2; */
        for (let i = 0; i < message.backupUrl.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.backupUrl[i]);
        /* uint32 bandwidth = 3; */
        if (message.bandwidth !== 0)
            writer.tag(3, WireType.Varint).uint32(message.bandwidth);
        /* uint32 codecid = 4; */
        if (message.codecid !== 0)
            writer.tag(4, WireType.Varint).uint32(message.codecid);
        /* string md5 = 5; */
        if (message.md5 !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.md5);
        /* uint64 size = 6; */
        if (message.size !== 0n)
            writer.tag(6, WireType.Varint).uint64(message.size);
        /* uint32 audioId = 7; */
        if (message.audioId !== 0)
            writer.tag(7, WireType.Varint).uint32(message.audioId);
        /* bool no_rexcode = 8; */
        if (message.noRexcode !== false)
            writer.tag(8, WireType.Varint).bool(message.noRexcode);
        /* string frame_rate = 9; */
        if (message.frameRate !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.frameRate);
        /* int32 width = 10; */
        if (message.width !== 0)
            writer.tag(10, WireType.Varint).int32(message.width);
        /* int32 height = 11; */
        if (message.height !== 0)
            writer.tag(11, WireType.Varint).int32(message.height);
        /* string widevine_pssh = 12; */
        if (message.widevinePssh !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.widevinePssh);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.DashVideo
 */
export const DashVideo = new DashVideo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DolbyItem$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.DolbyItem", [
            { no: 1, name: "type", kind: "enum", T: () => ["bilibili.app.playurl.v1.DolbyItem.Type", DolbyItem_Type] },
            { no: 2, name: "audio", kind: "message", T: () => DashItem }
        ]);
    }
    create(value) {
        const message = { type: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.playurl.v1.DolbyItem.Type type */ 1:
                    message.type = reader.int32();
                    break;
                case /* bilibili.app.playurl.v1.DashItem audio */ 2:
                    message.audio = DashItem.internalBinaryRead(reader, reader.uint32(), options, message.audio);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.playurl.v1.DolbyItem.Type type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* bilibili.app.playurl.v1.DashItem audio = 2; */
        if (message.audio)
            DashItem.internalBinaryWrite(message.audio, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.DolbyItem
 */
export const DolbyItem = new DolbyItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.Event", [
            { no: 1, name: "shake", kind: "message", T: () => Shake }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.playurl.v1.Shake shake */ 1:
                    message.shake = Shake.internalBinaryRead(reader, reader.uint32(), options, message.shake);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.playurl.v1.Shake shake = 1; */
        if (message.shake)
            Shake.internalBinaryWrite(message.shake, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.Event
 */
export const Event = new Event$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExtraContent$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.ExtraContent", [
            { no: 1, name: "disabled_reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "disabled_code", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { disabledReason: "", disabledCode: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string disabled_reason */ 1:
                    message.disabledReason = reader.string();
                    break;
                case /* int64 disabled_code */ 2:
                    message.disabledCode = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string disabled_reason = 1; */
        if (message.disabledReason !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.disabledReason);
        /* int64 disabled_code = 2; */
        if (message.disabledCode !== 0n)
            writer.tag(2, WireType.Varint).int64(message.disabledCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.ExtraContent
 */
export const ExtraContent = new ExtraContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldValue$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.FieldValue", [
            { no: 1, name: "switch", kind: "scalar", oneof: "value", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { value: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool switch */ 1:
                    message.value = {
                        oneofKind: "switch",
                        switch: reader.bool()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool switch = 1; */
        if (message.value.oneofKind === "switch")
            writer.tag(1, WireType.Varint).bool(message.value.switch);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.FieldValue
 */
export const FieldValue = new FieldValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FormatDescription$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.FormatDescription", [
            { no: 1, name: "quality", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "format", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "new_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "display_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "superscript", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { quality: 0, format: "", description: "", newDescription: "", displayDesc: "", superscript: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 quality */ 1:
                    message.quality = reader.int32();
                    break;
                case /* string format */ 2:
                    message.format = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* string new_description */ 4:
                    message.newDescription = reader.string();
                    break;
                case /* string display_desc */ 5:
                    message.displayDesc = reader.string();
                    break;
                case /* string superscript */ 6:
                    message.superscript = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 quality = 1; */
        if (message.quality !== 0)
            writer.tag(1, WireType.Varint).int32(message.quality);
        /* string format = 2; */
        if (message.format !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.format);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* string new_description = 4; */
        if (message.newDescription !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.newDescription);
        /* string display_desc = 5; */
        if (message.displayDesc !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.displayDesc);
        /* string superscript = 6; */
        if (message.superscript !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.superscript);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.FormatDescription
 */
export const FormatDescription = new FormatDescription$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Glance$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.Glance", [
            { no: 1, name: "can_watch", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "times", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { canWatch: false, times: 0n, duration: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool can_watch */ 1:
                    message.canWatch = reader.bool();
                    break;
                case /* int64 times */ 2:
                    message.times = reader.int64().toBigInt();
                    break;
                case /* int64 duration */ 3:
                    message.duration = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bool can_watch = 1; */
        if (message.canWatch !== false)
            writer.tag(1, WireType.Varint).bool(message.canWatch);
        /* int64 times = 2; */
        if (message.times !== 0n)
            writer.tag(2, WireType.Varint).int64(message.times);
        /* int64 duration = 3; */
        if (message.duration !== 0n)
            writer.tag(3, WireType.Varint).int64(message.duration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.Glance
 */
export const Glance = new Glance$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayAbilityConf$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.PlayAbilityConf", [
            { no: 1, name: "background_play_conf", kind: "message", T: () => CloudConf },
            { no: 2, name: "flip_conf", kind: "message", T: () => CloudConf },
            { no: 3, name: "cast_conf", kind: "message", T: () => CloudConf },
            { no: 4, name: "feedback_conf", kind: "message", T: () => CloudConf },
            { no: 5, name: "subtitle_conf", kind: "message", T: () => CloudConf },
            { no: 6, name: "playback_rate_conf", kind: "message", T: () => CloudConf },
            { no: 7, name: "time_up_conf", kind: "message", T: () => CloudConf },
            { no: 8, name: "playback_mode_conf", kind: "message", T: () => CloudConf },
            { no: 9, name: "scale_mode_conf", kind: "message", T: () => CloudConf },
            { no: 10, name: "like_conf", kind: "message", T: () => CloudConf },
            { no: 11, name: "dislike_conf", kind: "message", T: () => CloudConf },
            { no: 12, name: "coin_conf", kind: "message", T: () => CloudConf },
            { no: 13, name: "elec_conf", kind: "message", T: () => CloudConf },
            { no: 14, name: "share_conf", kind: "message", T: () => CloudConf },
            { no: 15, name: "screen_shot_conf", kind: "message", T: () => CloudConf },
            { no: 16, name: "lock_screen_conf", kind: "message", T: () => CloudConf },
            { no: 17, name: "recommend_conf", kind: "message", T: () => CloudConf },
            { no: 18, name: "playback_speed_conf", kind: "message", T: () => CloudConf },
            { no: 19, name: "definition_conf", kind: "message", T: () => CloudConf },
            { no: 20, name: "selections_conf", kind: "message", T: () => CloudConf },
            { no: 21, name: "next_conf", kind: "message", T: () => CloudConf },
            { no: 22, name: "edit_dm_conf", kind: "message", T: () => CloudConf },
            { no: 23, name: "small_window_conf", kind: "message", T: () => CloudConf },
            { no: 24, name: "shake_conf", kind: "message", T: () => CloudConf },
            { no: 25, name: "outer_dm_conf", kind: "message", T: () => CloudConf },
            { no: 26, name: "innerDmDisable", kind: "message", T: () => CloudConf },
            { no: 27, name: "inner_dm_conf", kind: "message", T: () => CloudConf },
            { no: 28, name: "dolby_conf", kind: "message", T: () => CloudConf },
            { no: 29, name: "color_filter_conf", kind: "message", T: () => CloudConf }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.playurl.v1.CloudConf background_play_conf */ 1:
                    message.backgroundPlayConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.backgroundPlayConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf flip_conf */ 2:
                    message.flipConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.flipConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf cast_conf */ 3:
                    message.castConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.castConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf feedback_conf */ 4:
                    message.feedbackConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.feedbackConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf subtitle_conf */ 5:
                    message.subtitleConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.subtitleConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf playback_rate_conf */ 6:
                    message.playbackRateConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.playbackRateConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf time_up_conf */ 7:
                    message.timeUpConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.timeUpConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf playback_mode_conf */ 8:
                    message.playbackModeConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.playbackModeConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf scale_mode_conf */ 9:
                    message.scaleModeConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.scaleModeConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf like_conf */ 10:
                    message.likeConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.likeConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf dislike_conf */ 11:
                    message.dislikeConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.dislikeConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf coin_conf */ 12:
                    message.coinConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.coinConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf elec_conf */ 13:
                    message.elecConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.elecConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf share_conf */ 14:
                    message.shareConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.shareConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf screen_shot_conf */ 15:
                    message.screenShotConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.screenShotConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf lock_screen_conf */ 16:
                    message.lockScreenConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.lockScreenConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf recommend_conf */ 17:
                    message.recommendConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.recommendConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf playback_speed_conf */ 18:
                    message.playbackSpeedConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.playbackSpeedConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf definition_conf */ 19:
                    message.definitionConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.definitionConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf selections_conf */ 20:
                    message.selectionsConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.selectionsConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf next_conf */ 21:
                    message.nextConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.nextConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf edit_dm_conf */ 22:
                    message.editDmConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.editDmConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf small_window_conf */ 23:
                    message.smallWindowConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.smallWindowConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf shake_conf */ 24:
                    message.shakeConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.shakeConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf outer_dm_conf */ 25:
                    message.outerDmConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.outerDmConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf innerDmDisable */ 26:
                    message.innerDmDisable = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.innerDmDisable);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf inner_dm_conf */ 27:
                    message.innerDmConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.innerDmConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf dolby_conf */ 28:
                    message.dolbyConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.dolbyConf);
                    break;
                case /* bilibili.app.playurl.v1.CloudConf color_filter_conf */ 29:
                    message.colorFilterConf = CloudConf.internalBinaryRead(reader, reader.uint32(), options, message.colorFilterConf);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.playurl.v1.CloudConf background_play_conf = 1; */
        if (message.backgroundPlayConf)
            CloudConf.internalBinaryWrite(message.backgroundPlayConf, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf flip_conf = 2; */
        if (message.flipConf)
            CloudConf.internalBinaryWrite(message.flipConf, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf cast_conf = 3; */
        if (message.castConf)
            CloudConf.internalBinaryWrite(message.castConf, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf feedback_conf = 4; */
        if (message.feedbackConf)
            CloudConf.internalBinaryWrite(message.feedbackConf, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf subtitle_conf = 5; */
        if (message.subtitleConf)
            CloudConf.internalBinaryWrite(message.subtitleConf, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf playback_rate_conf = 6; */
        if (message.playbackRateConf)
            CloudConf.internalBinaryWrite(message.playbackRateConf, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf time_up_conf = 7; */
        if (message.timeUpConf)
            CloudConf.internalBinaryWrite(message.timeUpConf, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf playback_mode_conf = 8; */
        if (message.playbackModeConf)
            CloudConf.internalBinaryWrite(message.playbackModeConf, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf scale_mode_conf = 9; */
        if (message.scaleModeConf)
            CloudConf.internalBinaryWrite(message.scaleModeConf, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf like_conf = 10; */
        if (message.likeConf)
            CloudConf.internalBinaryWrite(message.likeConf, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf dislike_conf = 11; */
        if (message.dislikeConf)
            CloudConf.internalBinaryWrite(message.dislikeConf, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf coin_conf = 12; */
        if (message.coinConf)
            CloudConf.internalBinaryWrite(message.coinConf, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf elec_conf = 13; */
        if (message.elecConf)
            CloudConf.internalBinaryWrite(message.elecConf, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf share_conf = 14; */
        if (message.shareConf)
            CloudConf.internalBinaryWrite(message.shareConf, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf screen_shot_conf = 15; */
        if (message.screenShotConf)
            CloudConf.internalBinaryWrite(message.screenShotConf, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf lock_screen_conf = 16; */
        if (message.lockScreenConf)
            CloudConf.internalBinaryWrite(message.lockScreenConf, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf recommend_conf = 17; */
        if (message.recommendConf)
            CloudConf.internalBinaryWrite(message.recommendConf, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf playback_speed_conf = 18; */
        if (message.playbackSpeedConf)
            CloudConf.internalBinaryWrite(message.playbackSpeedConf, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf definition_conf = 19; */
        if (message.definitionConf)
            CloudConf.internalBinaryWrite(message.definitionConf, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf selections_conf = 20; */
        if (message.selectionsConf)
            CloudConf.internalBinaryWrite(message.selectionsConf, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf next_conf = 21; */
        if (message.nextConf)
            CloudConf.internalBinaryWrite(message.nextConf, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf edit_dm_conf = 22; */
        if (message.editDmConf)
            CloudConf.internalBinaryWrite(message.editDmConf, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf small_window_conf = 23; */
        if (message.smallWindowConf)
            CloudConf.internalBinaryWrite(message.smallWindowConf, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf shake_conf = 24; */
        if (message.shakeConf)
            CloudConf.internalBinaryWrite(message.shakeConf, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf outer_dm_conf = 25; */
        if (message.outerDmConf)
            CloudConf.internalBinaryWrite(message.outerDmConf, writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf innerDmDisable = 26; */
        if (message.innerDmDisable)
            CloudConf.internalBinaryWrite(message.innerDmDisable, writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf inner_dm_conf = 27; */
        if (message.innerDmConf)
            CloudConf.internalBinaryWrite(message.innerDmConf, writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf dolby_conf = 28; */
        if (message.dolbyConf)
            CloudConf.internalBinaryWrite(message.dolbyConf, writer.tag(28, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.CloudConf color_filter_conf = 29; */
        if (message.colorFilterConf)
            CloudConf.internalBinaryWrite(message.colorFilterConf, writer.tag(29, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.PlayAbilityConf
 */
export const PlayAbilityConf = new PlayAbilityConf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayArcConf$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.PlayArcConf", [
            { no: 1, name: "background_play_conf", kind: "message", T: () => ArcConf },
            { no: 2, name: "flip_conf", kind: "message", T: () => ArcConf },
            { no: 3, name: "cast_conf", kind: "message", T: () => ArcConf },
            { no: 4, name: "feedback_conf", kind: "message", T: () => ArcConf },
            { no: 5, name: "subtitle_conf", kind: "message", T: () => ArcConf },
            { no: 6, name: "playback_rate_conf", kind: "message", T: () => ArcConf },
            { no: 7, name: "time_up_conf", kind: "message", T: () => ArcConf },
            { no: 8, name: "playback_mode_conf", kind: "message", T: () => ArcConf },
            { no: 9, name: "scale_mode_conf", kind: "message", T: () => ArcConf },
            { no: 10, name: "like_conf", kind: "message", T: () => ArcConf },
            { no: 11, name: "dislike_conf", kind: "message", T: () => ArcConf },
            { no: 12, name: "coin_conf", kind: "message", T: () => ArcConf },
            { no: 13, name: "elec_conf", kind: "message", T: () => ArcConf },
            { no: 14, name: "share_conf", kind: "message", T: () => ArcConf },
            { no: 15, name: "screen_shot_conf", kind: "message", T: () => ArcConf },
            { no: 16, name: "lock_screen_conf", kind: "message", T: () => ArcConf },
            { no: 17, name: "recommend_conf", kind: "message", T: () => ArcConf },
            { no: 18, name: "playback_speed_conf", kind: "message", T: () => ArcConf },
            { no: 19, name: "definition_conf", kind: "message", T: () => ArcConf },
            { no: 20, name: "selections_conf", kind: "message", T: () => ArcConf },
            { no: 21, name: "next_conf", kind: "message", T: () => ArcConf },
            { no: 22, name: "edit_dm_conf", kind: "message", T: () => ArcConf },
            { no: 23, name: "small_window_conf", kind: "message", T: () => ArcConf },
            { no: 24, name: "shake_conf", kind: "message", T: () => ArcConf },
            { no: 25, name: "outer_dm_conf", kind: "message", T: () => ArcConf },
            { no: 26, name: "inner_dm_conf", kind: "message", T: () => ArcConf },
            { no: 27, name: "panorama_conf", kind: "message", T: () => ArcConf },
            { no: 28, name: "dolby_conf", kind: "message", T: () => ArcConf },
            { no: 29, name: "screen_recording_conf", kind: "message", T: () => ArcConf },
            { no: 30, name: "color_filter_conf", kind: "message", T: () => ArcConf }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.playurl.v1.ArcConf background_play_conf */ 1:
                    message.backgroundPlayConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.backgroundPlayConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf flip_conf */ 2:
                    message.flipConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.flipConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf cast_conf */ 3:
                    message.castConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.castConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf feedback_conf */ 4:
                    message.feedbackConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.feedbackConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf subtitle_conf */ 5:
                    message.subtitleConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.subtitleConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf playback_rate_conf */ 6:
                    message.playbackRateConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.playbackRateConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf time_up_conf */ 7:
                    message.timeUpConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.timeUpConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf playback_mode_conf */ 8:
                    message.playbackModeConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.playbackModeConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf scale_mode_conf */ 9:
                    message.scaleModeConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.scaleModeConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf like_conf */ 10:
                    message.likeConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.likeConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf dislike_conf */ 11:
                    message.dislikeConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.dislikeConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf coin_conf */ 12:
                    message.coinConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.coinConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf elec_conf */ 13:
                    message.elecConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.elecConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf share_conf */ 14:
                    message.shareConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.shareConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf screen_shot_conf */ 15:
                    message.screenShotConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.screenShotConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf lock_screen_conf */ 16:
                    message.lockScreenConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.lockScreenConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf recommend_conf */ 17:
                    message.recommendConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.recommendConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf playback_speed_conf */ 18:
                    message.playbackSpeedConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.playbackSpeedConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf definition_conf */ 19:
                    message.definitionConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.definitionConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf selections_conf */ 20:
                    message.selectionsConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.selectionsConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf next_conf */ 21:
                    message.nextConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.nextConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf edit_dm_conf */ 22:
                    message.editDmConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.editDmConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf small_window_conf */ 23:
                    message.smallWindowConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.smallWindowConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf shake_conf */ 24:
                    message.shakeConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.shakeConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf outer_dm_conf */ 25:
                    message.outerDmConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.outerDmConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf inner_dm_conf */ 26:
                    message.innerDmConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.innerDmConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf panorama_conf */ 27:
                    message.panoramaConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.panoramaConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf dolby_conf */ 28:
                    message.dolbyConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.dolbyConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf screen_recording_conf */ 29:
                    message.screenRecordingConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.screenRecordingConf);
                    break;
                case /* bilibili.app.playurl.v1.ArcConf color_filter_conf */ 30:
                    message.colorFilterConf = ArcConf.internalBinaryRead(reader, reader.uint32(), options, message.colorFilterConf);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.playurl.v1.ArcConf background_play_conf = 1; */
        if (message.backgroundPlayConf)
            ArcConf.internalBinaryWrite(message.backgroundPlayConf, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf flip_conf = 2; */
        if (message.flipConf)
            ArcConf.internalBinaryWrite(message.flipConf, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf cast_conf = 3; */
        if (message.castConf)
            ArcConf.internalBinaryWrite(message.castConf, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf feedback_conf = 4; */
        if (message.feedbackConf)
            ArcConf.internalBinaryWrite(message.feedbackConf, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf subtitle_conf = 5; */
        if (message.subtitleConf)
            ArcConf.internalBinaryWrite(message.subtitleConf, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf playback_rate_conf = 6; */
        if (message.playbackRateConf)
            ArcConf.internalBinaryWrite(message.playbackRateConf, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf time_up_conf = 7; */
        if (message.timeUpConf)
            ArcConf.internalBinaryWrite(message.timeUpConf, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf playback_mode_conf = 8; */
        if (message.playbackModeConf)
            ArcConf.internalBinaryWrite(message.playbackModeConf, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf scale_mode_conf = 9; */
        if (message.scaleModeConf)
            ArcConf.internalBinaryWrite(message.scaleModeConf, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf like_conf = 10; */
        if (message.likeConf)
            ArcConf.internalBinaryWrite(message.likeConf, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf dislike_conf = 11; */
        if (message.dislikeConf)
            ArcConf.internalBinaryWrite(message.dislikeConf, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf coin_conf = 12; */
        if (message.coinConf)
            ArcConf.internalBinaryWrite(message.coinConf, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf elec_conf = 13; */
        if (message.elecConf)
            ArcConf.internalBinaryWrite(message.elecConf, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf share_conf = 14; */
        if (message.shareConf)
            ArcConf.internalBinaryWrite(message.shareConf, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf screen_shot_conf = 15; */
        if (message.screenShotConf)
            ArcConf.internalBinaryWrite(message.screenShotConf, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf lock_screen_conf = 16; */
        if (message.lockScreenConf)
            ArcConf.internalBinaryWrite(message.lockScreenConf, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf recommend_conf = 17; */
        if (message.recommendConf)
            ArcConf.internalBinaryWrite(message.recommendConf, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf playback_speed_conf = 18; */
        if (message.playbackSpeedConf)
            ArcConf.internalBinaryWrite(message.playbackSpeedConf, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf definition_conf = 19; */
        if (message.definitionConf)
            ArcConf.internalBinaryWrite(message.definitionConf, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf selections_conf = 20; */
        if (message.selectionsConf)
            ArcConf.internalBinaryWrite(message.selectionsConf, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf next_conf = 21; */
        if (message.nextConf)
            ArcConf.internalBinaryWrite(message.nextConf, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf edit_dm_conf = 22; */
        if (message.editDmConf)
            ArcConf.internalBinaryWrite(message.editDmConf, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf small_window_conf = 23; */
        if (message.smallWindowConf)
            ArcConf.internalBinaryWrite(message.smallWindowConf, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf shake_conf = 24; */
        if (message.shakeConf)
            ArcConf.internalBinaryWrite(message.shakeConf, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf outer_dm_conf = 25; */
        if (message.outerDmConf)
            ArcConf.internalBinaryWrite(message.outerDmConf, writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf inner_dm_conf = 26; */
        if (message.innerDmConf)
            ArcConf.internalBinaryWrite(message.innerDmConf, writer.tag(26, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf panorama_conf = 27; */
        if (message.panoramaConf)
            ArcConf.internalBinaryWrite(message.panoramaConf, writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf dolby_conf = 28; */
        if (message.dolbyConf)
            ArcConf.internalBinaryWrite(message.dolbyConf, writer.tag(28, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf screen_recording_conf = 29; */
        if (message.screenRecordingConf)
            ArcConf.internalBinaryWrite(message.screenRecordingConf, writer.tag(29, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ArcConf color_filter_conf = 30; */
        if (message.colorFilterConf)
            ArcConf.internalBinaryWrite(message.colorFilterConf, writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.PlayArcConf
 */
export const PlayArcConf = new PlayArcConf$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayConfEditReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.PlayConfEditReply", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.PlayConfEditReply
 */
export const PlayConfEditReply = new PlayConfEditReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayConfEditReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.PlayConfEditReq", [
            { no: 1, name: "play_conf", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayConfState }
        ]);
    }
    create(value) {
        const message = { playConf: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.playurl.v1.PlayConfState play_conf */ 1:
                    message.playConf.push(PlayConfState.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.app.playurl.v1.PlayConfState play_conf = 1; */
        for (let i = 0; i < message.playConf.length; i++)
            PlayConfState.internalBinaryWrite(message.playConf[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.PlayConfEditReq
 */
export const PlayConfEditReq = new PlayConfEditReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayConfReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.PlayConfReply", [
            { no: 1, name: "play_conf", kind: "message", T: () => PlayAbilityConf }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.playurl.v1.PlayAbilityConf play_conf */ 1:
                    message.playConf = PlayAbilityConf.internalBinaryRead(reader, reader.uint32(), options, message.playConf);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.playurl.v1.PlayAbilityConf play_conf = 1; */
        if (message.playConf)
            PlayAbilityConf.internalBinaryWrite(message.playConf, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.PlayConfReply
 */
export const PlayConfReply = new PlayConfReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayConfReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.PlayConfReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.PlayConfReq
 */
export const PlayConfReq = new PlayConfReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayConfState$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.PlayConfState", [
            { no: 1, name: "conf_type", kind: "enum", T: () => ["bilibili.app.playurl.v1.ConfType", ConfType] },
            { no: 2, name: "show", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "field_value", kind: "message", T: () => FieldValue },
            { no: 4, name: "conf_value", kind: "message", T: () => ConfValue }
        ]);
    }
    create(value) {
        const message = { confType: 0, show: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.playurl.v1.ConfType conf_type */ 1:
                    message.confType = reader.int32();
                    break;
                case /* bool show */ 2:
                    message.show = reader.bool();
                    break;
                case /* bilibili.app.playurl.v1.FieldValue field_value */ 3:
                    message.fieldValue = FieldValue.internalBinaryRead(reader, reader.uint32(), options, message.fieldValue);
                    break;
                case /* bilibili.app.playurl.v1.ConfValue conf_value */ 4:
                    message.confValue = ConfValue.internalBinaryRead(reader, reader.uint32(), options, message.confValue);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.playurl.v1.ConfType conf_type = 1; */
        if (message.confType !== 0)
            writer.tag(1, WireType.Varint).int32(message.confType);
        /* bool show = 2; */
        if (message.show !== false)
            writer.tag(2, WireType.Varint).bool(message.show);
        /* bilibili.app.playurl.v1.FieldValue field_value = 3; */
        if (message.fieldValue)
            FieldValue.internalBinaryWrite(message.fieldValue, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ConfValue conf_value = 4; */
        if (message.confValue)
            ConfValue.internalBinaryWrite(message.confValue, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.PlayConfState
 */
export const PlayConfState = new PlayConfState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayLimit$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.PlayLimit", [
            { no: 1, name: "code", kind: "enum", T: () => ["bilibili.app.playurl.v1.PlayLimitCode", PlayLimitCode] },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sub_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "button", kind: "message", T: () => ButtonStyle }
        ]);
    }
    create(value) {
        const message = { code: 0, message: "", subMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.playurl.v1.PlayLimitCode code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* string sub_message */ 3:
                    message.subMessage = reader.string();
                    break;
                case /* bilibili.app.playurl.v1.ButtonStyle button */ 4:
                    message.button = ButtonStyle.internalBinaryRead(reader, reader.uint32(), options, message.button);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.playurl.v1.PlayLimitCode code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* string sub_message = 3; */
        if (message.subMessage !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.subMessage);
        /* bilibili.app.playurl.v1.ButtonStyle button = 4; */
        if (message.button)
            ButtonStyle.internalBinaryWrite(message.button, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.PlayLimit
 */
export const PlayLimit = new PlayLimit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayURLReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.PlayURLReply", [
            { no: 1, name: "quality", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "format", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "timelength", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "video_codecid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "fnver", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "fnval", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "video_project", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "durl", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ResponseUrl },
            { no: 9, name: "dash", kind: "message", T: () => ResponseDash },
            { no: 10, name: "no_rexcode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "upgrade_limit", kind: "message", T: () => UpgradeLimit },
            { no: 12, name: "support_formats", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FormatDescription },
            { no: 13, name: "type", kind: "enum", T: () => ["bilibili.app.playurl.v1.VideoType", VideoType] }
        ]);
    }
    create(value) {
        const message = { quality: 0, format: "", timelength: 0n, videoCodecid: 0, fnver: 0, fnval: 0, videoProject: false, durl: [], noRexcode: 0, supportFormats: [], type: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 quality */ 1:
                    message.quality = reader.uint32();
                    break;
                case /* string format */ 2:
                    message.format = reader.string();
                    break;
                case /* uint64 timelength */ 3:
                    message.timelength = reader.uint64().toBigInt();
                    break;
                case /* uint32 video_codecid */ 4:
                    message.videoCodecid = reader.uint32();
                    break;
                case /* uint32 fnver */ 5:
                    message.fnver = reader.uint32();
                    break;
                case /* uint32 fnval */ 6:
                    message.fnval = reader.uint32();
                    break;
                case /* bool video_project */ 7:
                    message.videoProject = reader.bool();
                    break;
                case /* repeated bilibili.app.playurl.v1.ResponseUrl durl */ 8:
                    message.durl.push(ResponseUrl.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.playurl.v1.ResponseDash dash */ 9:
                    message.dash = ResponseDash.internalBinaryRead(reader, reader.uint32(), options, message.dash);
                    break;
                case /* int32 no_rexcode */ 10:
                    message.noRexcode = reader.int32();
                    break;
                case /* bilibili.app.playurl.v1.UpgradeLimit upgrade_limit */ 11:
                    message.upgradeLimit = UpgradeLimit.internalBinaryRead(reader, reader.uint32(), options, message.upgradeLimit);
                    break;
                case /* repeated bilibili.app.playurl.v1.FormatDescription support_formats */ 12:
                    message.supportFormats.push(FormatDescription.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.playurl.v1.VideoType type */ 13:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 quality = 1; */
        if (message.quality !== 0)
            writer.tag(1, WireType.Varint).uint32(message.quality);
        /* string format = 2; */
        if (message.format !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.format);
        /* uint64 timelength = 3; */
        if (message.timelength !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.timelength);
        /* uint32 video_codecid = 4; */
        if (message.videoCodecid !== 0)
            writer.tag(4, WireType.Varint).uint32(message.videoCodecid);
        /* uint32 fnver = 5; */
        if (message.fnver !== 0)
            writer.tag(5, WireType.Varint).uint32(message.fnver);
        /* uint32 fnval = 6; */
        if (message.fnval !== 0)
            writer.tag(6, WireType.Varint).uint32(message.fnval);
        /* bool video_project = 7; */
        if (message.videoProject !== false)
            writer.tag(7, WireType.Varint).bool(message.videoProject);
        /* repeated bilibili.app.playurl.v1.ResponseUrl durl = 8; */
        for (let i = 0; i < message.durl.length; i++)
            ResponseUrl.internalBinaryWrite(message.durl[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.ResponseDash dash = 9; */
        if (message.dash)
            ResponseDash.internalBinaryWrite(message.dash, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* int32 no_rexcode = 10; */
        if (message.noRexcode !== 0)
            writer.tag(10, WireType.Varint).int32(message.noRexcode);
        /* bilibili.app.playurl.v1.UpgradeLimit upgrade_limit = 11; */
        if (message.upgradeLimit)
            UpgradeLimit.internalBinaryWrite(message.upgradeLimit, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.playurl.v1.FormatDescription support_formats = 12; */
        for (let i = 0; i < message.supportFormats.length; i++)
            FormatDescription.internalBinaryWrite(message.supportFormats[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.VideoType type = 13; */
        if (message.type !== 0)
            writer.tag(13, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.PlayURLReply
 */
export const PlayURLReply = new PlayURLReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayURLReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.PlayURLReq", [
            { no: 1, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "qn", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "fnver", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "fnval", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "download", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "force_host", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "fourk", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "from_spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { aid: 0n, cid: 0n, qn: 0n, fnver: 0, fnval: 0, download: 0, forceHost: 0, fourk: false, spmid: "", fromSpmid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid */ 1:
                    message.aid = reader.int64().toBigInt();
                    break;
                case /* int64 cid */ 2:
                    message.cid = reader.int64().toBigInt();
                    break;
                case /* int64 qn */ 3:
                    message.qn = reader.int64().toBigInt();
                    break;
                case /* int32 fnver */ 4:
                    message.fnver = reader.int32();
                    break;
                case /* int32 fnval */ 5:
                    message.fnval = reader.int32();
                    break;
                case /* uint32 download */ 6:
                    message.download = reader.uint32();
                    break;
                case /* int32 force_host */ 7:
                    message.forceHost = reader.int32();
                    break;
                case /* bool fourk */ 8:
                    message.fourk = reader.bool();
                    break;
                case /* string spmid */ 9:
                    message.spmid = reader.string();
                    break;
                case /* string from_spmid */ 10:
                    message.fromSpmid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 1; */
        if (message.aid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.aid);
        /* int64 cid = 2; */
        if (message.cid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.cid);
        /* int64 qn = 3; */
        if (message.qn !== 0n)
            writer.tag(3, WireType.Varint).int64(message.qn);
        /* int32 fnver = 4; */
        if (message.fnver !== 0)
            writer.tag(4, WireType.Varint).int32(message.fnver);
        /* int32 fnval = 5; */
        if (message.fnval !== 0)
            writer.tag(5, WireType.Varint).int32(message.fnval);
        /* uint32 download = 6; */
        if (message.download !== 0)
            writer.tag(6, WireType.Varint).uint32(message.download);
        /* int32 force_host = 7; */
        if (message.forceHost !== 0)
            writer.tag(7, WireType.Varint).int32(message.forceHost);
        /* bool fourk = 8; */
        if (message.fourk !== false)
            writer.tag(8, WireType.Varint).bool(message.fourk);
        /* string spmid = 9; */
        if (message.spmid !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.spmid);
        /* string from_spmid = 10; */
        if (message.fromSpmid !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.fromSpmid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.PlayURLReq
 */
export const PlayURLReq = new PlayURLReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayViewReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.PlayViewReply", [
            { no: 1, name: "video_info", kind: "message", T: () => VideoInfo },
            { no: 2, name: "play_conf", kind: "message", T: () => PlayAbilityConf },
            { no: 3, name: "upgrade_limit", kind: "message", T: () => UpgradeLimit },
            { no: 4, name: "chronos", kind: "message", T: () => Chronos },
            { no: 5, name: "play_arc", kind: "message", T: () => PlayArcConf },
            { no: 6, name: "event", kind: "message", T: () => Event },
            { no: 7, name: "ab", kind: "message", T: () => AB },
            { no: 8, name: "play_limit", kind: "message", T: () => PlayLimit }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.playurl.v1.VideoInfo video_info */ 1:
                    message.videoInfo = VideoInfo.internalBinaryRead(reader, reader.uint32(), options, message.videoInfo);
                    break;
                case /* bilibili.app.playurl.v1.PlayAbilityConf play_conf */ 2:
                    message.playConf = PlayAbilityConf.internalBinaryRead(reader, reader.uint32(), options, message.playConf);
                    break;
                case /* bilibili.app.playurl.v1.UpgradeLimit upgrade_limit */ 3:
                    message.upgradeLimit = UpgradeLimit.internalBinaryRead(reader, reader.uint32(), options, message.upgradeLimit);
                    break;
                case /* bilibili.app.playurl.v1.Chronos chronos */ 4:
                    message.chronos = Chronos.internalBinaryRead(reader, reader.uint32(), options, message.chronos);
                    break;
                case /* bilibili.app.playurl.v1.PlayArcConf play_arc */ 5:
                    message.playArc = PlayArcConf.internalBinaryRead(reader, reader.uint32(), options, message.playArc);
                    break;
                case /* bilibili.app.playurl.v1.Event event */ 6:
                    message.event = Event.internalBinaryRead(reader, reader.uint32(), options, message.event);
                    break;
                case /* bilibili.app.playurl.v1.AB ab */ 7:
                    message.ab = AB.internalBinaryRead(reader, reader.uint32(), options, message.ab);
                    break;
                case /* bilibili.app.playurl.v1.PlayLimit play_limit */ 8:
                    message.playLimit = PlayLimit.internalBinaryRead(reader, reader.uint32(), options, message.playLimit);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.playurl.v1.VideoInfo video_info = 1; */
        if (message.videoInfo)
            VideoInfo.internalBinaryWrite(message.videoInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.PlayAbilityConf play_conf = 2; */
        if (message.playConf)
            PlayAbilityConf.internalBinaryWrite(message.playConf, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.UpgradeLimit upgrade_limit = 3; */
        if (message.upgradeLimit)
            UpgradeLimit.internalBinaryWrite(message.upgradeLimit, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.Chronos chronos = 4; */
        if (message.chronos)
            Chronos.internalBinaryWrite(message.chronos, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.PlayArcConf play_arc = 5; */
        if (message.playArc)
            PlayArcConf.internalBinaryWrite(message.playArc, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.Event event = 6; */
        if (message.event)
            Event.internalBinaryWrite(message.event, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.AB ab = 7; */
        if (message.ab)
            AB.internalBinaryWrite(message.ab, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.PlayLimit play_limit = 8; */
        if (message.playLimit)
            PlayLimit.internalBinaryWrite(message.playLimit, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.PlayViewReply
 */
export const PlayViewReply = new PlayViewReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayViewReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.PlayViewReq", [
            { no: 1, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "qn", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "fnver", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "fnval", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "download", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "force_host", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "fourk", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "from_spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "teenagers_mode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "prefer_codec_type", kind: "enum", T: () => ["bilibili.app.playurl.v1.CodeType", CodeType] },
            { no: 13, name: "business", kind: "enum", T: () => ["bilibili.app.playurl.v1.Business", Business] },
            { no: 14, name: "voice_balance", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { aid: 0n, cid: 0n, qn: 0n, fnver: 0, fnval: 0, download: 0, forceHost: 0, fourk: false, spmid: "", fromSpmid: "", teenagersMode: 0, preferCodecType: 0, business: 0, voiceBalance: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid */ 1:
                    message.aid = reader.int64().toBigInt();
                    break;
                case /* int64 cid */ 2:
                    message.cid = reader.int64().toBigInt();
                    break;
                case /* int64 qn */ 3:
                    message.qn = reader.int64().toBigInt();
                    break;
                case /* int32 fnver */ 4:
                    message.fnver = reader.int32();
                    break;
                case /* int32 fnval */ 5:
                    message.fnval = reader.int32();
                    break;
                case /* uint32 download */ 6:
                    message.download = reader.uint32();
                    break;
                case /* int32 force_host */ 7:
                    message.forceHost = reader.int32();
                    break;
                case /* bool fourk */ 8:
                    message.fourk = reader.bool();
                    break;
                case /* string spmid */ 9:
                    message.spmid = reader.string();
                    break;
                case /* string from_spmid */ 10:
                    message.fromSpmid = reader.string();
                    break;
                case /* int32 teenagers_mode */ 11:
                    message.teenagersMode = reader.int32();
                    break;
                case /* bilibili.app.playurl.v1.CodeType prefer_codec_type */ 12:
                    message.preferCodecType = reader.int32();
                    break;
                case /* bilibili.app.playurl.v1.Business business */ 13:
                    message.business = reader.int32();
                    break;
                case /* int64 voice_balance */ 14:
                    message.voiceBalance = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 1; */
        if (message.aid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.aid);
        /* int64 cid = 2; */
        if (message.cid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.cid);
        /* int64 qn = 3; */
        if (message.qn !== 0n)
            writer.tag(3, WireType.Varint).int64(message.qn);
        /* int32 fnver = 4; */
        if (message.fnver !== 0)
            writer.tag(4, WireType.Varint).int32(message.fnver);
        /* int32 fnval = 5; */
        if (message.fnval !== 0)
            writer.tag(5, WireType.Varint).int32(message.fnval);
        /* uint32 download = 6; */
        if (message.download !== 0)
            writer.tag(6, WireType.Varint).uint32(message.download);
        /* int32 force_host = 7; */
        if (message.forceHost !== 0)
            writer.tag(7, WireType.Varint).int32(message.forceHost);
        /* bool fourk = 8; */
        if (message.fourk !== false)
            writer.tag(8, WireType.Varint).bool(message.fourk);
        /* string spmid = 9; */
        if (message.spmid !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.spmid);
        /* string from_spmid = 10; */
        if (message.fromSpmid !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.fromSpmid);
        /* int32 teenagers_mode = 11; */
        if (message.teenagersMode !== 0)
            writer.tag(11, WireType.Varint).int32(message.teenagersMode);
        /* bilibili.app.playurl.v1.CodeType prefer_codec_type = 12; */
        if (message.preferCodecType !== 0)
            writer.tag(12, WireType.Varint).int32(message.preferCodecType);
        /* bilibili.app.playurl.v1.Business business = 13; */
        if (message.business !== 0)
            writer.tag(13, WireType.Varint).int32(message.business);
        /* int64 voice_balance = 14; */
        if (message.voiceBalance !== 0n)
            writer.tag(14, WireType.Varint).int64(message.voiceBalance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.PlayViewReq
 */
export const PlayViewReq = new PlayViewReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProjectReply$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.ProjectReply", [
            { no: 1, name: "project", kind: "message", T: () => PlayURLReply }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.playurl.v1.PlayURLReply project */ 1:
                    message.project = PlayURLReply.internalBinaryRead(reader, reader.uint32(), options, message.project);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.playurl.v1.PlayURLReply project = 1; */
        if (message.project)
            PlayURLReply.internalBinaryWrite(message.project, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.ProjectReply
 */
export const ProjectReply = new ProjectReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProjectReq$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.ProjectReq", [
            { no: 1, name: "aid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "cid", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "qn", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "fnver", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "fnval", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "download", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "force_host", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "fourk", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "from_spmid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "protocol", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "device_type", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { aid: 0n, cid: 0n, qn: 0n, fnver: 0, fnval: 0, download: 0, forceHost: 0, fourk: false, spmid: "", fromSpmid: "", protocol: 0, deviceType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 aid */ 1:
                    message.aid = reader.int64().toBigInt();
                    break;
                case /* int64 cid */ 2:
                    message.cid = reader.int64().toBigInt();
                    break;
                case /* int64 qn */ 3:
                    message.qn = reader.int64().toBigInt();
                    break;
                case /* int32 fnver */ 4:
                    message.fnver = reader.int32();
                    break;
                case /* int32 fnval */ 5:
                    message.fnval = reader.int32();
                    break;
                case /* uint32 download */ 6:
                    message.download = reader.uint32();
                    break;
                case /* int32 force_host */ 7:
                    message.forceHost = reader.int32();
                    break;
                case /* bool fourk */ 8:
                    message.fourk = reader.bool();
                    break;
                case /* string spmid */ 9:
                    message.spmid = reader.string();
                    break;
                case /* string from_spmid */ 10:
                    message.fromSpmid = reader.string();
                    break;
                case /* int32 protocol */ 11:
                    message.protocol = reader.int32();
                    break;
                case /* int32 device_type */ 12:
                    message.deviceType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int64 aid = 1; */
        if (message.aid !== 0n)
            writer.tag(1, WireType.Varint).int64(message.aid);
        /* int64 cid = 2; */
        if (message.cid !== 0n)
            writer.tag(2, WireType.Varint).int64(message.cid);
        /* int64 qn = 3; */
        if (message.qn !== 0n)
            writer.tag(3, WireType.Varint).int64(message.qn);
        /* int32 fnver = 4; */
        if (message.fnver !== 0)
            writer.tag(4, WireType.Varint).int32(message.fnver);
        /* int32 fnval = 5; */
        if (message.fnval !== 0)
            writer.tag(5, WireType.Varint).int32(message.fnval);
        /* uint32 download = 6; */
        if (message.download !== 0)
            writer.tag(6, WireType.Varint).uint32(message.download);
        /* int32 force_host = 7; */
        if (message.forceHost !== 0)
            writer.tag(7, WireType.Varint).int32(message.forceHost);
        /* bool fourk = 8; */
        if (message.fourk !== false)
            writer.tag(8, WireType.Varint).bool(message.fourk);
        /* string spmid = 9; */
        if (message.spmid !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.spmid);
        /* string from_spmid = 10; */
        if (message.fromSpmid !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.fromSpmid);
        /* int32 protocol = 11; */
        if (message.protocol !== 0)
            writer.tag(11, WireType.Varint).int32(message.protocol);
        /* int32 device_type = 12; */
        if (message.deviceType !== 0)
            writer.tag(12, WireType.Varint).int32(message.deviceType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.ProjectReq
 */
export const ProjectReq = new ProjectReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseDash$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.ResponseDash", [
            { no: 1, name: "video", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DashItem },
            { no: 2, name: "audio", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DashItem }
        ]);
    }
    create(value) {
        const message = { video: [], audio: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.playurl.v1.DashItem video */ 1:
                    message.video.push(DashItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated bilibili.app.playurl.v1.DashItem audio */ 2:
                    message.audio.push(DashItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.app.playurl.v1.DashItem video = 1; */
        for (let i = 0; i < message.video.length; i++)
            DashItem.internalBinaryWrite(message.video[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.playurl.v1.DashItem audio = 2; */
        for (let i = 0; i < message.audio.length; i++)
            DashItem.internalBinaryWrite(message.audio[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.ResponseDash
 */
export const ResponseDash = new ResponseDash$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseUrl$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.ResponseUrl", [
            { no: 1, name: "order", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "length", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "backup_url", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "md5", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { order: 0, length: 0n, size: 0n, url: "", backupUrl: [], md5: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 order */ 1:
                    message.order = reader.uint32();
                    break;
                case /* uint64 length */ 2:
                    message.length = reader.uint64().toBigInt();
                    break;
                case /* uint64 size */ 3:
                    message.size = reader.uint64().toBigInt();
                    break;
                case /* string url */ 4:
                    message.url = reader.string();
                    break;
                case /* repeated string backup_url */ 5:
                    message.backupUrl.push(reader.string());
                    break;
                case /* string md5 */ 6:
                    message.md5 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 order = 1; */
        if (message.order !== 0)
            writer.tag(1, WireType.Varint).uint32(message.order);
        /* uint64 length = 2; */
        if (message.length !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.length);
        /* uint64 size = 3; */
        if (message.size !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.size);
        /* string url = 4; */
        if (message.url !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.url);
        /* repeated string backup_url = 5; */
        for (let i = 0; i < message.backupUrl.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.backupUrl[i]);
        /* string md5 = 6; */
        if (message.md5 !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.md5);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.ResponseUrl
 */
export const ResponseUrl = new ResponseUrl$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SegmentVideo$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.SegmentVideo", [
            { no: 1, name: "segment", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ResponseUrl }
        ]);
    }
    create(value) {
        const message = { segment: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bilibili.app.playurl.v1.ResponseUrl segment */ 1:
                    message.segment.push(ResponseUrl.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated bilibili.app.playurl.v1.ResponseUrl segment = 1; */
        for (let i = 0; i < message.segment.length; i++)
            ResponseUrl.internalBinaryWrite(message.segment[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.SegmentVideo
 */
export const SegmentVideo = new SegmentVideo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Shake$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.Shake", [
            { no: 1, name: "file", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { file: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string file */ 1:
                    message.file = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string file = 1; */
        if (message.file !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.file);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.Shake
 */
export const Shake = new Shake$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Stream$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.Stream", [
            { no: 1, name: "stream_info", kind: "message", T: () => StreamInfo },
            { no: 2, name: "dash_video", kind: "message", oneof: "content", T: () => DashVideo },
            { no: 3, name: "segment_video", kind: "message", oneof: "content", T: () => SegmentVideo }
        ]);
    }
    create(value) {
        const message = { content: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bilibili.app.playurl.v1.StreamInfo stream_info */ 1:
                    message.streamInfo = StreamInfo.internalBinaryRead(reader, reader.uint32(), options, message.streamInfo);
                    break;
                case /* bilibili.app.playurl.v1.DashVideo dash_video */ 2:
                    message.content = {
                        oneofKind: "dashVideo",
                        dashVideo: DashVideo.internalBinaryRead(reader, reader.uint32(), options, message.content.dashVideo)
                    };
                    break;
                case /* bilibili.app.playurl.v1.SegmentVideo segment_video */ 3:
                    message.content = {
                        oneofKind: "segmentVideo",
                        segmentVideo: SegmentVideo.internalBinaryRead(reader, reader.uint32(), options, message.content.segmentVideo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* bilibili.app.playurl.v1.StreamInfo stream_info = 1; */
        if (message.streamInfo)
            StreamInfo.internalBinaryWrite(message.streamInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.DashVideo dash_video = 2; */
        if (message.content.oneofKind === "dashVideo")
            DashVideo.internalBinaryWrite(message.content.dashVideo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.SegmentVideo segment_video = 3; */
        if (message.content.oneofKind === "segmentVideo")
            SegmentVideo.internalBinaryWrite(message.content.segmentVideo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.Stream
 */
export const Stream = new Stream$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamInfo$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.StreamInfo", [
            { no: 1, name: "quality", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "format", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "err_code", kind: "enum", T: () => ["bilibili.app.playurl.v1.PlayErr", PlayErr] },
            { no: 5, name: "limit", kind: "message", T: () => StreamLimit },
            { no: 6, name: "need_vip", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "need_login", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "intact", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "no_rexcode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "attribute", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "new_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "display_desc", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "superscript", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { quality: 0, format: "", description: "", errCode: 0, needVip: false, needLogin: false, intact: false, noRexcode: false, attribute: 0n, newDescription: "", displayDesc: "", superscript: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 quality */ 1:
                    message.quality = reader.uint32();
                    break;
                case /* string format */ 2:
                    message.format = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* bilibili.app.playurl.v1.PlayErr err_code */ 4:
                    message.errCode = reader.int32();
                    break;
                case /* bilibili.app.playurl.v1.StreamLimit limit */ 5:
                    message.limit = StreamLimit.internalBinaryRead(reader, reader.uint32(), options, message.limit);
                    break;
                case /* bool need_vip */ 6:
                    message.needVip = reader.bool();
                    break;
                case /* bool need_login */ 7:
                    message.needLogin = reader.bool();
                    break;
                case /* bool intact */ 8:
                    message.intact = reader.bool();
                    break;
                case /* bool no_rexcode */ 9:
                    message.noRexcode = reader.bool();
                    break;
                case /* int64 attribute */ 10:
                    message.attribute = reader.int64().toBigInt();
                    break;
                case /* string new_description */ 11:
                    message.newDescription = reader.string();
                    break;
                case /* string display_desc */ 12:
                    message.displayDesc = reader.string();
                    break;
                case /* string superscript */ 13:
                    message.superscript = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 quality = 1; */
        if (message.quality !== 0)
            writer.tag(1, WireType.Varint).uint32(message.quality);
        /* string format = 2; */
        if (message.format !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.format);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* bilibili.app.playurl.v1.PlayErr err_code = 4; */
        if (message.errCode !== 0)
            writer.tag(4, WireType.Varint).int32(message.errCode);
        /* bilibili.app.playurl.v1.StreamLimit limit = 5; */
        if (message.limit)
            StreamLimit.internalBinaryWrite(message.limit, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bool need_vip = 6; */
        if (message.needVip !== false)
            writer.tag(6, WireType.Varint).bool(message.needVip);
        /* bool need_login = 7; */
        if (message.needLogin !== false)
            writer.tag(7, WireType.Varint).bool(message.needLogin);
        /* bool intact = 8; */
        if (message.intact !== false)
            writer.tag(8, WireType.Varint).bool(message.intact);
        /* bool no_rexcode = 9; */
        if (message.noRexcode !== false)
            writer.tag(9, WireType.Varint).bool(message.noRexcode);
        /* int64 attribute = 10; */
        if (message.attribute !== 0n)
            writer.tag(10, WireType.Varint).int64(message.attribute);
        /* string new_description = 11; */
        if (message.newDescription !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.newDescription);
        /* string display_desc = 12; */
        if (message.displayDesc !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.displayDesc);
        /* string superscript = 13; */
        if (message.superscript !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.superscript);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.StreamInfo
 */
export const StreamInfo = new StreamInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamLimit$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.StreamLimit", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { title: "", uri: "", msg: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string uri */ 2:
                    message.uri = reader.string();
                    break;
                case /* string msg */ 3:
                    message.msg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string uri = 2; */
        if (message.uri !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uri);
        /* string msg = 3; */
        if (message.msg !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.msg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.StreamLimit
 */
export const StreamLimit = new StreamLimit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpgradeButton$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.UpgradeButton", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { title: "", link: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string link */ 2:
                    message.link = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string link = 2; */
        if (message.link !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.link);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.UpgradeButton
 */
export const UpgradeButton = new UpgradeButton$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpgradeLimit$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.UpgradeLimit", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "image", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "button", kind: "message", T: () => UpgradeButton }
        ]);
    }
    create(value) {
        const message = { code: 0, message: "", image: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* string image */ 3:
                    message.image = reader.string();
                    break;
                case /* bilibili.app.playurl.v1.UpgradeButton button */ 4:
                    message.button = UpgradeButton.internalBinaryRead(reader, reader.uint32(), options, message.button);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* string image = 3; */
        if (message.image !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.image);
        /* bilibili.app.playurl.v1.UpgradeButton button = 4; */
        if (message.button)
            UpgradeButton.internalBinaryWrite(message.button, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.UpgradeLimit
 */
export const UpgradeLimit = new UpgradeLimit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoInfo$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.VideoInfo", [
            { no: 1, name: "quality", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "format", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "timelength", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "video_codecid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "stream_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Stream },
            { no: 6, name: "dash_audio", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DashItem },
            { no: 7, name: "dolby", kind: "message", T: () => DolbyItem },
            { no: 8, name: "volume", kind: "message", T: () => VolumeInfo }
        ]);
    }
    create(value) {
        const message = { quality: 0, format: "", timelength: 0n, videoCodecid: 0, streamList: [], dashAudio: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 quality */ 1:
                    message.quality = reader.uint32();
                    break;
                case /* string format */ 2:
                    message.format = reader.string();
                    break;
                case /* uint64 timelength */ 3:
                    message.timelength = reader.uint64().toBigInt();
                    break;
                case /* uint32 video_codecid */ 4:
                    message.videoCodecid = reader.uint32();
                    break;
                case /* repeated bilibili.app.playurl.v1.Stream stream_list */ 5:
                    message.streamList.push(Stream.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated bilibili.app.playurl.v1.DashItem dash_audio */ 6:
                    message.dashAudio.push(DashItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bilibili.app.playurl.v1.DolbyItem dolby */ 7:
                    message.dolby = DolbyItem.internalBinaryRead(reader, reader.uint32(), options, message.dolby);
                    break;
                case /* bilibili.app.playurl.v1.VolumeInfo volume */ 8:
                    message.volume = VolumeInfo.internalBinaryRead(reader, reader.uint32(), options, message.volume);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 quality = 1; */
        if (message.quality !== 0)
            writer.tag(1, WireType.Varint).uint32(message.quality);
        /* string format = 2; */
        if (message.format !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.format);
        /* uint64 timelength = 3; */
        if (message.timelength !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.timelength);
        /* uint32 video_codecid = 4; */
        if (message.videoCodecid !== 0)
            writer.tag(4, WireType.Varint).uint32(message.videoCodecid);
        /* repeated bilibili.app.playurl.v1.Stream stream_list = 5; */
        for (let i = 0; i < message.streamList.length; i++)
            Stream.internalBinaryWrite(message.streamList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated bilibili.app.playurl.v1.DashItem dash_audio = 6; */
        for (let i = 0; i < message.dashAudio.length; i++)
            DashItem.internalBinaryWrite(message.dashAudio[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.DolbyItem dolby = 7; */
        if (message.dolby)
            DolbyItem.internalBinaryWrite(message.dolby, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* bilibili.app.playurl.v1.VolumeInfo volume = 8; */
        if (message.volume)
            VolumeInfo.internalBinaryWrite(message.volume, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.VideoInfo
 */
export const VideoInfo = new VideoInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VolumeInfo$Type extends MessageType {
    constructor() {
        super("bilibili.app.playurl.v1.VolumeInfo", [
            { no: 1, name: "measured_i", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "measured_lra", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "measured_tp", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "measured_threshold", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "target_offset", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "target_i", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "target_tp", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value) {
        const message = { measuredI: 0, measuredLra: 0, measuredTp: 0, measuredThreshold: 0, targetOffset: 0, targetI: 0, targetTp: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double measured_i */ 1:
                    message.measuredI = reader.double();
                    break;
                case /* double measured_lra */ 2:
                    message.measuredLra = reader.double();
                    break;
                case /* double measured_tp */ 3:
                    message.measuredTp = reader.double();
                    break;
                case /* double measured_threshold */ 4:
                    message.measuredThreshold = reader.double();
                    break;
                case /* double target_offset */ 5:
                    message.targetOffset = reader.double();
                    break;
                case /* double target_i */ 6:
                    message.targetI = reader.double();
                    break;
                case /* double target_tp */ 7:
                    message.targetTp = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* double measured_i = 1; */
        if (message.measuredI !== 0)
            writer.tag(1, WireType.Bit64).double(message.measuredI);
        /* double measured_lra = 2; */
        if (message.measuredLra !== 0)
            writer.tag(2, WireType.Bit64).double(message.measuredLra);
        /* double measured_tp = 3; */
        if (message.measuredTp !== 0)
            writer.tag(3, WireType.Bit64).double(message.measuredTp);
        /* double measured_threshold = 4; */
        if (message.measuredThreshold !== 0)
            writer.tag(4, WireType.Bit64).double(message.measuredThreshold);
        /* double target_offset = 5; */
        if (message.targetOffset !== 0)
            writer.tag(5, WireType.Bit64).double(message.targetOffset);
        /* double target_i = 6; */
        if (message.targetI !== 0)
            writer.tag(6, WireType.Bit64).double(message.targetI);
        /* double target_tp = 7; */
        if (message.targetTp !== 0)
            writer.tag(7, WireType.Bit64).double(message.targetTp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bilibili.app.playurl.v1.VolumeInfo
 */
export const VolumeInfo = new VolumeInfo$Type();
/**
 * @generated ServiceType for protobuf service bilibili.app.playurl.v1.PlayURL
 */
export const PlayURL = new ServiceType("bilibili.app.playurl.v1.PlayURL", [
    { name: "PlayURL", options: {}, I: PlayURLReq, O: PlayURLReply },
    { name: "Project", options: {}, I: ProjectReq, O: ProjectReply },
    { name: "PlayView", options: {}, I: PlayViewReq, O: PlayViewReply },
    { name: "PlayConfEdit", options: {}, I: PlayConfEditReq, O: PlayConfEditReply },
    { name: "PlayConf", options: {}, I: PlayConfReq, O: PlayConfReply }
]);
